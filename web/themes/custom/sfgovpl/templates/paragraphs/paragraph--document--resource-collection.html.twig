{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set parent = paragraph.getParentEntity() %}
{% set field_file = paragraph.field_file  %}
{% set fileurl = file_url(paragraph.field_file.entity.field_media_file.entity.uri.value) %}

{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
not paragraph.isPublished() ? 'paragraph--unpublished',
"parent--bundle--" ~ parent.bundle
]
%}

{% block paragraph %}
  <div {{ attributes.addClass(classes).setAttribute('data-contact', paragraph.bundle|clean_class) }}>
    {% block content %}
      {% if not field_file.isEmpty %}
        <div class="document">
          {% if field_file.entity.field_published_date.value %}
            <div class="link-date"><span class="link"><a href="{{ fileurl }}">{{ field_file.entity.label }}</a></span>
          {% else %}
            <div class="link-date"><span class="no-link">{{ field_file.entity.label }}</span>
          {% endif %}
          <span class="publish-date">
          {% if field_file.entity.field_published_date.value %}
            {{ field_file.entity.field_published_date.value|date("F j, Y") }}
          {% else %}
            Upcoming
          {% endif %}
          </span>
          </div>
          <span class="description">{{ field_file.entity.field_description.value|raw }}</span>
        </div>
      {% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
