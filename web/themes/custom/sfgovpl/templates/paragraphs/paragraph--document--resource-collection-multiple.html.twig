{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set parent = paragraph.getParentEntity() %}
{% set file_count = paragraph.field_file.getValue() | length %}

{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  "parent--bundle--" ~ parent.bundle
  ]
%}

{% import _self as paragraph_document %}

{% block paragraph %}
  {% if content.field_file|render %}
    <div {{ attributes.addClass(classes) }}>
      {% block content %}
        {% for i in 0..file_count - 1 %}
          <div class="field__item">
            {{ paragraph_document.document(content.field_file[i]['#media']) }}
          </div>
        {% endfor %}
      {% endblock %}
    </div>
  {% endif %}
{% endblock paragraph %}

{% macro document(entity) %}
  {% set fileurl = file_url(entity.field_media_file.entity.uri.value) %}
  <div class="paragraph document" data-contact="document">
    {% if fileurl|length > 3 and entity.field_published_date.value %}
      <div class="link-date"><span class="link"><a href="{{ fileurl }}">{{ entity.label }}</a></span>
    {% elseif entity.field_document_url and entity.field_published_date.value %}
      <div class="link-date">
        <span class="link"><a href="{{ entity.field_document_url.value.0.uri }}">{{ entity.label }}</a></span>
    {% else %}
      <div class="link-date">
        <span class="no-link">{{ entity.label }}</span>
    {% endif %}
        <span class="publish-date">
          {% if entity.field_published_date.value and fileurl|length > 3 %}
            {{ entity.field_published_date.value|date("F j, Y") }}
          {% elseif entity.field_published_date.value and entity.field_document_url %}
            {{ entity.field_published_date.value|date("F j, Y") }}
          {% else %}
            {{ 'Upcoming'|t }}
          {% endif %}
        </span>
      </div>
      <span class="description">{{ entity.field_description.value|raw }}</span>
    </div>
{% endmacro %}
