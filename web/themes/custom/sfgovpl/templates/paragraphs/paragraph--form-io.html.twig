{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set formio_js_version = 'latest' %}
{% set formio_sfds_version = 'latest' %}
{% if paragraph.field_formio_js_version.value %}
  {% set formio_js_version = paragraph.field_formio_js_version.value %}
{% endif %}
{% if paragraph.field_formio_sfds_version.value %}
  {% set formio_sfds_version = paragraph.field_formio_sfds_version.value %}
{% endif %}
<div id="formio"
  data-source="{{ paragraph.field_formio_data_source.value|trim }}"
  {% if paragraph.field_formio_render_options.value %}
    data-options="{{ paragraph.field_formio_render_options.value|escape }}"
  {% endif %}
></div>
<script src="https://unpkg.com/formiojs@{{ formio_js_version }}/dist/formio.full.min.js"></script>
<script src="https://unpkg.com/formio-sfds@{{ formio_sfds_version }}/dist/formio-sfds.standalone.js"></script>
<script>
  window.addEventListener('load', function() {
    var el = document.getElementById('formio')
    var options = safeJSONParse(el.getAttribute('data-options'))
    Formio.createForm(el, el.getAttribute('data-source'), options)
      .then(function(form) {
        //perform sfoptions
      if(options.sfoptions && options.sfoptions["hide"]){
        options.sfoptions["hide"].forEach(function(item, index){
          var hide = (document.getElementsByClassName(item))
          for (var i=0; i<hide.length;i++){
            hide[i].style.display = "none";
          }
        })
      }
      // What to do when the submit begins.
      form.on('submitDone', function(submission) {
          // custom options defined in Form.io render options field
          if(options.redirects instanceof Object){
            for (var key in options.redirects) {
              var value = options.redirects[key]
               // only one "redirect" should be "yes", this is set in the form.io form
              if(submission.data[key] === "yes"){
                window.location = value;
                break;
              }
            }
          }
        {% if paragraph.field_formio_confirmation_url.value %}
          window.location = '{{ paragraph.field_formio_confirmation_url.value }}';
        {% endif %}
      });
    });


    function safeJSONParse(str) {
      var parsed = {}
      try {
        parsed = JSON.parse(str)
      } catch (error) {
        console.warn('Unable to parse form options:', str)
      }
      return parsed
    }
  })
</script>
