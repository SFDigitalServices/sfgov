{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set endpoint = paragraph.field_formio_data_source.value|trim %}
{% set form_id = content.field_formio_data_source['#formio_id']|clean_id %}
{% set options = paragraph.field_formio_render_options.value|default('{}') %}

{% set classes = [
  'paragraph--formio',
  'paragraph--formio--view-mode--' ~ view_mode|clean_class,
  'paragraph--formio--' ~ form_id,
]%}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div id="formio-{{ form_id }}"
      data-source="{{- endpoint -}}" data-options="{{ options|escape }}" data-translations="{{ content.formio_json_data }}">
    </div>

{% block content %}
<script>
(function() {

  var time = Date.now()

  var confirmationURL = {{
    paragraph.field_formio_confirmation_url.value is empty
      ? "null"
      : paragraph.field_formio_confirmation_url.value|json_encode(constant('JSON_PRETTY_PRINT'))|raw
  }}

  var formLanguageMap = {
    zh:       'zh-hant',
    'zh-TW':  'zh-hant'
  }

  window.addEventListener('load', function() {
    var loadTime = Date.now() - time

    // Get the properties defined in the Amplitude event for "Feedback form".
    var amplitudeData = {}
    if (drupalSettings.amplitude.events.length) {
      drupalSettings.amplitude.events.find(function(obj) {
        if (obj.name === 'Page view') {
          amplitudeData = safeJSONParse(obj.properties)
        }
      })
    }

    var amp = (function() {
      var amplitude
      var log = function (event, data) {
        console.log('Form event (no amplitude):', event, data)
      }
      return function (eventName, data) {
        if (!amplitude && window.amplitude) {
          amplitude = window.amplitude.getInstance()
          log = amplitude.logEvent.bind(amplitude)
        }
        log(eventName, Object.assign(data, amplitudeData))
      }
    })()

    amp('window.load', { load_time: loadTime })

    // keeping this as a DOM for patch.js
    var el = document.getElementById('formio-{{ form_id }}')
    var options = safeJSONParse(el.getAttribute('data-options'))
    options.i18n = safeJSONParse(el.getAttribute('data-translations'))

    /*
     * Every key in this object is a form event name, and the value is a
     * function that returns amplitude event data for the given event data.
     *
     * Note that formiojs uses eventemitter2 and usually emits event data as
     * multiple arguments to the listener rather than a single event object.
     */
    var formEventHandlers = {
      submit: function (submission) {
        return { } // just log the event
      },
      submitDone: function (submission) {
        return {
          submission_id: submission._id
        }
      },
      error: function (messageOrErrors) {
        if (Array.isArray(messageOrErrors)) {
          /**
           * If we get an array of errors, create a mapping of component keys
           * to error messages, with exactly one entry per component. Only the
           * first validation message will be sent to Amplitude.
           *
           * {
           *   errors: {
           *     [component.key]: component.message
           *   }
           * }
           *
           * <https://github.com/formio/formio.js/blob/v4.11.2/src/Webform.js#L1208>
           */
          var components = {}
          messageOrErrors.forEach(function(error) {
            if (error && error.component && error.message) {
              components[error.component.key] = error.message
            }
          })
          return {
            errors: components
          }
        } else if (typeof messageOrErrors === 'string') {
          // in some instances, formiojs sends a single error message:
          // <https://github.com/formio/formio.js/blob/v4.11.2/src/Webform.js#L1048>
          return {
            message: messageOrErrors
          }
        }
      },
      submitError: function (message) {
        return { error: message }
      },
      componentError: function (error) {
        return false
      },
      prevPage: function (data) {
        return {
          page_index: data.page,
          page_title: getPageTitle(data, this)
        }
      },
      nextPage: function (data) {
        return {
          page_index: data.page,
          page_title: getPageTitle(data, this)
        }
      },
      wizardNavigationClicked: function (page) {
        return {
          page_title: page.title
        }
      },
      wizardPageSelected: function (page, index) {
        return {
          page_title: page.title,
          page_index: index
        }
      },
      saveDraft: function (submission) {
        return { } // just log the event
      },
      restoreDraft: function (submission) {
        return { } // just log the event
      },
      editGridAddRow: function (data) {
        return {
          component: data.component.key
        }
      }
    }

    time = Date.now()
    var dataSource = el.getAttribute('data-source')
    var params = new URL(location).searchParams
    if (params.submission) {
      dataSource += `/submission/${params.submission}`
      // options.saveDraft = true
      Formio.setUser({
        _id: '123'
      })
    }
    Formio.createForm(el, dataSource, options)
      .then(function(form) {
        amp('form.load', { load_time: Date.now() - time })

        Object.keys(formEventHandlers).forEach(function(eventName) {
          form.on(eventName, function() {
            try {
              var formData = formEventHandlers[eventName].apply(form, arguments)
              if (formData && typeof formData === 'object') {
                formData.url = form.url
                amp('form.' + eventName, { form: formData })
              }
            } catch (error) {
              console.error('There was an error handling form event "%s":', eventName, error)
            }
          })
        })

        var sfoptions = options.sfoptions || {}
        // perform sfoptions, hide certain elements
        if (sfoptions.hide instanceof Object) {
          customHideElements(options.sfoptions.hide)
        }
        // add css class to element(by id)
        if (sfoptions.addClass) {
          customAddCssClassById(options.sfoptions.addClass)
        }
        // if cookies are defined, populate the form field with cookie value.
        if (sfoptions.cookies) {
          manageFormCookies(options.sfoptions.cookies, form, true)
        }

        // perform custom action on nextPage event
        form.on('nextPage', function() {
          // set form cookies, if there are any
          if (options.sfoptions instanceof Object && options.sfoptions.cookies) {
            manageFormCookies(options.sfoptions.cookies, form, false)
          }
        })

        // What to do when the submit begins.
        form.on('submitDone', function(submission) {
          // custom options defined in Form.io render options field
          if (options.redirects instanceof Object) {
            if (options.sfoptions && options.sfoptions.hide instanceof Object) {
              customHideElements(options.sfoptions.hide)
            }
            for (var key in options.redirects) {
              var value = options.redirects[key]
              // only one "redirect" should be "yes", this is set in the form.io form
              if (submission.data[key] === "yes") {
                window.location = value
                break
              }
            }
          }

          if (confirmationURL) {
            // see: <https://github.com/formio/formio.js/pull/3592> for more details
            var formLang = form.language || form.options.language
            var lang = formLanguageMap[formLang] || formLang
            window.location = lang && lang !== 'en'
              ? confirmationURL.replace('{lang}', lang)
              : confirmationURL.replace('{lang}/', '')
          }
        })
      })
      .catch(function(error) {
        amp('form.loadError', {
          url: dataSource,
          error: error
        })
      })

    function getPageTitle(data, form) {
      if (!form || !form.pages || form.pages.length === 0) {
        return undefined
      }
      var page = form.pages[data.page]
      return page && page.component
        ? page.component.title
        : undefined
    }

    function customAddCssClassById(classes) {
      for (var key in classes) {
        var el = document.getElementById(key)
        if (el != null) {
          el.classList.add(classes[key])
        }
      }
    }

    function customHideElements(elements) {
      elements.forEach(function(klass, index) {
        var hide = document.getElementsByClassName(klass)
        for (var i = 0; i < hide.length; i++) {
          hide[i].style.display = "none"
        }
      })
    }

    function setCookie(name, value) {
      var today = new Date()
      var expiry = new Date(today.getTime() + 90 * 24 * 3600 * 1000); // plus 90 days
      document.cookie=name + "=" + escape(value) + "; path=/; expires=" + expiry.toGMTString()
    }

    function getCookie(name) {
      var re = new RegExp(name + "=([^;]+)")
      var value = re.exec(document.cookie)
      return (value != null) ? unescape(value[1]) : null
    }

    function setCheckboxRadioButton(field, cookieval, fieldtype) {
      if (!cookieval) return

      if (cookieval.includes(field.value)) {
        field.prop('checked', true)
      }
    }

    function manageFormCookies(cookies, form, populateAll) {
      cookies.forEach(function(item, index) {
        var field = $('input[name*="'+item+'"]') // use jquery to get dynamic field by name
        var fieldtype = field.prop('type')

        // special type: select, because formio renders select as divs
        var selectField = $('select[name*="'+item+'"]')[0]
        if (selectField) {
          field = $(selectField) // convert to jQuery object
        }
        if (field || populateAll) {
          var cookieval = getCookie(item)
          if (cookieval) {
            // set submission data, form validation needs this
            form._submission.data[item] = cookieval
          }

          if (field) { // populate fields with cookie values
            if (fieldtype !== undefined && (fieldtype === 'radio' || fieldtype === 'checkbox')) {
              setCheckboxRadioButton(field, cookieval, fieldtype)
            } else {
              field.val(cookieval)
            }
          } else if (field) {
            // set cookie for first time
            if (fieldtype !== undefined && (fieldtype === 'radio' || fieldtype === 'checkbox')) {
              setCookie(item, field.prop('checked'))
            } else {
              setCookie(item, field.val())
            }
          } // updates cookie if value changed
          $(field).change(function() {
            console.log("setting cookie for " + item + " with value " + this.value)
            setCookie(item, this.value)
          })
        }
      })
    }

    function safeJSONParse(str) {
      var parsed = {}
      try {
        parsed = JSON.parse(str)
      } catch (error) {
        console.warn('Unable to parse form options:', str)
      }
      return parsed
    }
  })

})()
</script>
{% endblock content %}

</div>
{% endblock paragraph %}
