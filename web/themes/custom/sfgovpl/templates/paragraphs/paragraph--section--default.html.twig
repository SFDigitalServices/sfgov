{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set parent = paragraph.getParentEntity() %}
{% set child = paragraph.field_content.entity.bundle %}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  (parent.bundle == 'landing') ? 'sfgov-container--full',
  "parent--bundle--" ~ parent.bundle,
  (paragraph.field_title.getString == 'Services') ? 'sfgov-services',
  (paragraph.field_title.getString == 'Events') ? 'sfgov-events',
  'paragraph-child--' ~ child
] %}

{% block paragraph %}

  {% if (child == 'campaign') or (child == 'people') %}
    <div {{ attributes.addClass(classes).removeClass('sfgov-container--full').addClass('clearfix') }}>
      {{ content|without('field_title') }}
    </div>
  {% else %}

    <div {{ attributes.addClass(classes) }}>
    {% block content %}
      {% if (not paragraph.field_title.isEmpty) and (parent.bundle() == "landing") %}
        <h2 class="sfgov-header-section">
          {{ paragraph.field_title.getString }}
        </h2>
      {% elseif not paragraph.field_title.isEmpty %}
        <h3>{{ paragraph.field_title.getString }}</h3>
      {% endif %}
      <div {{ (parent.bundle == "landing" ? "class=\"sfgov-container\"") }}>
        {{ content|without('field_title') }}
      </div>
    {% endblock %}
  </div>

  {% endif %}

{% endblock paragraph %}
