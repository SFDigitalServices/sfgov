{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{% set field_link = content.field_link.0 %}
{% set text = field_link['#title'] %}
{% set href = field_link['#url'].toString() %}
{% set parent = paragraph.parentEntity %}
{% set isDeptContentType = parent.parentEntity.bundle == 'department' ? true : false %}
{% set btnClasses = parent.bundle == 'spotlight' ? ['btn-inverse'] : [] %}

{# if this paragraph is part of a department content type and it's the first spotlight on the page, remove the inverse class #}
{% if isDeptContentType == true %}
  {% set btnClasses = [] %}
{% endif %}

{# if this paragraph is on a campaign content type, check to see if it should be inversed. #}
{% set node = parent.parentEntity %}
{% if node.field_campaign_theme %}
  {% set campaign_theme_label = node.field_campaign_theme.entity.label|lower %}
  {% if campaign_theme_label in ['black', 'green', 'purple', 'red',] %}
    {% set btnClasses = 'btn-inverse' %}
  {% endif %}
{% endif %}

{% block paragraph %}
  {% if field_link %}
    <div{{ attributes.addClass(classes) }}>
      {% block content %}
        {% include "@sfgov-design-system/button/link.twig" with {
            "href": href,
            "text": text,
            "classes": btnClasses
        } %}
      {% endblock content %}
    </div>
  {% endif %}
{% endblock paragraph %}
