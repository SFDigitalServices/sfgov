{#
/**
 * @file Feedback form.io form.
 */
#}
{% extends 'paragraph--form-io.html.twig' %}
{% block content %}
  <script>
    window.addEventListener('load', function() {
      var el = document.getElementById('formio-{{ form_id }}');
      // Note: The Feedback form requires opting out of formio-sfds. This is set
      // in the admin UI, via render options, by adding:
      // "formioSFDSOptOut": true
      var options = safeJSONParse(el.getAttribute('data-options'));

      // Get the properties defined in the Amplitude event for "Feedback form".
      var amplitudeData = {};
      if (typeof amplitude != 'undefined' && drupalSettings.amplitude.events.length > 0) {
        drupalSettings.amplitude.events.find(function(obj) {
          if (obj.name === 'Feedback form') {
            amplitudeData = safeJSONParse(obj.properties);
          }
        });
      }

      Formio.createForm(el, el.getAttribute('data-source'), options)
        .then(function(form) {
          // This is used to conditionally hide the following elements on form
          // form pages: wasThisPageHelpful, helpfulYes, helpfulNo. See field
          // configuration: Conditions (tab) > Advanced conditions > JavaScript.
          form.data.isFormPage = (amplitudeData && amplitudeData.content_type === 'Form page') ? 'Yes' : 'No';

          var feedbackSuccess, messageComponent = '';
          if (!feedbackSuccess || !messageComponent) {
            form.components.map(function(component) {
              // Get custom alert message from HTML 'feedbackSuccess'.
              if (component.key === 'feedbackSuccess' && component.component.html) {
                feedbackSuccess = component.component.html;
              }
              // Find the message field, so we can focus it later.
              if (component.key === 'message') {
                messageComponent = component;
              }
            });
          }

          form.on('change', function(event) {
            if (event.changed) {
              var key = event.changed.component.key;

              // The value of 'isHelpful' (hidden field, default value "Yes") is
              // set via field Logic. It listens for a custom event named
              // 'notHelpfulEvent', which is triggered on click for the "No"
              // (helpfulNo) and "Report a problem..." (reportIssue) buttons,
              // and changes the value of isHelpful to "No".
              if (key === 'isHelpful') {
                // Focus the next field.
                $(messageComponent.element).find('textarea').focus();

                // Gtranslate tries to translate this even if it's already translated.
                // Block gtranslate from doing so.
                $(messageComponent.element).addClass('notranslate');

                // Capture which button was clicked and log to Amplitude.
                if (typeof amplitude != 'undefined') {
                  var eventDescription = '';
                  if (form.data.helpfulNo === true) {
                    eventDescription = 'No button clicked';
                  }
                  if (form.data.reportIssue === true) {
                    eventDescription = 'Report issue button clicked';
                  }
                  amplitudeData.feedback = {
                    'type': 'change',
                    'description': eventDescription,
                    'data': event.data,
                  }
                  amplitude.getInstance().logEvent('Feedback Form Interaction', amplitudeData);
                }
              }
            }
          });

          form.on('submitDone', function(submission) {
            // Display custom alert message.
            if (feedbackSuccess) {
              form.setAlert('success', feedbackSuccess);
            }

            // Hide the form. It cannot be submitted again/updated.
            document.getElementById(form.id).style.display = 'none';

            // Log event with Drupal and form submission data to Amplitude.
            if (typeof amplitude != 'undefined') {
              amplitudeData.feedback = {
                'type': 'submit',
                'description': submission.data.isHelpful === 'Yes' ? 'Helpful' : 'Not Helpful',
                'data': submission.data,
              }
              amplitude.getInstance().logEvent('Feedback Form Submission', amplitudeData);
            }
          });
      });

      function safeJSONParse(str) {
        var parsed = {}
        try {
          parsed = JSON.parse(str)
        } catch (error) {
          console.warn('Unable to parse form options:', str)
        }
        return parsed;
      }
    });
  </script>
{% endblock %}
