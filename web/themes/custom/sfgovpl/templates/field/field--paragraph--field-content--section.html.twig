{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}

{% set isPeopleSubSection = items[0].content['#paragraph'].getType() == "people" ? true : false %}

{%
  set classes = [
    'field',
    'field--type-' ~ field_type|clean_class,
    label_display == 'inline' ? 'field--inline',
    bundle|clean_class ~ '__' ~ field_name|replace({'field_' : ''})|clean_class,
    isPeopleSubSection ? 'sfgov-people'
  ]
%}
{%
  set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}
{% if label_hidden %}
  {% if multiple %}
    <div{{ attributes.addClass(classes, 'field__items') }}>
      {% for item in items %}
        {% set multipleItemClasses = ['field__item'] %}
        {% set paragraph_type = item.content['#paragraph'].bundle() %}

        {% if paragraph_type == 'top_search_suggestion' %}
          <div{{ item.attributes.addClass(multipleItemClasses, 'sfgov-top-search-suggestion') }}>
            {{ item.content }}
          </div>

        {% elseif paragraph_type == 'spotlight' %}
          {% set containerClass = is_front ? 'sfgov-full-bleed' : 'sfgov-full-bleed--breakout' %}
          <div{{ item.attributes.addClass(containerClass, 'padding-zero', 'sfgov-spotlight-container--nested sfgov-spotlight', multipleItemClasses) }}>
            <div class="sfgov-section-container">
              {{ item.content }}
            </div>
          </div>

        {% else %}
          <div{{ item.attributes.addClass(multipleItemClasses) }}>{{ item.content }}</div>
        {% endif %}
      {% endfor %}
    </div>
  {% else %}
    {% for item in items %}
      <div{{ attributes.addClass(classes, 'field__item') }}>{{ item.content }}</div>
    {% endfor %}
  {% endif %}
{% else %}
  <div{{ attributes.addClass(classes) }}>
    <h4{{ title_attributes.addClass(title_classes) }}>{{ label }}</h4>
    {% if multiple %}
      <div class="field__items">
    {% endif %}
    {% for item in items %}
      <div{{ item.attributes.addClass('field__item') }}>{{ item.content }}</div>
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %}
