{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
#}
{{ content.content_moderation_control }}

{% set description = node.get('field_description').getValue()[0]['value'] %}
{% set divisionIds = division_ids|join(',') %} {# refer to web/themes/custom/sfgovpl/includes/node.inc, sfgovpl_preprocess_node__department__full #}

{# these meeting views take two arguments #}
{# argument 0 - the current node's id, for generating a proper "more" link in the view #}
{# argument 1 - the current nodes's divisions/subcommittees id's, if any, for displaying the divisions/subcommittees meetings  #}
{%
  set meetings_block = {
    upcoming: {
      render: drupal_view('meetings', 'block_upcoming', node.id, divisionIds),
      result: drupal_view_result('meetings', 'block_upcoming', node.id, divisionIds)
    },
    past: {
      render: drupal_view('meetings', 'block_past', node.id, divisionIds),
      result: drupal_view_result('meetings', 'block_past', node.id, divisionIds)
    }
  }
%}

{% set partOf = ('Part of ' | t) %}

<div class="responsive-container mx-auto px-20 xl:px-0">
  {% embed '@theme/hero-banner.twig' with {
    'banner': {
      'title': node.label,
      'text': node.field_description.value,
      'label': drupal_view('departments', 'agency_part_of_agencies', node.id),
      'logo': {
        'src': file_url(node.field_image.entity.field_media_image.entity.uri.value),
        'alt': node.field_image.entity.field_media_image.alt
      }
    }
  } %}


    {% block logo %}
      {% if content.field_image|render|striptags %}
        <div class="hero-banner--logo text-center w-1/4 mb-20 lg:mb-0">
          {{ content.field_image }}
        </div>
      {% endif %}
    {% endblock logo %}

  {% endembed %}

</div>

{# Alert #}
{% include '@theme/alert.twig' with {
  date_exp: node.field_alert_expiration_date.0.value,
  style: 'department',
  bgClass: 'bg-yellow-3'
} %}

<div>
  {% if content.field_spotlight2['#items'].getValue() %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container mx-auto px-20 xl:px-0">
        {{ content.field_spotlight2 }}
      </div>
    </div>
  {% endif %}

  {% if content.field_featured_items|render|trim %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container responsive-grid grid-cols-1 lg:grid-cols-3">
        {% for key, item in content.field_featured_items if key|first != '#' %}
          {{ item }}
        {% endfor %}
      </div>
    </div>
  {% endif %}

  {% set hasMeetingMeta = false %}
  {% if content.field_public_body_meetings|render %}
    {% set hasMeetingMeta = true %}
  {% endif %}

  {% if (meetings_block.past.result is not empty) or (meetings_block.upcoming.result is not empty) or hasMeetingMeta is not empty %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      {% if hasMeetingMeta %}
        <div class="responsive-container">
          {{ content.field_public_body_meetings }}
        </div>
      {% endif %}
      {% if meetings_block.upcoming.result is not empty or  meetings_block.past.result is not empty %}
        <div class="responsive-container py-40 lg:py-60">
          {% if hasMeetingMeta is empty %}
            <h2 class="p-0 m-0 lg:mb-40 lg:text-title-xl-desktop">{{ 'Meetings' | t }}</h2>
          {% endif %}
          {% if meetings_block.upcoming.result is not empty %}
            <h3 class="m-0 mb-28 lg:text-title-md-desktop">{{ 'Upcoming meetings' | t }}</h3>
            <div class="mb-40">
              {{ meetings_block.upcoming.render }}
            </div>
          {% endif %}

          {% if meetings_block.past.result is not empty %}
            <h3 class="m-0 mb-28 lg:text-title-md-desktop">{{ 'Past meetings' | t }}</h3>
            <div class="mb-40">
              {{ meetings_block.past.render }}
            </div>
          {% endif %}
        </div>
      {% endif %}
    </div>
  {% endif %}

  {% if content.field_department_services['#items'].getValue() %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container">
        {{ content.field_department_services }}
      </div>
    </div>
  {% endif %}

  {% if content.field_spotlight['#items'].getValue() %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container">
        {{ content.field_spotlight }}
      </div>
    </div>
  {% endif %}

  {% set news_view = drupal_view('news', 'news_block_depts', node.id)|render  %}
  {%  if news_view|striptags|trim %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container">
        {{ news_view }}
      </div>
    </div>
  {% endif %}

  {% set events_view = drupal_view('events', 'block_1', node.id)|render %}
  {% set has_events = drupal_view_result('events', 'block_1', node.id) %}
  {% set has_past_events = drupal_view_result('events', 'page_6', node.id) %}
  {% set event_heading = 'Events'|t({}, {'context' : 'Agency event section heading'})  %}
  {% if has_events is empty and has_past_events is not empty%}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container">
        <h2 class="text-title-xl m-0 mb-40 lg:text-title-xl-desktop">{{ event_heading }}</h2>
        <p>There are no upcoming events right now.</p>
        <br>
        {{ events_view }}
      </div>
    </div>
  {% elseif has_events is empty and has_past_events is empty %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container">
        <h2 class="text-title-xl m-0 mb-40 lg:text-title-xl-desktop">{{ event_heading }}</h2>
        <p>There are no upcoming events right now.</p>
        <br>
      </div>
    </div>
  {% elseif has_events is not empty %}
    <div class="odd:bg-grey-1 py-40 lg:py-60">
      <div class="responsive-container">
        {{ events_view }}
      </div>
    </div>
  {% endif %}

  {% set hasAboutSection = "false" %}
  {% set hasAgencySection = division_list|length > 0 %}
  {% set hasAgencySectionTitle = node.field_agency_sections.0.entity.field_section_title_list.value is not empty %}

  {% if content.field_about_or_description|render|striptags
    or about_page_link
    or content.field_call_to_action|render|striptags
    or content.field_social_media|render|striptags
    or content.field_departments|render|striptags
    or hasAgencySection != "false"
  %}
    {% set hasAboutSection = "true" %}
  {% endif %}

  {% if content.field_resources|render|striptags|trim %}
    {% set resourceEntityExists = node.field_resources.0.entity.field_resources.0.entity.field_resource.getValue() | length %}
    {% set sfgovLinkExists = node.field_resources.0.entity.field_resources.0.entity.field_node.getValue() | length %}

    {% if count_resources > 0 or sfgovLinkExists > 0 %}
      {% set resourcesSpacing = "py-40 lg:py-60" %}
      {% if hasAboutSection == "false" %}
        {% set resourcesSpacing = "pt-40 pb-0 lg:pt-60 lg:pb-0" %}
      {% endif %}
      <div class="odd:bg-grey-1 {{ resourcesSpacing }}">
        <div class="responsive-container">
          {{ content.field_resources }}
        </div>
      </div>
    {% endif %}
  {% endif %}

  {% if hasAboutSection != "false" %}
    <div class="sfgov-dept-about bg-blue-dark py-40 lg:py-60">
      <div class="responsive-container">
        <h2 class="text-white text-title-xl m-0 mb-40 lg:text-title-xl-desktop">{{ node.field_about_or_description.fieldDefinition.label | t }}</h2>
        <div class="lg:flex">
          <div class="text-white text-big-desc-mobile lg:text-big-desc-desktop lg:w-2/3"> {# left hand side #}
            {# about description #}
            {% if content.field_about_or_description|render|striptags %}
              <div class="mb-24 lg:mb-60">
                {{ content.field_about_or_description | raw }}
              </div>
            {% endif %}

            {# this element and text is hard coded in a custom module #}
            {# it's presence is determined by the existence of an about page for the node referenced in field_parent_department #}
            {# @see web/modules/custom/sfgov_about/sfgov_about.module #}
            {% if about_page_link %}
              <div class="mb-60">
                {% include "@sfgov-design-system/button/link.twig" with {
                  "href": about_page_link['#url'],
                  "text": about_page_link['#title'],
                  "classes": ['btn-inverse']
                } %}
              </div>
            {% endif %}

            {% if hasAgencySection or content.field_departments|render|striptags|trim %}
              <div class="responsive-grid grid-cols-1 gap-40 mb-60">
                {# agency sections (divisions) #}
                {% if hasAgencySection %}
                  <div>
                    <p class="text-title-xs font-medium m-0 mb-24"> {{ node.field_agency_sections.0.entity.field_section_title_list.value | t }}</p>
                    <ul class="responsive-grid gap-y-20 list-none p-0 m-0 grid-cols-1 lg:grid-cols-2">
                      {% for division in division_list %}
                        <li class="text-body"><a class="text-inherit" href="{{ division.url }}">{{ division.title }}</a></li>
                      {% endfor %}
                    </ul>
                  </div>
                {% endif %}

                {# related agencies #}
                {% if content.field_departments|render|striptags|trim %}
                  <div>
                    <p class="text-title-xs font-medium m-0 mb-24">{{ content.field_departments['#title'] }}</p>
                    <ul class="responsive-grid gap-y-20 list-none p-0 m-0 grid-cols-1 lg:grid-cols-2">
                    {% for key, item in content.field_departments if key|first != '#' %}
                      <li class="text-body"><a class="text-inherit" href="{{ item["#url"] }}">{{ item["#title"] }}</a></li>
                    {% endfor %}
                    </ul>
                  </div>
                {% endif %}
              </div>
            {% endif %}
          </div>

          <div class="text-white flex flex-col-reverse lg:block lg:flex-none lg:w-1/3 lg:pl-60"> {# right hand side #}
            {# social media #}
            {% if content.field_social_media|render|striptags %}
              <div class="social-media">
                {{ content.field_social_media }}
              </div>
            {% endif %}

            {# call to action #}
            {% if content.field_call_to_action|render|striptags|trim %}
              <div class="mb-60 lg:mb-0">
                {{ content.field_call_to_action }}
              </div>
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  {% endif %}

  {% set hasPeople = content.field_people|render|striptags|trim %}
  {% if hasPeople %}
    <div class="py-40 lg:py-60">
      <div class="responsive-container rounded">
        <div class="px-20 py-60 bg-blue-1 rounded lg:p-60">
          <h2 class="text-title-xl m-0 mb-40 lg:text-title-xl-desktop">{{ 'People' | t }}</h2>
          {{ content.field_people }}
        </div>
      </div>
    </div>
  {% endif %}

  {% set hasAddress = content.field_address|render|striptags|trim %}
  {% set hasPhone = content.field_phone_numbers|render|striptags|trim %}
  {% set hasEmail = content.field_email|render|striptags|trim %}
  {% set hasContact = hasAddress or hasPhone or hasEmail %}

  {% if hasContact %}
    <div class="py-40 lg:py-60">
      <div class="responsive-container">
        <h2 class="text-title-xl m-0 mb-40 lg:text-title-xl-desktop">{{ 'Contact'|t }}</h2>
        <div class="grid gap-20 lg:grid-cols-3">
          {% if hasAddress %}
            <div class="sfgov-contact-section address">
              {{ content.field_address }}
            </div>
          {% endif %}
          {% if hasPhone %}
            <div class="sfgov-contact-section phone-numbers">
              <p class="flex font-medium mb-20 text-title-xs lg:text-title-xs-desktop">
                <sfgov-icon class="mr-20" symbol="phone"></sfgov-icon>
                <span>{{ 'Phone'|t }}</span>
              </p>
              {{ content.field_phone_numbers }}
            </div>
          {% endif %}
          {% if hasEmail %}
            <div class="sfgov-contact-section email">
              <p class="flex font-medium mb-20 text-title-xs lg:text-title-xs-desktop">
                <sfgov-icon class="mr-20" symbol="mail"></sfgov-icon>
                <span>{{ 'Email'|t }}</span>
              </p>
              {{ content.field_email }}
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  {% endif %}

  {% set hasPublicRecordsLink = content.field_req_public_records_link['#items'] is not empty %}
  {% set hasPublicRecordsEmail = content.field_req_public_records_email['#items'] is not empty %}
  {% set hasPublicRecordsPhone = content.field_req_public_records_phone['#items'] is not empty %}
  {% set hasArchiveUrl = content.field_archive_url['#items'] is not empty %}
  {% set hasArchiveDate = content.field_archive_date['#items'] is not empty %}

  {% set publicRecordsMethod = content.field_req_public_records|render|striptags|trim|lower %}
  {% set publicRecordsLink = content.field_req_public_records_link|render|striptags|trim %}
  {% set publicRecordsEmail = content.field_req_public_records_email|render|striptags|trim %}
  {% set publicRecordsPhone = content.field_req_public_records_phone|render|striptags|trim %}

  {% if (hasPublicRecordsLink and publicRecordsMethod == "link")
    or (hasPublicRecordsEmail and publicRecordsMethod == "email")
    or (hasPublicRecordsPhone and publicRecordsMethod == "phone")
    or hasArchiveUrl %}
      {% set classes = "" %}
      {% if hasPeople is empty and hasContact is empty %}
        {% set classes = "mt-40 lg:mt-60" %}
      {% endif %}
      <div class="responsive-container rounded bg-blue-1 p-20 mb-40 lg:p-40 lg:mb-60 {{ classes }}">
          <div class="lg:flex">

            {% if (hasPublicRecordsLink and publicRecordsMethod == "link")
              or (hasPublicRecordsEmail and publicRecordsMethod == "email")
              or (hasPublicRecordsPhone and publicRecordsMethod == "phone") %}

              {% set class = hasArchiveUrl ? 'lg:w-1/2 pb-28 lg:pb-0 lg:pr-28' : '' %}

              <div class="{{ class }}">
                <p class="font-medium text-big-desc mb-8">{{ 'Request public records'|t }}</p>
                {% if publicRecordsMethod == "phone" %}

                  {# Print the phone info only if method is phone and phone is not empty #}
                  {% if hasPublicRecordsPhone %}
                    <p class="text-body"><a href="tel:{{ publicRecordsPhone }}">{% trans %}Call {{ publicRecordsPhone }}</a> to submit a request.{% endtrans %}</p>
                  {% endif %}

                {% elseif publicRecordsMethod == "email" %}

                  {# Print the email info only if method is email and email is not empty #}
                  {% if hasPublicRecordsEmail %}
                    <p class="text-body"><a href="mailto:{{ publicRecordsEmail }}">{% trans %}Email {{ publicRecordsEmail }}</a> to submit a request.{% endtrans %}</p>
                  {% endif %}

                {% elseif publicRecordsMethod == "link" %}

                  {# Print the link info only if method is link and link is not empty #}
                  {% if hasPublicRecordsLink %}
                    <p class="text-body">{% trans %}<a href="{{ publicRecordsLink }}">Submit requests</a> for the {{ node.getTitle() }}.{% endtrans %}</p>
                  {% endif %}

                {% else %}
                  {# do nothing #}
                {% endif %}
              </div>
            {% endif %}

            {% if hasArchiveUrl %}
              {% set class = hasPublicRecordsLink or hasPublicRecordsPhone or hasPublicRecordsEmail ? 'lg:w-1/2 lg:pl-28' : '' %}
              <div class="{{ class }}">
                <p class="font-medium text-big-desc mb-8">{{ 'Archived website'|t }}</p>
                <p class="text-body">
                  {% set url = content.field_archive_url.0['#url']|render %}
                  {% set text = 'See previous website'|t %}

                  {% if hasArchiveDate %}
                    {% set date = content.field_archive_date|render|striptags|trim %}
                    <a target="_blank" href="{{ url }}">{{ text }}</a> {{ 'archived @date.'|trans({'@date': date}) }}
                  {% else %}
                    <a target="_blank" href="{{ url }}">{{ text }}</a>.
                  {% endif %}

                </p>
              </div>
            {% endif %}

          </div>
    </div>
  {% endif %}
</div>

{{ attach_library('sfgovpl/sfgov-dept-homepage') }}
{{ attach_library('sfgov_utilities/services') }}
