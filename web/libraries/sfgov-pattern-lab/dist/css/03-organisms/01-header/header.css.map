{"version":3,"sources":["../../../node_modules/gutter-grid/grid-classes.scss","../../../node_modules/gutter-grid/grid-shared-mixins.scss","../../../node_modules/mq-scss/_mq.scss","00-protons/01-grid.scss","00-protons/_02-mixins.scss","../../../node_modules/susy/sass/susy/_su-math.scss","../../../node_modules/gutter-grid/grid-mixin.scss"],"names":[],"mappings":"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","file":"header.css","sourcesContent":["\r\n//================================================*\\\r\n//*\tGRID STYLING FILE\t\t\t\t\t\t*/\r\n//----------------------------------------------------\r\n//\tThis file holds the code that generates the\r\n//\tclasses for the grid system.\r\n//\r\n//\tDO NOT EDIT THIS FILE UNLESS YOU REALLY KNOW\r\n//\tWHAT YOU'RE DOING!\r\n//================================================*/\r\n\r\n//Default settings\r\n@import 'grid-settings';\r\n\r\n@import 'grid-shared-mixins';\r\n\r\n$fullPrefix: if($grid-prefix != '', $grid-prefix+'-', '');\r\n\r\n//================================================*\\\r\n//*\t\t\t\tGRID WIDTHS\t\t\t\t\t\t*/\r\n//----------------------------------------------------\r\n//\tQuickly and easily apply standard percentage\r\n//\twidths to grid cells based on fractions.\r\n//\r\n//\tstep 1: give container the width modifier class.\r\n//\t\t\teg: grid--thirds\r\n//\tstep 2: give extra wide grid span classes\r\n//\t\t\teg. grid__cell--span2\r\n//\tWARNING: using a span class will likely require additional\r\n//\t\t\t styling for tablets and smaller devices\r\n//\r\n//\tEXAMPLE HTML:\r\n//\t<ul class=\"grid grid--cols-3\">\r\n//\t\t<li class=\"grid__cell\">Column is 1/3 wide on desktop</li>\r\n//\t\t<li class=\"grid__cell grid__cell--span-2\">column is 2/3 wide on desktop</li>\r\n//\t</ul>\r\n//================================================*/\r\n\r\n@for $i from 1 through length($grid-bp-list) {\r\n\t$columnWidth: column-width($i);\r\n\t$breaks: map-get($grid-bp-list, $i);\r\n\r\n\t//sets the default grid__cell widths\r\n\t.#{$fullPrefix}grid--cols-#{$i} {\r\n\t\t> * {\r\n\t\t\twidth: $columnWidth;\r\n\t\t}\r\n\r\n\t\t//.grid__cell--span-# styling\r\n\t\t@if ($i > 1){\r\n\t\t\t@for $x from 2 through $i {\r\n\t\t\t\t> .#{$fullPrefix}grid__cell--span-#{$x} {\r\n\t\t\t\t\t@if ($grid-calc-support) {\r\n\t\t\t\t\t\twidth: calc(#{$x} / #{$i} * 100%);\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\twidth: $x / $i * 100%;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Applies the media queries for the break points\r\n\t\t&:not(.#{$fullPrefix}grid--noMQs) {\r\n\t\t\t> *:not([class*=\"cell--span-\"]) {\r\n\t\t\t\t@include generate-column-breakpoints($breaks);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//base grid styling\r\n.#{$fullPrefix}grid {\r\n\t$grid: &;\r\n\r\n\t-gutter-grid-: grid;\r\n\tbox-sizing: border-box;\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tmin-width: 100%;\r\n\tborder: 0 solid transparent;\r\n\tdisplay: flex;\r\n\talign-content: stretch;\r\n\r\n\t@if (not $grid-legacy-support){\r\n\t\t//By default grids will not wrap unless there is a column setting\r\n\t\t&[class*=\"grid--cols\"]:not(#{$grid}--noWrap){\r\n\t\t\tflex-wrap: wrap;\r\n\t\t}\r\n\t}\r\n\r\n\t// grid__wrapper styling... really only necessary for use with grid--gutter-#\r\n\t// fixes\r\n\t&__wrapper {\r\n\t\tpadding-bottom: 0.1px;\r\n\t}\r\n\r\n\t$stretch-grid-parameters: ':not([class*=\"grid--cols\"]):not(#{&}--noStretch):not([class*=\"grid--align-\"]):not([class*=\"grid--space-\"]):not(#{&}--noResize)';\r\n\t$stretch-cell-parameters: '#{&}__cell:not(#{&}__cell--noStretch):not(#{&}__cell--noResize)';\r\n\r\n\t&#{$stretch-grid-parameters} > #{$stretch-cell-parameters} {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\r\n\t//base grid__cell styling\r\n\t&__cell {\r\n\t\t-gutter-grid-: cell;\r\n\t\tbox-sizing: border-box;\r\n\t\tmin-width: 0%;\r\n\t\tmax-width: 100%;\r\n\t\tdisplay: block;\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t\tbackground-clip: padding-box!important;\r\n\t\tborder: 0 solid transparent;\r\n\r\n\t\t&[class*=\"cell--span-\"] {\r\n\t\t\tflex-grow: 1;\r\n\t\t}\r\n\r\n\t\t&.#{$fullPrefix}grid { display: flex; }\r\n\r\n\t\t&, * > {\r\n\t\t\t//helps fix IE10 word-wrap bug (elements need to not be display:inline for the fix to work though)\r\n\t\t\tmax-width: 100%;\r\n\t\t\tflex-shrink: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t//base grid__inner styling\r\n\t&__inner {\r\n\t\t-gutter-grid-: inner;\r\n\t\tdisplay: block;\r\n\t\tbox-sizing: border-box;\r\n\t}\r\n\r\n\t@each $class, $gutter in $grid-cell-gutters {\r\n\t\t&--gutter-#{$class} {\r\n\t\t\t@include parse-gutter-data($gutter, 'classes');\r\n\t\t}\r\n\t}\r\n\r\n\t//grid--outerGutters-# styling\r\n\t&--outerGutters {\r\n\t\tmargin: 0;\r\n\t\t&-v {\r\n\t\t\tmargin-top: 0;\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\t\t&-h {\r\n\t\t\tmargin-left: 0;\r\n\t\t\tmargin-right: 0;\r\n\t\t}\r\n\t\t&-top {\r\n\t\t\tmargin-top: 0;\r\n\t\t}\r\n\t\t&-bottom {\r\n\t\t\tmargin-bottom: 0;\r\n\t\t}\r\n\t\t&-left {\r\n\t\t\tmargin-left: 0;\r\n\t\t}\r\n\t\t&-right {\r\n\t\t\tmargin-right: 0;\r\n\t\t}\r\n\r\n\t\t@if ($grid-legacy-support) {\r\n\t\t\t.lt-ie9 & {\r\n\t\t\t\t> *, & {\r\n\t\t\t\t\tborder-color: $grid-gutter-ie-fallback;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//hasInners makes grid__inner elements take up the full height of the grid cell\r\n\t&--hasInners {\r\n\t\t//grid__cell\r\n\t\t> * {\r\n\t\t\tdisplay: flex;\r\n\t\t\talign-items: stretch;\r\n\r\n\t\t\t//grid__inner\r\n\t\t\t> * {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\r\n\t\t\t\t&.#{$fullPrefix}grid {\r\n\t\t\t\t\tdisplay: flex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t&--vAlign {\r\n\t\t&-center {\r\n\t\t\talign-items: center;\r\n\t\t}\r\n\t\t&-top {\r\n\t\t\talign-items: flex-start;\r\n\t\t}\r\n\t\t&-bottom {\r\n\t\t\talign-items: flex-end;\r\n\t\t}\r\n\t}\r\n\r\n\t&--vertical {\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t&--stretch {\r\n\t\t> * {\r\n\t\t\tflex-grow: 1;\r\n\t\t}\r\n\t}\r\n\t&--noStretch {\r\n\t\t> * {\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t}\r\n\t&--noShrink {\r\n\t\t> * { flex-shrink: 0; }\r\n\t}\r\n\t&--noResize {\r\n\t\t> * {\r\n\t\t\tflex-shrink: 0;\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t//allows a grid to be set at something other than 100% of it's parents width\r\n\t&--mini {\r\n\t\tmin-width: 0;\r\n\t}\r\n\r\n\t//allows columns to wrap after screen hits the edge of the design\r\n\t@include mq(max, $grid-page-width){\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n\r\n\t//Unfortunately this is a necessity for IE compatibility\r\n\t//allows wrapping at all screen widths\r\n\t&--wrap {\r\n\t\tflex-wrap: wrap;\r\n\t\t// @include ieFloat;\r\n\t}\r\n\t//disables wrapping at all screen widths\r\n\t&--noWrap {\r\n\t\tflex-wrap: if($grid-legacy-support, nowrap !important, nowrap);\r\n\t}\r\n\r\n\t//quick access to space-between and space-around\r\n\t&--space {\r\n\t\t&-between, &-around {\r\n\t\t\t> * { flex-grow: 0; }\r\n\t\t}\r\n\t\t&-between {\r\n\t\t\tjustify-content: space-between;\r\n\t\t}\r\n\t\t&-around {\r\n\t\t\tjustify-content: space-around;\r\n\t\t}\r\n\t\t&-evenly {\r\n\t\t\t//backup for browsers that don't support \"space-evenly\"\r\n\t\t\tjustify-content: space-around;\r\n\t\t\tjustify-content: space-evenly;\r\n\t\t}\r\n\t}\r\n\r\n\t//quick access to left,center and right alignments\r\n\t&--align {\r\n\t\t&-left, &-center, &-right {\r\n\t\t\t> * { flex-grow: 0; }\r\n\t\t}\r\n\t\t&-left {\r\n\t\t\tjustify-content: flex-start;\r\n\t\t}\r\n\t\t&-center {\r\n\t\t\tjustify-content: center;\r\n\t\t}\r\n\t\t&-right {\r\n\t\t\tjustify-content: flex-end;\r\n\t\t}\r\n\t\t&-stretch {\r\n\t\t\t> * { flex-grow: 1; }\r\n\t\t}\r\n\t}\r\n\r\n\t&__cell {\r\n\t\t//cell vertical alignment\r\n\t\t&--vAlign {\r\n\t\t\t&-center {\r\n\t\t\t\talign-self: center;\r\n\t\t\t}\r\n\t\t\t&-top {\r\n\t\t\t\talign-self: flex-start;\r\n\t\t\t}\r\n\t\t\t&-bottom {\r\n\t\t\t\talign-self: flex-end;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Stretch and shrink\r\n\t\t&--stretch {\r\n\t\t\tflex-grow: 1;\r\n\t\t}\r\n\t\t&--noStretch {\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t\t&--noShrink {\r\n\t\t\tflex-shrink: 0;\r\n\t\t}\r\n\t\t&--noResize {\r\n\t\t\tflex-shrink: 0;\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\t}\r\n\r\n\t//tabular/float:left backup for IE9 and below\r\n\t@if ($grid-legacy-support) {\r\n\r\n\t\t&[class*=\"grid--align\"], &[class*=\"grid--space\"], #{$grid}--noStretch, #{$grid}--noResize, &[class*=\"grid--vAlign\"][class*=\"grid--cols\"] {\r\n\t\t\tflex-wrap: wrap;\r\n\t\t}\r\n\r\n\t\t.no-flexbox &, .no-flexwrap & {\r\n\t\t\tdisplay: table;\r\n\t\t\twidth: auto;\r\n\t\t\t> * { display: table-cell; vertical-align: top; }\r\n\r\n\t\t\t&--wrap:not([class*=\"grid--vAlign\"]):not([class*=\"grid--space-\"]) {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\t> * {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tfloat: left;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: '';\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tclear: both;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&[class*='grid--vAlign'][class*='grid--cols'] {\r\n\t\t\t\tdisplay: block;\r\n\r\n\t\t\t\t> * {\r\n\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--vAlign {\r\n\t\t\t\t&-top {\r\n\t\t\t\t\t> * { vertical-align: top; }\r\n\t\t\t\t}\r\n\t\t\t\t&-center {\r\n\t\t\t\t\t> * { vertical-align: middle; }\r\n\t\t\t\t}\r\n\t\t\t\t&-bottom {\r\n\t\t\t\t\t> * { vertical-align: bottom; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t&__cell {\r\n\t\t\t\t&--vAlign {\r\n\t\t\t\t\t&-top { vertical-align: top; }\r\n\t\t\t\t\t&-center { vertical-align: middle; }\r\n\t\t\t\t\t&-bottom { vertical-align: bottom; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--align {\r\n\t\t\t\t&-stretch, &-left, &-center, &-right {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\t> * {\r\n\t\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\t\tfloat: none;\r\n\t\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t&-left {\r\n\t\t\t\t\ttext-align: left;\r\n\t\t\t\t}\r\n\t\t\t\t&-center {\r\n\t\t\t\t\ttext-align: center;\r\n\t\t\t\t}\r\n\t\t\t\t&-right {\r\n\t\t\t\t\ttext-align: right;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--space {\r\n\t\t\t\t&-between, &-around, &-evenly {\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\ttext-align: center;\r\n\t\t\t\t\t> * {\r\n\t\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\t\tfloat: none;\r\n\t\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t&--vertical {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tcontent: '';\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\tclear: both;\r\n\t\t\t\t}\r\n\t\t\t\t& > * {\r\n\t\t\t\t\tfloat: left;\r\n\t\t\t\t\tdisplay: block;\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//allows IE to use floats instead of display table without affecting modern browsers\r\n\t\t&--ieFloat, &--noStretch, &--noResize {\r\n\t\t\t@include ieFloat;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n","@function fill-blank-columns($bp-list){\r\n\t$i: 0;\r\n\t@while ($i < length($bp-list)) {\r\n\t\t@if (not map-has-key($bp-list, $i) and $i > 0) {\r\n\t\t\t$bp-list: map-merge($bp-list, ($i: false));\r\n\t\t}\r\n\t\t$i: $i + 1;\r\n\t}\r\n\t@return $bp-list;\r\n}\r\n$grid-bp-list: fill-blank-columns($grid-bp-list);\r\n\r\n@function is-percentage($value) {\r\n  @return is-number($value) and unit($value) == '%';\r\n}\r\n\r\n@function column-width($col-count){\r\n\t@return if($grid-calc-support, calc(99.9999% / #{$col-count}), percentage(1/$col-count));\r\n}\r\n\r\n//switches IE (and other non-flexbox friendly browsers) to using float mode\r\n@mixin ieFloat {\r\n\t@if ($grid-legacy-support) {\r\n\t\t.no-flexbox &, .no-flexwrap & {\r\n\t\t\tdisplay: block;\r\n\t\t\t&:after {\r\n\t\t\t\tcontent: '';\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\tclear: both;\r\n\t\t\t}\r\n\t\t\t> * {\r\n\t\t\t\tfloat: left;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin generate-column-breakpoints ($breaks){\r\n\t@if ($breaks != false) {\r\n\t\t@each $V-columnWidth, $BP-deviceWidth in $breaks {\r\n\t\t\t$col-width: $V-columnWidth;\r\n\t\t\t@if (not is-percentage($V-columnWidth)){\r\n\t\t\t\t$col-width: column-width($V-columnWidth);\r\n\t\t\t}\r\n\t\t\t//media query defaults to max-width if only a pixel value is given\r\n\t\t\t$mq: if(length($BP-deviceWidth) > 1, $BP-deviceWidth, (max, $BP-deviceWidth));\r\n\t\t\t@include mq($mq){\r\n\t\t\t\twidth: $col-width;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//Generates the grid cell gutters\r\n@mixin generate-gutters ($format, $gutter, $outerGutters: false){\r\n\r\n\t$gutterCount: length($gutter);\r\n\r\n\t$g1: 1;\r\n\t$g2: if($gutterCount > 1, 2, 1);\r\n\r\n\t$gutterSet: map-get((\r\n\t\t1: (\r\n\t\t\ttop: $gutter,\r\n\t\t\tright: $gutter,\r\n\t\t\tbottom: $gutter,\r\n\t\t\tleft: $gutter,\r\n\t\t),\r\n\t\t2: (\r\n\t\t\ttop: nth($gutter, $g1),\r\n\t\t\tright: nth($gutter, $g2),\r\n\t\t\tbottom: nth($gutter, $g1),\r\n\t\t\tleft: nth($gutter, $g2),\r\n\t\t),\r\n\t), $gutterCount);\r\n\r\n\t$gutter-top: map-get($gutterSet, top);\r\n\t$gutter-right: map-get($gutterSet, right);\r\n\t$gutter-bottom: map-get($gutterSet, bottom);\r\n\t$gutter-left: map-get($gutterSet, left);\r\n\r\n\t$margin: map-get((\r\n\t\t1: -$gutter-top,\r\n\t\t2: (-$gutter-top) (-$gutter-right),\r\n\t), $gutterCount);\r\n\r\n\t@if ($format == 'mixin' and ($outerGutters == 'v' or $outerGutters == 'top' or $outerGutters == true)) {\r\n\t\tmargin: $margin;\r\n\t\tborder-width: $gutter-top $gutter-right 0 0;\r\n\t} @else {\r\n\t\tmargin: 0 (-$gutter-right) (-$gutter-bottom) (-$gutter-left);\r\n\t\tborder-width: 0 $gutter-right 0 0;\r\n\t}\r\n\r\n\t> * {\r\n\t\tborder-width: 0 0 $gutter-bottom $gutter-left;\r\n\t}\r\n\r\n\t@if ($grid-legacy-support) {\r\n\t\t.lt-ie9 & {\r\n\t\t\t&, > * {\r\n\t\t\t\tborder-color: $grid-gutter-ie-fallback;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t$mq-width: $grid-page-width + $gutter-left + $gutter-right;\r\n\r\n\t@if ($format == 'classes'){\r\n\t\t//only apply the outer horizontal gutters if the screen size is smaller than the page width + gutter size\r\n\t\t&.#{$fullPrefix}grid--outerGutters {\r\n\r\n\t\t\t&, &-v, &-top {\r\n\t\t\t\tborder-top-width: $gutter-top;\r\n\t\t\t}\r\n\r\n\t\t\t@include mq(max, ($mq-width)){\r\n\t\t\t\t&-h-delayed {\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t}\r\n\t\t\t\t&-left-delayed {\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t}\r\n\t\t\t\t&-right-delayed {\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t\t.lt-ie9 & {\r\n\t\t\t\t\t\t&-h-delayed, &-left-delayed, &-right-delayed {\r\n\t\t\t\t\t\t\tmargin-left: -$gutter-left;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t.lt-ie9 & {\r\n\t\t\t\t\t&, &-h {\r\n\t\t\t\t\t\tborder-right-width: $gutter-right !important;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} @else if ($format == 'mixin') {\r\n\t\t//only apply the outer horizontal gutters if the screen size is smaller than the page width + gutter size\r\n\t\t@if($outerGutters){\r\n\t\t\t@include mq(max, $mq-width){\r\n\t\t\t\t@if($outerGutters == 'h-delayed'){\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t} @else if ($outerGutters == 'left-delayed'){\r\n\t\t\t\t\tmargin-left: 0;\r\n\t\t\t\t} @else if ($outerGutters == 'right-delayed'){\r\n\t\t\t\t\tmargin-right: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t.lt-ie9 & {\r\n\t\t\t\t\t@if (\r\n\t\t\t\t\t\t$outerGutters == 'h-delayed' or\r\n\t\t\t\t\t\t$outerGutters == 'left-delayed' or\r\n\t\t\t\t\t\t$outerGutters == 'right-delayed'\r\n\t\t\t\t\t){\r\n\t\t\t\t\t\tmargin-left: -$gutter-left;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t@if ($outerGutters == true or $outerGutters == 'h'){\r\n\t\t\t\t\t\tborder-right-width: $gutter-right !important;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@mixin parse-gutter-data($gutter, $systemType, $outerGutters: false){\r\n\t@if (nth($gutter,1) == 'mq') {\r\n\r\n\t\t$gutter_data: nth($gutter,2);\r\n\r\n\t\t@for $i from 1 through length($gutter_data){\r\n\t\t\t$gutter_value: nth($gutter_data, $i);\r\n\t\t\t$gutter_is_mq: false;\r\n\r\n\t\t\t@if (length($gutter_value) > 1){\r\n\t\t\t\t$gutter_is_mq: type-of(nth(nth($gutter_value,2),1)) == 'string';\r\n\t\t\t}\r\n\r\n\t\t\t@if ($gutter_is_mq){\r\n\t\t\t\t$gutterSize: nth($gutter_value,1);\r\n\t\t\t\t$mediaQuery: nth($gutter_value,2);\r\n\t\t\t\t@include mq($mediaQuery){\r\n\t\t\t\t\t@include generate-gutters($systemType, $gutterSize, $outerGutters);\r\n\t\t\t\t}\r\n\t\t\t} @else {\r\n\t\t\t\t@include generate-gutters($systemType, $gutter_value, $outerGutters);\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t@include generate-gutters($systemType, $gutter, $outerGutters);\r\n\t}\r\n}\r\n","$mediaQuery: ();\r\n\r\n$mq-ems: false !default;\r\n$mq-em-base: 16px !default;\r\n$mq-debug: false !default;\r\n\r\n@import '_functions';\r\n\r\n@function mediaType($mediaType: false, $hasAnd: true){\r\n\t$media: '';\r\n\t$mediaType: if($mediaType == 'not', 'not all', $mediaType);\r\n\t@if ($mediaType){\r\n\t\t$media: if($hasAnd, $mediaType + ' and ', $mediaType);\r\n\t}\r\n\t@return $media;\r\n}\r\n\r\n@function isRatio($string){\r\n\t@if (type-of($string) == 'string' and $string != 'plus'){\r\n\t\t@if (str-index($string, \"/\")){\r\n\t\t\t@return true;\r\n\t\t}\r\n\t}\r\n\t@return false;\r\n}\r\n\r\n@function isMedia($string){\r\n\t@return type-of($string) == 'string' and $string != 'plus' and not isRatio($string);\r\n}\r\n\r\n@function calculateMQ($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug){\r\n\r\n\t$swap-values: false;\r\n\r\n\t$mediaTypeString: '' + $mediaType + '';\r\n\r\n\t$invalidMediaType:\r\n\t\t($mediaType != false) and (\r\n\t\t\t(type-of($mediaType) == 'number') or\r\n\t\t\t(str-index($mediaTypeString, '/') != null)\r\n\t\t);\r\n\r\n\t@if ($invalidMediaType == true){\r\n\t\t@error '\"'+$mediaType+'\" is not a valid media type';\r\n\t}\r\n\r\n\t@if ($range == null) {\r\n\t\t@return $mediaType;\r\n\t}\r\n\r\n\t@if ($breakpoint_2 != null){\r\n\r\n\t\t@if (isRatio($breakpoint_1)){\r\n\r\n\t\t\t$A1: get-start($breakpoint_1);\r\n\t\t\t$A2: get-end($breakpoint_1);\r\n\r\n\t\t\t$B1: get-start($breakpoint_2);\r\n\t\t\t$B2: get-end($breakpoint_2);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug range_numbers \"('A1/A2', 'B1/B2')\" (A1: $A1, A2: $A2, B1: $B1, B2: $B2);\r\n\t\t\t}\r\n\r\n\t\t\t$swap-values: $A1 / $A2 < $B1 / $B2;\r\n\t\t} @else {\r\n\t\t\t$swap-values: $breakpoint_1 < $breakpoint_2;\r\n\t\t}\r\n\r\n\t\t//Swaps the breakpoint_s around\r\n\t\t@if ($swap-values){\r\n\t\t\t$temp: $breakpoint_1;\r\n\t\t\t$breakpoint_1: $breakpoint_2;\r\n\t\t\t$breakpoint_2: $temp;\r\n\t\t}\r\n\r\n\t} @else {\r\n\t\t$breakpoint_2: 0;\r\n\t}\r\n\r\n\t$mediaString: '';\r\n\r\n\t@if ($range == 'orientation'){\r\n\t\t@if ($breakpoint_1 != 'landscape' and $breakpoint_1 != 'portrait'){\r\n\t\t\t@error '\"orientation\" range only accepts the values \"landscape\" and \"portrait\". Currently providing the value \"#{$breakpoint_1}\".';\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t@debug calculateMQ (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType);\r\n\t}\r\n\r\n\t@if (str-index($range, 'inside') != null or str-index($range, 'outside') != null){\r\n\t\t@if ($breakpoint_2 == 0) {\r\n\t\t\t@error '\"#{$range}\" range requires a second value. Currently only providing \"#{$breakpoint_1}\" as a value.';\r\n\t\t}\r\n\t} @else {\r\n\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t@error '\"#{$range}\" range can only take one value. Currently providing both \"#{$breakpoint_1}\" and \"#{$breakpoint_2}\" as values.';\r\n\t\t}\r\n\t}\r\n\r\n\t@if (str-index($range, 'ratio') == null){\r\n\t\t//if a standard media query\r\n\t\t@if (type-of($breakpoint_1) != number and $range != 'orientation'){\r\n\t\t\t@if ($breakpoint_2 != 0) {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to be pixel values';\r\n\t\t\t} @else {\r\n\t\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a pixel value';\r\n\t\t\t}\r\n\t\t}\r\n\t} @else {\r\n\t\t//else if it's a ratio...\r\n\t\t@if ((($breakpoint_2 != 0) and (type-of($breakpoint_2) != string))){\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_s (\"#{$breakpoint_1}\" and \"#{$breakpoint_2}\") to both be strings in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t} @else if (type-of($breakpoint_1) != string) {\r\n\t\t\t@error '\"#{$range}\" range requires the breakpoint_ \"#{$breakpoint_1}\" to be a string in this format \"4 / 3\" (width ratio / height ratio).';\r\n\t\t}\r\n\t}\r\n\r\n\t$breakpoint_1_plus: $breakpoint_1 + 1;\r\n\t$breakpoint_2_plus: $breakpoint_2 + 1;\r\n\r\n\t$media: if($mediaType, $mediaType, '');\r\n\r\n\t@if ($mq-ems) {\r\n\t\t$breakpoint_1: _mq-em($breakpoint_1);\r\n\t\t$breakpoint_2: _mq-em($breakpoint_2);\r\n\t\t$breakpoint_1_plus: _mq-em($breakpoint_1_plus);\r\n\t\t$breakpoint_2_plus: _mq-em($breakpoint_2_plus);\r\n\t}\r\n\r\n\t$min-width: '(min-width: #{$breakpoint_1_plus})';\r\n\t$max-width: '(max-width: #{$breakpoint_1})';\r\n\r\n\t$inside-width: '(max-width: #{$breakpoint_1}) and (min-width: #{$breakpoint_2_plus})';\r\n\t$outside-width: '(max-width: #{$breakpoint_2}), '+$media+'(min-width: #{$breakpoint_1_plus})';\r\n\r\n\t$mediaString: map-get((\r\n\t//*1 value given*/\r\n\t\tmin : $min-width,\r\n\t\tmax : $max-width,\r\n\t\r\n\t\tmin-width : $min-width,\r\n\t\tmax-width : $max-width,\r\n\r\n\t\tmin-height : '(min-height: #{$breakpoint_1_plus})',\r\n\t\tmax-height : '(max-height: #{$breakpoint_1})',\r\n\r\n\t\tratio : '(aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-ratio : '(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-ratio : '(max-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\tdevice-ratio : '(device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmin-device-ratio : '(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t\tmax-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1})',\r\n\r\n\t\torientation : '(orientation: #{$breakpoint_1})',\r\n\r\n\t//*2 values given*/\r\n\t\tinside : $inside-width,\r\n\t\toutside : $outside-width,\r\n\r\n\t\tinside-width : $inside-width,\r\n\t\toutside-width : $outside-width,\r\n\r\n\t\tinside-height : '(max-height: #{$breakpoint_1}) and (min-height: #{$breakpoint_2_plus})',\r\n\t\toutside-height : '(max-height: #{$breakpoint_2}), '+$media+'(min-height: #{$breakpoint_1_plus})',\r\n\t\t\r\n\t\tinside-ratio : '(max-aspect-ratio: #{$breakpoint_1}) and (min-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-ratio : '(max-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-aspect-ratio: #{$breakpoint_1})',\r\n\t\t\r\n\t\tinside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_1}) and (min-device-aspect-ratio: #{$breakpoint_2})',\r\n\t\toutside-device-ratio : '(max-device-aspect-ratio: #{$breakpoint_2}), '+$media+'(min-device-aspect-ratio: #{$breakpoint_1})',\r\n\t), $range);\r\n\r\n\t@return $mediaString;\r\n}\r\n\r\n@function isBasicQuery($range) {\r\n\t$first_is_string: type-of(nth($range,1)) == string;\r\n\t$longer_than_1: length($range) > 1;\r\n\t$not_plus_statment: true;\r\n\t@if ($longer_than_1) {\r\n\t\t$not_plus_statment: nth($range,2) != 'plus';\r\n\t}\r\n\t@return $first_is_string and $longer_than_1 and $not_plus_statment;\r\n}\r\n\r\n@function get_values($mqSet, $debug: $mq-debug){\r\n\r\n\t@if ($mq-debug) {\r\n\t\t@debug mqSet (length: length($mqSet), mqSet: $mqSet);\r\n\t}\r\n\r\n\t$range: nth($mqSet,1);\r\n\t$breakpoint_1: null;\r\n\t$breakpoint_2: null;\r\n\t$media: false;\r\n\r\n\t@if (length($mqSet) == 1){\r\n\t\t$first: nth($mqSet, 1);\r\n\t\t@if (type-of($first) != 'string'){\r\n\t\t\t@error '\"#{$first}\" is not a valid media type';\r\n\t\t}\r\n\t\t$range: null;\r\n\t\t$media: $first;\r\n\t}\r\n\r\n\t@if (length($mqSet) > 1){\r\n\t\t$breakpoint_1: nth($mqSet, 2);\r\n\t}\r\n\r\n\t@if (length($mqSet) == 3){\r\n\t\t$third: nth($mqSet, 3);\r\n\r\n\t\t@if (type-of($third) == 'number' or isRatio($third)){\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t} @else {\r\n\t\t\t$media: $third;\r\n\t\t}\r\n\t}\r\n\r\n\t@if (length($mqSet) == 4){\r\n\t\t$third: nth($mqSet, 3);\r\n\t\t$fourth: nth($mqSet, 4);\r\n\r\n\t\t@if ($fourth == false and isMedia($third)){\r\n\t\t\t$media: $third;\r\n\t\t} @else {\r\n\t\t\t$breakpoint_2: $third;\r\n\t\t\t$media: $fourth;\r\n\t\t}\r\n\r\n\t\t@if ($media == \" and \") {\r\n\t\t\t$media: '';\r\n\t\t}\r\n\t}\r\n\r\n\t$finalValues: (\r\n\t\trange: $range,\r\n\t\tbreakpoint_1: $breakpoint_1,\r\n\t\tbreakpoint_2: $breakpoint_2,\r\n\t\tmedia: mediaType($media, $range != null),\r\n\t);\r\n\r\n\t@if ($debug) {\r\n\t\t@debug get_values_result $finalValues;\r\n\t}\r\n\r\n\t@return $finalValues;\r\n}\r\n\r\n@function get_media($mqSet){\r\n\t@return map-get( get_values($mqSet), media);\r\n}\r\n\r\n@function calculateBasicQuery($mqSet, $isAndStatement: false, $debug: $mq-debug){\r\n\t$values: get_values($mqSet, $debug);\r\n\r\n\t$range: map-get($values, range);\r\n\t$breakpoint_1: map-get($values, breakpoint_1);\r\n\t$breakpoint_2: map-get($values, breakpoint_2);\r\n\t$media: map-get($values, media);\r\n\r\n\t@if ($range == null) {\r\n\t\t//if only a media type is given return nothing because it is added elsewhere\r\n\t\t@return '';\r\n\t}\r\n\r\n\t@if ((str-index($range, 'outside') != null) and $isAndStatement){\r\n\t\t$error: 'All \"outside\" range types are incompatible with \"plus\" statements: (' + $mqSet + ')';\r\n\t\t@error $error;\r\n\t}\r\n\r\n\t@return calculateMQ($range, $breakpoint_1, $breakpoint_2, $media, $debug: $debug);\r\n}\r\n\r\n@function joinQueries($range, $queryString: (), $debug: $mq-debug){\r\n\r\n\t$isAndStatement: false;\r\n\t$contains_media_only_statement: false;\r\n\t$media_statement_at_start: true;\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t@for $i from 1 through length($range) {\r\n\t\t\t$statement: nth($range,$i);\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug joinQueries_statement $statement;\r\n\t\t\t}\r\n\t\t\t$mediaNotFirst: $i != 1 and isMedia($statement);\r\n\t\t\t@if ($statement == 'plus') {\r\n\t\t\t\t$isAndStatement: true;\r\n\t\t\t\t@if ($i == 2 and length(nth($range,1)) == 1) {\r\n\t\t\t\t\t$contains_media_only_statement: true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t@if ($mediaNotFirst){\r\n\t\t\t\t$media_statement_at_start: false;\r\n\t\t\t}\r\n\t\t}\r\n\t} @else if (type-of(nth($range,1)) == 'string') {\r\n\t\t$contains_media_only_statement: true;\r\n\t}\r\n\r\n\t@if ($isAndStatement and not $media_statement_at_start) {\r\n\t\t@error 'Media type definitions must be specified at the start of plus statements: (#{$range)})';\r\n\t}\r\n\r\n\t//Uses this functionality if using a single level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--single: inside, 1000px, 500px;\r\n\t//@include mq($MQ-example--single){}\r\n\t@if (isBasicQuery($range)){\r\n\r\n\t\t@return get_media($range) + calculateBasicQuery($range, $isAndStatement, $debug: $debug);\r\n\r\n\t//Uses this functionality if using a multi level MQ variable\r\n\t//eg:\r\n\t//$MQ-example--multiple:\r\n\t//\t(inside, 1000px, 500px),\r\n\t//\t(min, 1200px)\r\n\t//;\r\n\t//@include mq($MQ-example--multiple){}\r\n\t} @else {\r\n\r\n\t\t@each $mqSet in $range {\r\n\r\n\t\t\t@if ($mqSet != 'plus') {\r\n\t\t\t\t@if (isBasicQuery($mqSet)){\r\n\r\n\t\t\t\t\t$newQuery: calculateBasicQuery($mqSet, $isAndStatement, $debug: $debug);\r\n\r\n\t\t\t\t\t$media: get_media($mqSet);\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($queryString == ()){\r\n\t\t\t\t\t\t\t$queryString: $media + $newQuery;\r\n\t\t\t\t\t\t} @else if ($newQuery != '') {\r\n\t\t\t\t\t\t\t$queryString: $queryString + ' and ' + $newQuery;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t$queryString: append($queryString, $media + $newQuery, 'comma');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} @else {\r\n\r\n\t\t\t\t\t$is_media_only_statment: $contains_media_only_statement and type-of($mqSet) == 'string';\r\n\r\n\t\t\t\t\t@if ($isAndStatement) {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: mediaType($mqSet, false);\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: joinQueries($mqSet, $queryString, $debug);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t@if (length($queryString) > 1){\r\n\t\t\t\t\t\t\t$error: 'mq-scss does not support \"or\" statements inside \"plus\" statements: ' + $queryString;\r\n\t\t\t\t\t\t\t@error $error;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t@if ($is_media_only_statment) {\r\n\t\t\t\t\t\t\t$queryString: $mqSet;\r\n\t\t\t\t\t\t} @else {\r\n\t\t\t\t\t\t\t$queryString: append($queryString, joinQueries($mqSet, $debug: $debug), 'comma');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@return $queryString;\r\n\t}\r\n}\r\n\r\n@mixin mq($range, $breakpoint_1: null, $breakpoint_2: null, $mediaType: false, $debug: $mq-debug) {\r\n\r\n\t@if ($debug) {\r\n\t\t@debug $range;\r\n\t}\r\n\r\n\t@if (length($range) > 1) {\r\n\t\t$finalOutput: joinQueries($range, $debug: $debug);\r\n\t\t@if ($debug) {\r\n\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalOutput;\r\n\t\t}\r\n\t\t@media #{$finalOutput} {\r\n\t\t\t@content;\r\n\t\t}\r\n\r\n\t//Uses this functionality if placing MQ data inline\r\n\t//eg:\r\n\t//@include mq(inside, 1000px, 500px, 'screen');\r\n\t} @else {\r\n\t\t//standardises the values to prevent mediaType from getting confused with breakpoint_2\r\n\t\t$mediaOnly: $breakpoint_1 == null and $breakpoint_2 == null and $mediaType == false;\r\n\t\t@if ($debug) {\r\n\t\t\t@debug inline_mq_values (range: $range, breakpoint_1: $breakpoint_1, breakpoint_2: $breakpoint_2, mediaType: $mediaType, mediaOnly: $mediaOnly);\r\n\t\t}\r\n\t\t$values: get_values(if($mediaOnly, $range, ($range $breakpoint_1 $breakpoint_2 $mediaType)), $debug: $debug);\r\n\r\n\t\t$newRange: map-get($values, range);\r\n\t\t$newWidth1: map-get($values, breakpoint_1);\r\n\t\t$newWidth2: map-get($values, breakpoint_2);\r\n\t\t$newMedia: map-get($values, media);\r\n\r\n\t\t@if ($mediaOnly) {\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $newMedia;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $newMedia } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t} @else {\r\n\r\n\t\t\t$finalMQ: $newMedia + calculateMQ($newRange, $newWidth1, $newWidth2, $debug: $debug);\r\n\r\n\t\t\t@if ($debug) {\r\n\t\t\t\t@debug '!!!!! FINAL OUTPUT: @media ' + $finalMQ ;\r\n\t\t\t}\r\n\r\n\t\t\t@media #{ $finalMQ } {\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($debug){\r\n\t\t//spacer for seperating results\r\n\t\t@debug '';\r\n\t}\r\n\r\n}\r\n\r\n@mixin retina($density: 2) {\r\n\t\t@media\r\n\t\tonly screen and (min-device-pixel-ratio: $density),\r\n\t\tonly screen and (min-resolution: $density * 96ppi),\r\n\t\tonly screen and (min-resolution: $density * 1dppx) {\r\n\t\t\t@content;\r\n\t}\r\n}\r\n","@import \"../../../../node_modules/susy/sass/susy-prefix\";\n@import \"../../../../node_modules/susy/sass/plugins/svg-grid\";\n@import '../../../../node_modules/mq-scss/mq';\n@import '../../../../node_modules/gutter-grid/grid-mixin';\n@import '../../../../node_modules/gutter-grid/grid-classes';\n@import \"02-mixins\";\n@import \"00-breakpoints\";\n\n@mixin media($bp) {\n  @media screen and (min-width: #{$bp}) {\n    @content;\n  }\n}\n\n@mixin media-max($bp) {\n  @media screen and (max-width: #{$bp}) {\n    @content;\n  }\n}\n\n// Basic grid settings.\n$susy: (\n  'columns': susy-repeat(12),\n  'gutters': 14px,\n  'spread': 'narrow',\n  'container-spread': 'narrow'\n);\n\n@mixin sfgov-container-full {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n    padding: 0;\n  }\n}\n\n@mixin sfgov-container-full--no-padding() {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n  }\n}\n\n@mixin sfgov-grid-two-columns--padding() {\n  @include clearfix;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n\n.sfgov-container--full {\n  @include clearfix;\n  padding: 0 0 40px 0;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n  }\n}\n\n.sfgov-container {\n  padding-left: susy-gutter() / 2;\n  padding-right: susy-gutter() / 2;\n  @include media($narrow-screen) {\n    width: 949px;\n    margin: 0 auto;\n    padding: 0;\n  }\n}\n\n.sfgov-width-one-whole {\n  width: susy-span(12 of 12);\n}\n\n.sfgov-width-one-half {\n  width: susy-span(6 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.sfgov-width-one-third {\n  width: susy-span(4 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.sfgov-width-one-fourth {\n  width: susy-span(3 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.sfgov-width-one-sixth {\n  width: susy-span(2 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: susy-span(4 wide of 12 wide);\n    float: left;\n  }\n  @include media($mobile-screen) {\n    width: 100%;\n    float: inherit;\n  }\n}\n.sfgov-width-one-twelfth {\n  width: susy-span(1 wide of 12 wide);\n  float: left;\n  @include media($medium-screen) {\n    width: susy-span(4 wide of 12 wide);\n    float: left;\n  }\n  @include media($mobile-screen) {\n\n    width: 100%;\n    float: inherit;\n  }\n}\n\n.grid-example {\n  color: #fff;\n  .sfgov-grid {\n    background: svg-grid() no-repeat scroll;\n    .sfgov-width-one-whole,\n    .sfgov-width-one-half,\n    .sfgov-width-one-third,\n    .sfgov-width-one-fourth,\n    .sfgov-width-one-sixth,\n    .sfgov-width-one-twelfth {\n      background: #60585c;\n      padding: 10px;\n      text-align: center;\n      border: 1px dotted #e1f3f8;\n    }\n  }\n}\n\n// Grid Two Columns.\n\n.sfgov-grid-two-columns {\n  @include sfgov-grid-two-columns--padding;\n  @include grid($cols:2, $gutter:20px, $outerGutters:false, $resize:false);\n  min-width: initial;\n  > .views-row {\n    border-left-width: 0;\n    border-right-width: 20px;\n  }\n  @include media($narrow-screen) {\n    grid-template-columns: repeat(2, 1fr);\n    // padding: 30px 10px;\n  }\n  .transaction-card {\n    height: 100%;\n  }\n  // ****************************\n  // old grid code (not ie11 friendly)\n  // ****************************\n  // @include sfgov-grid-two-columns--padding;\n  // display: grid;\n  // grid-template-columns: repeat(1, 1fr);\n  // @include media($narrow-screen) {\n  //   grid-template-columns: repeat(2, 1fr);\n  //   // padding: 30px 10px;\n  // }\n  // grid-template-rows: auto;\n  // grid-gap: 20px 20px;\n  // justify-items: stretch;\n  // .transaction-card {\n  //   height: 100%;\n  // }\n}\n\n// Right sidebar.\n\n.sfgov-container--right-sidebar {\n  padding: 50px 0;\n  @include media-max($medium-screen) {\n    display: flex;\n    flex-direction: column;\n  }\n  @include media-max($narrow-screen) {\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n  @include media-max($medium-screen) {\n    padding: 0;\n  }\n  .sfgov-container--content-left {\n    padding: 39px 25px 70px 25px;\n    @include media-max($medium-screen) {\n    }\n    @include media($medium-screen + 1) {\n      @include clearfix;\n      width: susy-span(7.8 narrow of 12 narrow);\n      float: left;\n      padding: 0;\n    }\n    @include media($narrow-screen) {\n      padding: 0;\n    }\n    @include media-max($medium-screen) {\n      padding: 0;\n    }\n  }\n  .sfgov-container--content-right {\n    margin-bottom: 25px;\n    @include media-max($medium-screen) {\n      margin-bottom: 0;\n    }\n    @include media($medium-screen + 1) {\n      width: susy-span(4 narrow of 12 narrow);\n      float: right;\n      @include clearfix;\n      padding: 0;\n    }\n  }\n  .sidebar-block {\n    margin-bottom: 2.6rem;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n\n// Preview.\n.preview {\n  @include clearfix;\n}\n\n\n","@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n\n\n// visually-hidden\n//\n// Hide elements visually, but keep them available for screen readers. Don't use\n// this for elements that need to be focusable (e.g. a, button, input, select,\n// textarea). For those, please use `visually-hidden-focusable` instead.\n//\n// Usage: `@include visually-hidden;`\n\n@mixin visually-hidden {\n  & {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px;\n    word-wrap: normal;\n  }\n}\n\n// visually-hidden-focusable\n//\n// Hide elements visually, but keep them available, and focusable for screen\n// reader and keyboard users.\n//\n// Usage: `@include visually-hidden-focusable;`\n\n@mixin visually-hidden-focusable {\n  &:active,\n  &:focus {\n    clip: auto;\n    height: auto;\n    overflow: visible;\n    position: static !important;\n    width: auto;\n  }\n}\n","/// Grid Math Engine\n/// ================\n/// The `su` functions give you direct access to the math layer,\n/// without any syntax-sugar like shorthand parsing, and normalization.\n/// If you prefer named arguments, and stripped-down syntax,\n/// you can use these functions directly in your code –\n/// replacing `span`, `gutter`, and `slice`.\n///\n/// These functions are also useful\n/// for building mixins or other extensions to Susy.\n/// Apply the Susy syntax to new mixins and functions,\n/// using our \"Plugin Helpers\",\n/// or write your own syntax and pass the normalized results along\n/// to `su` for compilation.\n///\n/// @group su-math\n///\n/// @see su-span\n/// @see su-gutter\n/// @see su-slice\n/// @ignore _su-sum\n/// @ignore _su-calc-span\n/// @ignore _su-calc-sum\n/// @ignore _su-needs-calc-output\n\n\n\n// Su Span\n// -------\n/// Calculates and returns a CSS-ready span width,\n/// based on normalized span and context data –\n/// a low-level version of `susy-span`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-span\n///\n/// @param {number | list} $span -\n///   Number or list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {integer} $location [1] -\n///   Optional position of sub-span among full set of columns\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function su-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $location: 1\n) {\n  $span: su-valid-span($span);\n  $columns: su-valid-columns($columns);\n  $gutters: su-valid-gutters($gutters);\n  $spread: su-valid-spread($spread);\n\n  @if (type-of($span) == 'number') {\n    @if (not unitless($span)) {\n      @return $span;\n    }\n\n    $location: su-valid-location($span, $location, $columns);\n    $span: su-slice($span, $columns, $location, $validate: false);\n  }\n\n  @if _su-needs-calc-output($span, $columns, $gutters, $spread, not 'validate') {\n    @return _su-calc-span($span, $columns, $gutters, $spread, $container-spread, not 'validate');\n  }\n\n  $span-width: _su-sum($span, $gutters, $spread, $validate: false);\n\n  @if unitless($span-width) {\n    $container-spread: su-valid-spread($container-spread);\n    $container: _su-sum($columns, $gutters, $container-spread, $validate: false);\n    @return percentage($span-width / $container);\n  }\n\n  @return $span-width;\n}\n\n\n\n// Su Gutter\n// ---------\n/// Calculates and returns a CSS-ready gutter width,\n/// based on normalized grid data –\n/// a low-level version of `susy-gutter`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-gutter\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $container-spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n///\n/// @return {length} -\n///   Relative or static length of one gutter in a grid\n@function su-gutter(\n  $columns,\n  $gutters,\n  $container-spread\n) {\n  @if (type-of($gutters) == 'number') {\n    @if ($gutters == 0) or (not unitless($gutters)) {\n      @return $gutters;\n    }\n  }\n\n  @if _su-needs-calc-output($gutters, $columns, $gutters, -1, not 'validate') {\n    @return _su-calc-span($gutters, $columns, $gutters, -1, $container-spread, not 'validate');\n  }\n\n  $container: _su-sum($columns, $gutters, $container-spread);\n  @return percentage($gutters / $container);\n}\n\n\n\n// Su Slice\n// --------\n/// Returns a list of columns\n/// based on a given span/location slice of the grid –\n/// a low-level version of `susy-slice`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// @group su-math\n/// @see susy-slice\n///\n/// @param {number} $span -\n///   Number of grid columns to span\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $location [1] -\n///   Starting index of a span in the list of columns\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {list} -\n///   Subset list of grid columns, based on span and location\n@function su-slice(\n  $span,\n  $columns,\n  $location: 1,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-columns($columns);\n    $location: su-valid-location($span, $location, $columns);\n  }\n\n  $floor: floor($span);\n  $sub-columns: ();\n\n  @for $i from $location to ($location + $floor) {\n    $sub-columns: append($sub-columns, nth($columns, $i));\n  }\n\n  @if $floor != $span {\n    $remainder: $span - $floor;\n    $column: $location + $floor;\n    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);\n  }\n\n  @return $sub-columns;\n}\n\n\n\n// Su Sum\n// ------\n/// Get the total sum of column-units in a layout.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {number} -\n///   Total sum of column-units in a grid\n@function _su-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  // Calculate column-sum\n  $column-sum: 0;\n  @each $column in $columns {\n    $column-sum: $column-sum + $column;\n  }\n\n  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;\n  $total: if(($gutter-sum > 0), $column-sum + $gutter-sum, $column-sum);\n\n  @return $total;\n}\n\n\n\n// Su Calc\n// -------\n/// Return a usable span width as a `calc()` function,\n/// in order to create mixed-unit grids.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {number | list} $span -\n///   Pre-sliced list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function _su-calc-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n    $container-spread: su-valid-spread($container-spread);\n  }\n\n  // Span and context\n  $span: _su-calc-sum($span, $gutters, $spread, not 'validate');\n  $context: _su-calc-sum($columns, $gutters, $container-spread, not 'validate');\n\n  // Fixed and fluid\n  $fixed-span: map-get($span, 'fixed');\n  $fluid-span: map-get($span, 'fluid');\n  $fixed-context: map-get($context, 'fixed');\n  $fluid-context: map-get($context, 'fluid');\n\n  $calc: '#{$fixed-span}';\n  $fluid-calc: '(100% - #{$fixed-context})';\n\n  // Fluid-values\n  @if (not $fluid-span) {\n    $fluid-calc: null;\n  } @else if ($fluid-span != $fluid-context) {\n    $fluid-span: '* #{$fluid-span}';\n    $fluid-context: if($fluid-context, '/ #{$fluid-context}', '');\n    $fluid-calc: '(#{$fluid-calc $fluid-context $fluid-span})';\n  }\n\n  @if $fluid-calc {\n    $calc: if(($calc != ''), '#{$calc} + ', '');\n    $calc: '#{$calc + $fluid-calc}';\n  }\n\n  @return calc(#{unquote($calc)});\n}\n\n\n\n// Su Calc-Sum\n// -----------\n/// Get the total sum of fixed and fluid column-units\n/// for creating a mixed-unit layout with `calc()` values.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {map} -\n///   Map with `fixed` and `fluid` keys\n///   containing the proper math as strings\n@function _su-calc-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  $fluid: 0;\n  $fixed: ();\n  $calc: null;\n\n  // Gutters\n  $gutters:  $gutters * (length($columns) + $spread);\n\n  // Columns\n  @each $col in append($columns, $gutters) {\n    @if unitless($col) {\n      $fluid: $fluid + $col;\n    } @else {\n      $fixed: _su-map-add-units($fixed, $col);\n    }\n  }\n\n  // Compile Fixed Units\n  @each $unit, $total in $fixed {\n    @if ($total != (0 * $total)) {\n      $calc: if($calc, '#{$calc} + #{$total}', '#{$total}');\n    }\n  }\n\n  // Calc null or string\n  @if $calc {\n    $calc: if(str-index($calc, '+'), '(#{$calc})', '#{$calc}');\n  }\n\n  // Fluid 0 => null\n  $fluid: if(($fluid == 0), null, $fluid);\n\n\n  // Return map\n  $return: (\n    'fixed': $calc,\n    'fluid': $fluid,\n  );\n\n  @return $return;\n}\n\n\n\n// Needs Calc\n// ----------\n/// Check if `calc()` will be needed in defining a span,\n/// if the necessary units in a grid are not comparable.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $span -\n///   Slice of columns to span\n/// @param {list} $columns -\n///   List of available columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {bool} -\n///   `True` when units do not match, and `calc()` will be required\n@function _su-needs-calc-output(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n  }\n\n  $has-gutter: if((length($span) > 1) or ($spread >= 0), true, false);\n  $check: if($has-gutter, append($span, $gutters), $span);\n  $safe-span: _su-is-comparable($check...);\n\n  @if ($safe-span == 'static') {\n    @return false;\n  } @else if (not $safe-span) {\n    @return true;\n  }\n\n  $safe-fluid: _su-is-comparable($gutters, $columns...);\n\n  @return not $safe-fluid;\n}\n","//grid system mixin version\r\n\r\n@import 'grid-settings';\r\n\r\n@import 'grid-shared-mixins';\r\n\r\n//make cells take up multiple columns worth of width\r\n@mixin grid__cell--span($span, $totalCols, $important: ()){\r\n\tflex-grow: 1;\r\n\t@if ($grid-calc-support) {\r\n\t\twidth: calc(#{$span} / #{$totalCols} * 100%) $important;\r\n\t} @else {\r\n\t\twidth: ($span / $totalCols * 100%) $important;\r\n\t}\r\n}\r\n\r\n@mixin grid(\r\n\t$cols: auto,\r\n\t$gutter: false,\r\n\t$breakpoints: default,\r\n\t$inners: false,\r\n\t$vAlign: false,\r\n\t$align: default,\r\n\t$space: false,\r\n\t$wrap: default,\r\n\t$MQs: true,\r\n\t$outerGutters: false,\r\n\t$cellSpan: false,\r\n\t$ieFloat: false,\r\n\t$mini: false,\r\n\t$vertical: false,\r\n\t$stretch: default,\r\n\t$shrink: true,\r\n\t$resize: default\r\n){\r\n\t-gutter-grid-: grid;\r\n\tbox-sizing: border-box;\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tdisplay: flex !important;\r\n\talign-content: stretch;\r\n\tborder-color: transparent;\r\n\r\n\t// $blockDisplayMode__sharedCircumstances:\r\n\t\t// $align != 'stretch' or // TO DO: CHECK HORIZONTAL ALIGNMENT\r\n\t\t// $space != false;\r\n\r\n\t// Only relevant to Legacy users\r\n\t$blockDisplayMode:\r\n\t\t$wrap == true or\r\n\t\t$stretch == false or\r\n\t\t$resize == false or\r\n\t\t$vertical or\r\n\t\t$ieFloat == true or\r\n\t\t$align != default or\r\n\t\t($vAlign and $cols != auto);\r\n\r\n\t//By default grids will stretch unless there is a column or alignment setting\r\n\t@if ($stretch == default) {\r\n\t\t$stretch:\r\n\t\t\t$cols == auto and\r\n\t\t\t$space == false and\r\n\t\t\t($align == default or $align == stretch);\r\n\t}\r\n\r\n\t@if (\r\n\t\t(not $grid-legacy-support and ($wrap == true or ($cols != auto and $wrap == default))) or\r\n\t\t($grid-legacy-support and $wrap != false and ($align != default or $space != false or $stretch == false or $resize == false or ($vAlign != false and $cols != auto))) )\r\n\t{\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n\r\n\t@if ($wrap == default){\r\n\t\t@if ($grid-legacy-support){\r\n\t\t\t// Legacy mode will not wrap unless it is explicitly set to true\r\n\t\t\t// (or if the screen sizer is small)\r\n\t\t\t$wrap: auto;\r\n\t\t} @else {\r\n\t\t\t//By default grids will not wrap unless there is a column setting\r\n\t\t\t$wrap: if($cols == auto, auto, true);\r\n\t\t}\r\n\t}\r\n\r\n\t@if ($vertical){\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\t@if (not $mini){\r\n\t\tmin-width: 100%;\r\n\t}\r\n\r\n\t@if ($grid-break-points != false){\r\n\t\t@include mq(max, $grid-page-width){\r\n\t\t\t@if ($MQs and $wrap == auto){\r\n\t\t\t\tflex-wrap: wrap;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//grid cell styling\r\n\t> * {\r\n\t\t-gutter-grid-: cell;\r\n\t\tbox-sizing: border-box;\r\n\t\tmin-width: 0%;\r\n\t\tmax-width: 100%;\r\n\t\tdisplay: if($inners, flex, block);\r\n\t\tpadding: 0;\r\n\t\tmargin: 0;\r\n\t\tbackground-clip: padding-box!important;\r\n\t\tborder: 0 solid transparent;\r\n\r\n\t\t$canGrow: $resize == true or $align == stretch or ($stretch == true and $resize == default);\r\n\t\t$canShrink: $resize == true or ($shrink == true and $resize == default);\r\n\t\tflex-grow: if($canGrow, 1, 0);\r\n\t\tflex-shrink: if($canShrink, 1, 0);\r\n\r\n\t\t@if($inners) {\r\n\t\t\talign-items: stretch;\r\n\r\n\t\t\t//grid inner styling\r\n\t\t\t> * {\r\n\t\t\t\t-gutter-grid-: inner;\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\twidth: 100%;\r\n\t\t\t\tbox-sizing: border-box;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//column widths\r\n\t\t@if(type-of($cols) == number){\r\n\r\n\t\t\t$breaks: '';\r\n\r\n\t\t\t@if ($breakpoints == default){\r\n\t\t\t\t$breaks: if(length($grid-bp-list) < $cols, false, map-get($grid-bp-list, $cols));\r\n\t\t\t} @else {\r\n\t\t\t\t$breaks: $breakpoints;\r\n\t\t\t}\r\n\r\n\t\t\twidth: column-width($cols);\r\n\r\n\t\t\t//Applies the media queries for the break points\r\n\t\t\t@if($MQs or $breakpoints != default) {\r\n\t\t\t\t@include generate-column-breakpoints($breaks);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//allows IE to use floats instead of display table without affecting modern browsers\r\n\t@if ($blockDisplayMode and ($align == default or $align == stretch)  and not $vAlign and not $space) {\r\n\t\t@include ieFloat;\r\n\t}\r\n\r\n\t@if ($grid-legacy-support) {\r\n\t\t//tabular backup for IE9 and below\r\n\t\t.no-flexbox &, .no-flexwrap & {\r\n\t\t\tdisplay: if($blockDisplayMode, block, table) !important;\r\n\r\n\t\t\t> * {\r\n\t\t\t\tdisplay: if($blockDisplayMode, if($vAlign, inline-block, block), table-cell);\r\n\t\t\t\tvertical-align: top;\r\n\r\n\t\t\t\t@if ($vAlign){\r\n\t\t\t\t\tmargin-right: -4px;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@if ($inners){\r\n\t\t\t\t\t> * { display: block; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@if ($vAlign){\r\n\t\t\t\t@if ($vAlign == 'top'){\r\n\t\t\t\t\t> * { vertical-align: top; }\r\n\t\t\t\t} @else if ($vAlign == 'center') {\r\n\t\t\t\t\t> * { vertical-align: middle; }\r\n\t\t\t\t} @else if ($vAlign == 'bottom') {\r\n\t\t\t\t\t> * { vertical-align: bottom; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t@if($vertical){\r\n\t\t\t\t> * {\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//quick access to left,center and right alignments\r\n\t@if (($align != 'default' and $align != 'stretch' and $stretch == false) or $space) {\r\n\t\t> * {\r\n\t\t\tflex-grow: 0;\r\n\t\t}\r\n\r\n\t\t@if ($align != 'default' and $align != 'stretch' and $stretch == false){\r\n\t\t\t@if ($align == 'left') {\r\n\t\t\t\tjustify-content: flex-start;\r\n\t\t\t} @else if ($align == 'center') {\r\n\t\t\t\tjustify-content: center;\r\n\t\t\t} @else if ($align == 'right') {\r\n\t\t\t\tjustify-content: flex-end;\r\n\t\t\t} @else {\r\n\t\t\t\t@warn 'invalid value for $align: \"#{$align}\". Valid values: left, center, right, stretch.';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//quick access to space-between and space-around\r\n\t\t@if ($space) {\r\n\t\t\t@if ($space == 'between') {\r\n\t\t\t\tjustify-content: space-between;\r\n\t\t\t} @else if ($space == 'around') {\r\n\t\t\t\tjustify-content: space-around;\r\n\t\t\t} @else if ($space == 'evenly') {\r\n\t\t\t\t//backup for browsers that don't support \"space-evenly\"\r\n\t\t\t\tjustify-content: space-around;\r\n\t\t\t\tjustify-content: space-evenly;\r\n\t\t\t} @else {\r\n\t\t\t\t@warn 'invalid value for $space: \"#{$space}\". Valid values: between, around.';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@if ($grid-legacy-support) {\r\n\t\t\t.no-flexbox &, .no-flexwrap & {\r\n\t\t\t\t@if ($space or $align =='center') {\r\n\t\t\t\t\ttext-align: center;\r\n\t\t\t\t} @else if ($align == 'right') {\r\n\t\t\t\t\ttext-align: right;\r\n\t\t\t\t} @else {\r\n\t\t\t\t\ttext-align: left;\r\n\t\t\t\t}\r\n\t\t\t\t> * {\r\n\t\t\t\t\tdisplay: inline-block;\r\n\t\t\t\t\tfloat: none;\r\n\t\t\t\t\tmargin-right: -4px;//removes space bar space\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//vertical alignment of cells\r\n\t@if ($vAlign){\r\n\t\t@if ($vAlign == 'center') {\r\n\t\t\talign-items: center;\r\n\t\t} @else if ($vAlign == 'top') {\r\n\t\t\talign-items: flex-start;\r\n\t\t} @else if ($vAlign == 'bottom') {\r\n\t\t\talign-items: flex-end;\r\n\t\t} @else {\r\n\t\t\t@warn 'invalid value for $vAlign: \"#{$vAlign}\". Valid values: top, center, bottom.';\r\n\t\t}\r\n\t}\r\n\r\n\t//grid--gutter-# styling\r\n\t@if ($gutter != false){\r\n\t\tborder-style: solid;\r\n\t\t> *, & {\r\n\t\t\t@if ($grid-legacy-support) {\r\n\t\t\t\t.lt-ie9 & { border-color: $grid-gutter-ie-fallback; }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@if (type-of($gutter) == 'string') {\r\n\t\t\t@if (map-get($grid-cell-gutters, $gutter)){\r\n\t\t\t\t$gutter: map-get($grid-cell-gutters, $gutter);\r\n\t\t\t} @else {\r\n\t\t\t\t@warn '\"#{$gutter}\" was not found in the $grid-cell-gutters variable';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@include parse-gutter-data($gutter, 'mixin', $outerGutters);\r\n\t}\r\n\r\n\t//outer gutters\r\n\t@if ($outerGutters != false){\r\n\t\t$possibleMargins: (\r\n\t\t\ttrue: margin,\r\n\t\t\tv: margin-top margin-bottom,\r\n\t\t\th: margin-left margin-right,\r\n\t\t\ttop: margin-top,\r\n\t\t\tbottom: margin-bottom,\r\n\t\t\tleft: margin-left,\r\n\t\t\tright: margin-right,\r\n\t\t);\r\n\t\t$marginSet: map-get($possibleMargins, $outerGutters);\r\n\t\t@each $margin in $marginSet {\r\n\t\t\t#{$margin}: 0;\r\n\t\t}\r\n\t}\r\n}\r\n"]}