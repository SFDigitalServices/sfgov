<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\job_scheduler\Entity\JobSchedule;

/**
 * Implements hook_form_alter().
 */
function sfgov_campaigns_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_campaign_edit_form') {
    $form['#validate'][] = 'sfgov_campaigns_validate_resource_description';
  }
}

/**
 * Implements hook_form_alter().
 */
function sfgov_campaigns_validate_resource_description(&$form, FormStateInterface $form_state) {
  // Retrieve the campaign node to check.
  $node = $form_state->getFormObject()->getEntity();
  if (!$node->hasField('field_contents') || $node->field_contents->isEmpty()) {
    return;
  }
  if ($node->getType() != 'campaign') {
    return;
  }

  // Navigate down through the fields and related entity fields to find Resource Description.
  $node_contents = $node->get('field_contents');
  foreach ($node_contents as $node_content) {
    if ($node_content->entity->hasField('field_resources')) {
      $resources = $node_content->entity->get('field_resources');
      foreach ($resources as $resource) {
        if ($resource->entity->hasField('field_content')) {
          $content_subfields = $resource->entity->get('field_content');
          foreach ($content_subfields as $content_subfield) {
            if ($content_subfield->entity->hasField('field_description')) {
              $field_description_value = $content_subfield->entity->get('field_description')->value;
              // Finally check the description field, and throw error if needed.
              $has_http = (strpos($field_description_value, 'http://') !== FALSE) ? TRUE : FALSE;
              $has_https = (strpos($field_description_value, 'https://') !== FALSE) ? TRUE : FALSE;
              $regex = '/[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})/';
              $has_email = preg_match($regex, $field_description_value) ? TRUE : FALSE;
              if ($has_http || $has_https) {
                $error_message = t('The campaign resource Resource Description field cannot contain a web address.');
                $form_state->setErrorByName("field content", $error_message);
              }
              if ($has_email) {
                $error_message = t('The campaign resource cannot contain the @ symbol unless it has spaces on either side.');
                $form_state->setErrorByName("field content", $error_message);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function sfgov_campaigns_entity_update(EntityInterface $entity) {
  if ($entity->bundle() == 'campaign') {
    if ($unpublish_on = $entity->unpublish_on->value) {
      // Formatted `unpublish_on`.
      $unpublish_on_formatted = \Drupal::service('date.formatter')->format($unpublish_on, 'custom', 'D, M j, Y - H:i:s');

      // Set parameters to be sent to the email template.
      $data = [
        'campaign_name' => $entity->label(),
        'campaign_expiration_date' => $unpublish_on_formatted,
        'recipient' => $entity->uid->entity->mail->value,
      ];

      // If the node is new.
      if ($entity->isNew()) {
        // Add new job.
        _sfgov_campaigns_archiving_notification_job_add($entity->id(), $unpublish_on, $data);
      }
      else {
        // If the unpublish date changes.
        if ($entity->unpublish_on->value != $entity->original->unpublish_on->value) {
          // Remove existing job.
          _sfgov_campaigns_archiving_notification_job_remove($entity->id());

          // Add new job.
          _sfgov_campaigns_archiving_notification_job_add($entity->id(), $unpublish_on, $data);
        }

        // If the node is manually unpublished.
        if (($entity->status->value != $entity->original->status->value) && !$entity->status->value) {
          // Remove existing job.
          _sfgov_campaigns_archiving_notification_job_remove($entity->id());
        }
      }
    }
  }
}

/**
 * Implements hook_cron_job_scheduler_info().
 */
function sfgov_campaigns_cron_job_scheduler_info() {
  $schedulers = [];

  $schedulers['sfgov_campaigns_archiving_notification'] = [
    'worker callback' => '_sfgov_campaigns_archiving_notification',
  ];

  return $schedulers;
}

/**
 * Custom callback to remove a job schedule for "archiving email notification".
 */
function _sfgov_campaigns_archiving_notification_job_remove($id) {
  $job = [
    'name' => 'sfgov_campaigns_archiving_notification',
    'type' => 'mail_notification',
    'id' => $id,
  ];
  $service = \Drupal::service('job_scheduler.manager');
  $service->remove($job);
}

/**
 * Custom callback to add a job schedule for "archiving email notification".
 */
function _sfgov_campaigns_archiving_notification_job_add($id, $unpublish_on, $data) {
  // Get period timestamp from `unpublish_on`.
  $period_timestamp = strtotime('-2 weeks', $unpublish_on);

  // Get period interval in seconds.
  $period = $period_timestamp - time();

  // Workarund for when the unpublish date is in less than 2 weeks.
  $period = $period < 0 ? 0 : $period;

  // Schedule a job.
  $job = [
    'name' => 'sfgov_campaigns_archiving_notification',
    'type' => 'mail_notification',
    'id' => $id,
    'period' => $period,
    'data' => $data,
  ];
  $service = \Drupal::service('job_scheduler.manager');
  $service->set($job);
}

/**
 * Custom callback for sending email when a node is archived.
 */
function _sfgov_campaigns_archiving_notification(JobSchedule $job) {
  $mail_manager = \Drupal::service('plugin.manager.mail');
  $module = 'sfgov_campaigns';
  $key = 'sfgov_campaigns__archiving_notification';
  $params = $job->getData();
  $mail_manager->mail($module, $key, $params['recipient'], 'en', $params);
}

/**
 * Implements hook_mail().
 */
function sfgov_campaigns_mail($key, &$message, $params) {
  switch ($key) {
    case 'sfgov_campaigns__archiving_notification':
      $message['subject'] = 'Your campaign, '. $params['campaign_name'] .', is about to expire.';
      $body_render = [
        '#theme' => 'sfgov_campaigns__archiving_notification_message',
        '#campaign_name' => $params['campaign_name'],
        '#campaign_expiration_date' => $params['campaign_expiration_date'],
      ];
      $message['body'][] = \Drupal::service('renderer')->render($body_render);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function sfgov_campaigns_theme($existing, $type, $theme, $path) {
  return [
    'sfgov_campaigns__archiving_notification_message' => [
      'variables' => [
        'campaign_name' => NULL,
        'campaign_expiration_date' => NULL,
      ],
    ],
  ];
}
