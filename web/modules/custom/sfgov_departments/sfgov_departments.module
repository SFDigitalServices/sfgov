<?php

/**
 * @file
 * Extends functionality for the department content type.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function sfgov_departments_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_department_edit_form':
      $form['field_about_description']['#disabled'] = 'disabled';
      break;

    case 'node_transaction_form':
    case 'node_transaction_edit_form':
      // Set form wrapper.
      $form['field_departments']['#prefix'] = '<div id="field-departments-wrapper">';
      $form['field_departments']['#suffix'] = '</div>';

      // Get clean values to populate field departments.
      $default_values = [];
      if ($field_departments = $form_state->getValue('field_departments')) {
        foreach ($field_departments as $delta => $value) {
          if (is_numeric($delta)) {
            $default_values[$delta] = $value;
          }
        }
      }

      if (!empty($default_values)) {
        // Load nodes from $default_values.
        $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($default_values);

        // Iterate through field values to populate new values.
        $i = 0;
        while (isset($form['field_departments']['widget'][$i])) {
          if ($default_values) {
            if (isset($default_values[$i])) {
              // Populate field.
              $form['field_departments']['widget'][$i]['target_id']['#default_value'] = $nodes[$default_values[$i]];
            }
          }

          $i++;
        }
      }

      // Submit button to trigger (via AJAX) the parent departments fetching.
      $form['field_departments_submit'] = [
        '#type' => 'submit',
        '#value' => 'Fetch parent departments',
        '#submit' => ['_fetch_departments_submit'],
        '#ajax' => [
          'callback' => '_fetch_departments_submit',
          'wrapper' => 'field-departments-wrapper',
          'event' => 'click',
          'disable-refocus' => TRUE,
        ],
        '#limit_validation_errors' => [['field_departments']],
        '#prefix' => '<div class="field-department-submit-wrapper">',
        '#suffix' => '</div>',
      ];

      // Attach library.
      $form['#attached']['library'][] = 'sfgov_departments/parent_departments';

      break;
  }
}

/**
 * Custom ajax callback to load parent/child departments on transactions.
 *
 * @param array $form
 *   The render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 *
 * @return array
 *   Department field.
 */
function _fetch_departments_submit(array &$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  $values = $form_state->getValues();

  // Get current department values.
  $field_departments = $values['field_departments'];

  // Store and unset the add_more action.
  $add_more = $field_departments['add_more'];
  unset($field_departments['add_more']);

  // Get only the field values.
  $clean_values = [];
  foreach ($field_departments as $key => $value) {
    if (is_numeric($key) && $value['target_id']) {
      $clean_values[] = $value['target_id'];
    }
  }

  // Do nothing if there is no value.
  if (!empty($clean_values)) {
    foreach ($clean_values as $value) {
      /** @var \Drupal\node\NodeInterface $node */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($value);

      // Get parent values.
      if ($node && $node->hasField('field_parent_department') && ($parent_node = $node->field_parent_department->entity)) {
        if (!in_array($parent_node->id(), array_values($clean_values))) {
          $clean_values[] = $parent_node->id();

          \Drupal::messenger()->addMessage(t('"@parent_department" is a parent department of "@department" and has been added by default. You can remove this selection if it does not apply for this content.', [
            '@parent_department' => $parent_node->label(),
            '@department' => $node->label(),
          ]));
        }
      }
    }

    // Reset field count.
    $storage['field_storage']['#parents']['#fields']['field_departments']['items_count'] = count($clean_values);
    $form_state->setStorage($storage);

    // Get user input.
    $input = $form_state->getUserInput();

    // Clear the input so that it can be populated with the new values.
    $input['field_departments'] = [];

    // Set new values, and rebuild the form state.
    $clean_values['add_more'] = $add_more;
    $form_state->setValue('field_departments', $clean_values);
    $form_state->setUserInput($input);
    $form_state->setRebuild();
  }

  return $form['field_departments'];
}
