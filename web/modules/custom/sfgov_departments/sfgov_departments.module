<?php

use Drupal\node\Entity\Node;

/**
 * @file
 * Contains sfgov_departments.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\sfgov_departments\SFgovDepartment;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;

/**
 * Implements hook_form_alter().
 */
function sfgov_departments_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_transaction_form':
    case 'node_transaction_edit_form':
      // Form wrapper.
      $form['#prefix'] = '<div id="node-transaction-form-wrapper">';
      $form['#suffix'] = '</div>';

      // Debug info.
      $form['debug'] = [
        '#type' => 'container',
        '#attributes' => [
          'id' => ['debug-out'],
        ],
        '#weight' => 23,
      ];

      $items_count = $form_state->getStorage()['field_storage']['#parents']['#fields']['field_departments']['items_count'];
      for ($i=0; $i <= $items_count; $i++) { 
        $form['field_departments']['widget'][$i]['target_id']['#ajax'] = [
          'callback' => '_parent_departments',
          'wrapper' => 'node-transaction-form-wrapper',
          'event' => 'autocompleteselect',
        ];
      }

      $form['field_departments_fetch'] = [
        '#type' => 'submit',
        '#value' => t('Departments Fetch'),
        '#submit' => ['_parent_departments_fetch'],
        '#ajax' => [
          'callback' => '_parent_departments_fetch',
          'wrapper' => 'node-transaction-form-wrapper',
        ],
        '#weight' => 1000,
      ];

      if ($form_state->get('field_departments_ids')) {
        $form['field_departments']['widget']['#description'] = $form_state->get('field_departments_ids');
      }

      break;
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _parent_departments_fetch(array &$form, FormStateInterface $form_state) {
  // https://www.drupal.org/forum/support/module-development-and-code-questions/2019-05-21/ajax-form-prepopulate-an-entity
  
  $form_state->set('field_departments_ids', time());
  $form_state->setRebuild();
  return $form;
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _parent_departments(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // Kint
  $debugOut = @Kint::dump($form_state->getValue('field_departments'));
  $response->addCommand(new ReplaceCommand('#debug-out', '<div id="debug-out">'.$debugOut.'</div>'));
  
  // Loading..
  $response->addCommand(new InvokeCommand('.field--name-field-departments .description', 'css', ['color', 'red']));

  // Trigger fetch button.
  $response->addCommand(new InvokeCommand('[data-drupal-selector="edit-field-departments-fetch"]', 'trigger', ['mousedown']));
  return $response;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Create the related department group entity when the department node
 * is created.
 */
function sfgov_departments_node_insert(\Drupal\node\NodeInterface $entity) {
  sfgov_departments_node_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Update the related department group entity when the department node
 * is updated.
 */
function sfgov_departments_node_update(\Drupal\node\NodeInterface $entity) {
  if ($entity->bundle() == 'department') {
    SFgovDepartment::createOrUpdate($entity);
  }
  elseif ($entity->hasField('field_departments')) {
    SFgovDepartment::updateGroupContent($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Delete the related department group entity when the department node is
 * deleted.
 */
function sfgov_departments_node_delete(\Drupal\node\NodeInterface $entity) {
  if ($entity->bundle() == 'department') {
    SFgovDepartment::delete($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Relate the media entity to a group when created.
 */
function sfgov_departments_media_insert(\Drupal\media\MediaInterface $entity) {
  sfgov_departments_media_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Relate the media entity to a group when updated.
 */
function sfgov_departments_media_update(\Drupal\media\MediaInterface $entity) {
  if ($entity->hasField('field_department')) {
    SFgovDepartment::updateGroupMediaContent($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Access control for media entities.
 * When trying to view, update or delete an entity it suffices to have the right to
 * do so in only one group the node belongs to.
 */
function sfgov_departments_media_access(
  \Drupal\media\MediaInterface $entity,
  $op,
  \Drupal\Core\Session\AccountInterface $account
) {
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  if ($entity->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_media:' . $entity->bundle();

  // Only act if there are group content types for this entity type.
  $group_content_types = \Drupal\group\Entity\GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // Load all the group content for this entity.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $entity->id(),
    ]);

  // If the entity does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }

  // From this point on you need group to allow you to perform the operation.
  switch ($op) {
    case 'view':
      foreach ($groups as $group) {
        if ($entity->isPublished()) {
          if ($group->hasPermission("view $plugin_id entity", $account)) {
            return AccessResult::allowed();
          }
        }
        elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'update':
    case 'delete':
      foreach ($groups as $group) {
        if ($group->hasPermission("$op any $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
        elseif ($account->id() == $entity->getOwnerId() && $group->hasPermission("$op own $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  // Instead of outright forbidding access when no group granted it, we return
  // a neutral access result to play nice with other modules.
  return AccessResult::neutral();
}
