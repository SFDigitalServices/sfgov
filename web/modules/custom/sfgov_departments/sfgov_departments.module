<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\sfgov_departments\SFgovDepartment;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;

/**
 * Implements template_preprocess_node().
 */
function sfgov_departments_preprocess_node__department__full(&$variables) {
  $node = $variables['node'];
  $connection = \Drupal::database();

  // Get all Topics tagged in the Transactions for the current Department.
  $query = $connection->select('node__field_departments', 'd');
  $query->join('node__field_topics', 't', 'd.entity_id = t.entity_id');
  $query->fields('t', array('field_topics_target_id'));
  $query->condition('d.bundle', 'transaction');
  $query->condition('d.field_departments_target_id', $node->id());
  $results = $query->distinct()->execute()->fetchAll();

  $topic_ids = [];
  foreach ($results as $result) {
    $topic_ids[] = $result->field_topics_target_id;
  }

  $topics = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($topic_ids);
  $variables['services_by_topic'] = $topics;
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function sfgov_departments_node_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  if ($entity->isNew() && $entity->bundle() == 'department') {
    $storage = \Drupal::entityTypeManager()->getStorage('paragraph');
    $langcode = $form_state->get('langcode');

    // Append default item into Department Services.
    $paragraphs_entity = $storage->create([
      'type' => 'department_service_section',
      'langcode' => $langcode,
      'field_dept_service_section_title' => 'Frequently Used Services',
    ]);
    $entity->get('field_department_services')->appendItem($paragraphs_entity);
  }
}

/**
 * Implements hook_form_alter().
 */
function sfgov_departments_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_department_edit_form':
      $form['field_about_description']['#disabled'] = 'disabled';
      break;
    case 'node_transaction_form':
    case 'node_transaction_edit_form':
      // Set form wrapper.
      $form['field_departments']['#prefix'] = '<div id="field-departments-wrapper">';
      $form['field_departments']['#suffix'] = '</div>';

      // Get clean values to populate field departments.
      $default_values = [];
      if ($field_departments = $form_state->getValue('field_departments')) {
        foreach ($field_departments as $delta => $value) {
          if (is_numeric($delta)) {
            $default_values[$delta] = $value;
          }
        }
      }

      if (!empty($default_values)) {
        // Load nodes from $default_values.
        $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($default_values);

        // Iterate through field values to populate new values.
        $i = 0;
        while (isset($form['field_departments']['widget'][$i])) {
          if ($default_values) {
            if (isset($default_values[$i])) {
              // Populate field.
              $form['field_departments']['widget'][$i]['target_id']['#default_value'] = $nodes[$default_values[$i]];
            }
          }

          $i++;
        }
      }

      // Submit button to trigger (via AJAX) the parent departments fetching.
      $form['field_departments_submit'] = [
        '#type' => 'submit',
        '#value' => 'Fetch parent departments',
        '#submit' => ['_fetch_departments_submit'],
        '#ajax' => [
          'callback' => '_fetch_departments_submit',
          'wrapper' => 'field-departments-wrapper',
          'event' => 'click',
          'disable-refocus' => TRUE,
        ],
        '#limit_validation_errors' => [['field_departments']],
        '#prefix' => '<div class="field-department-submit-wrapper">',
        '#suffix' => '</div>',
      ];

      // Attach library.
      $form['#attached']['library'][] = 'sfgov_departments/parent_departments';

      break;
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _fetch_departments_submit(array &$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  $values = $form_state->getValues();

  // Get current department values.
  $field_departments = $values['field_departments'];

  // Store and unset the add_more action.
  $add_more = $field_departments['add_more'];
  unset($field_departments['add_more']);

  // Get only the field values.
  $clean_values = [];
  foreach ($field_departments as $key => $value) {
    if (is_numeric($key) && $value['target_id']) {
      $clean_values[] = $value['target_id'];
    }
  }

  // Do nothing if there is no value.
  if (!empty($clean_values)) {
    foreach ($clean_values as $value) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($value);

      // Get parent values.
      if ($parent_node = $node->field_parent_department->entity) {
        if (!in_array($parent_node->id(), array_values($clean_values))) {
          $clean_values[] = $parent_node->id();

          drupal_set_message(t('"@parent_department" is a parent department of "@department" and has been added by default. You can remove this selection if it does not apply for this content.', [
            '@parent_department' => $parent_node->label(),
            '@department' => $node->label(),
          ]));
        }
      }
    }

    // Reset field count.
    $storage['field_storage']['#parents']['#fields']['field_departments']['items_count'] = count($clean_values);
    $form_state->setStorage($storage);

    // Get user input.
    $input = $form_state->getUserInput();

    // Clear the input so that it can be populated with the new values.
    $input['field_departments'] = [];

    // Set new values, and rebuild the form state.
    $clean_values['add_more'] = $add_more;
    $form_state->setValue('field_departments', $clean_values);
    $form_state->setUserInput($input);
    $form_state->setRebuild();
  }

  return $form['field_departments'];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Create the related department group entity when the department node
 * is created.
 */
function sfgov_departments_node_insert(NodeInterface $entity) {
  sfgov_departments_node_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Update the related department group entity when the department node
 * is updated.
 */
function sfgov_departments_node_update(NodeInterface $entity) {
  if ($entity->bundle() == 'department') {
    SFgovDepartment::createOrUpdate($entity);
  }
  elseif ($entity->hasField('field_departments')) {
    SFgovDepartment::updateGroupContent($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Delete the related department group entity when the department node is
 * deleted.
 */
function sfgov_departments_node_delete(NodeInterface $entity) {
  if ($entity->bundle() == 'department') {
    SFgovDepartment::delete($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Relate the media entity to a group when created.
 */
function sfgov_departments_media_insert(MediaInterface $entity) {
  sfgov_departments_media_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * Relate the media entity to a group when updated.
 */
function sfgov_departments_media_update(MediaInterface $entity) {
  if ($entity->hasField('field_department')) {
    SFgovDepartment::updateGroupMediaContent($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Access control for media entities.
 * When trying to view, update or delete an entity it suffices to have the right to
 * do so in only one group the node belongs to.
 */
function sfgov_departments_media_access(MediaInterface $entity, $op, AccountInterface $account) {
  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
  if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  if ($entity->isNew()) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_media:' . $entity->bundle();

  // Only act if there are group content types for this entity type.
  $group_content_types = \Drupal\group\Entity\GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // Load all the group content for this entity.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_content')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $entity->id(),
    ]);

  // If the entity does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }

  // From this point on you need group to allow you to perform the operation.
  switch ($op) {
    case 'view':
      foreach ($groups as $group) {
        if ($entity->isPublished()) {
          if ($group->hasPermission("view $plugin_id entity", $account)) {
            return AccessResult::allowed();
          }
        }
        elseif ($group->hasPermission("view unpublished $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'update':
    case 'delete':
      foreach ($groups as $group) {
        if ($group->hasPermission("$op any $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
        elseif ($account->id() == $entity->getOwnerId() && $group->hasPermission("$op own $plugin_id entity", $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  // Instead of outright forbidding access when no group granted it, we return
  // a neutral access result to play nice with other modules.
  return AccessResult::neutral();
}
