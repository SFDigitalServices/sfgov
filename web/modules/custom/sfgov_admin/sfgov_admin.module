<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Druapl\views\Views;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function sfgov_admin_theme($existing, $type, $theme, $path) {
  return [
    'field_multiple_value_form__paragraphs' => [
      'base hook' => 'field_multiple_value_form',
    ],
    'field_multiple_value_form__autocomplete' => [
      'base hook' => 'field_multiple_value_form',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function sfgov_admin_page_attachments(array &$page) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $route */
  $route = \Drupal::routeMatch()->getRouteObject();
  /** @var \Drupal\Core\Routing\AdminContext $is_admin */
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if ($is_admin && $active_theme == 'seven') {
    $page['#attached']['library'][] = 'sfgov_admin/admin';
  }

  // This library is for backend-related functionality, like inline Diffs,
  // Preview, and Workflow functionality, where default theme is active, and
  // administrative tools are on page.
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if ($logged_in && $active_theme == 'sfgovpl') {
    $page['#attached']['library'][] = 'sfgovpl/sfgov-editorial';
  }
}

/**
 * Implements hook_form_alter().
 */
function sfgov_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_event_form' || $form_id == 'node_event_edit_form') {
    $selector_condition = [
      ':input[name^="field_location_in_person"]' => ['checked' => TRUE]
    ];
    $form['field_address']['#states'] = [
      'visible' => $selector_condition,
      'required' => $selector_condition,
    ];

    $form['buttons']['save']['#validate'][] = 'sfgov_admin_custom_validate';
  }
}

function sfgov_admin_custom_validate($form, &$form_state) {
  if ((isset($form_state['values']['field_location_in_person'])) && (empty($form_state['values']['field_address']))) {
    form_set_error('field_address', 'Field cannot be left blank');
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Paragraphs Classic widget.
 */
function sfgov_admin_field_widget_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_cost') {
    /** @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement() */
    $widget_state = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type == 'cost') {

      /*
       * States API implementation on `field_cost_type`.
       *
       * This controls the visibility of fields on the "Cost" paragraph based on
       * the value of the `field_cost_type` field. The location of this
       * Paragraph varies. On "Transactions" nodes it's a field on the node. On
       * "Step by Step" nodes, it's nested in a Paragraph. There is lack of
       * reliable 'class' and id 'attributes', so we're using 'name'. However,
       * there are still differences depending on where it's located. Examples:
       *
       * name="field_cost[0][subform][field_cost_type]"
       * name="field_process_steps[0][subform][field_cost][0][subform][field_cost_type]".
       *
       * Even though the beginning of these is potentially different, the end is
       * reliably the same, so we're using the "ends with" attribute selector.
       */
      $selector = ':input[name$="[subform][field_cost_type]"]';

      if (!empty($element['subform']['field_cost_flat_fee'])) {
        $element['subform']['field_cost_flat_fee']['#states'] = [
          'visible' => [
            $selector => ['value' => 'flat']
          ]
        ];
      }

      if (!empty($element['subform']['field_cost_minimum'])) {
        $element['subform']['field_cost_minimum']['#states'] = [
          'visible' => [
            $selector => [
              ['value' => 'range'],
              ['value' => 'minimum'],
            ]
          ]
        ];
      }

      if (!empty($element['subform']['field_cost_maximum'])) {
        $element['subform']['field_cost_maximum']['#states'] = [
          'visible' => [
            $selector => ['value' => 'range']
          ]
        ];
      }
    }
  }

  // Update the default values for resource collection.
  // See https://sfgovdt.jira.com/browse/SG-1433.
  if ($field_definition->getName() == 'field_data_dashboard' && $field_definition->getTargetBundle() == 'resource_collection') {
    $default_values = [
      'field_desktop_width' => 1000,
      'field_desktop_height' => 220,
      'field_mobile_width' => 360,
      'field_mobile_height' => 660,
    ];

    foreach ($default_values as $field => $value) {
      if (isset($element['subform'][$field])) {
        $element['subform'][$field]['widget'][0]['value']['#default_value'] = $value;
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Paragraphs Experimental widget.
 */
function sfgov_admin_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sfgov_admin_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables) {
  // Closed + Preview
  if (!empty($variables['element'][0]['#paragraph_type'])) {
    $suggestions[] = 'field_multiple_value_form__paragraphs';
    $suggestions[] = 'field_multiple_value_form__paragraphs__preview';
  }

  // Closed + Subform
  if (!empty($variables['element'][0]['#entity_type']) && $variables['element'][0]['#entity_type'] == 'paragraph') {
    $suggestions[] = 'field_multiple_value_form__paragraphs';
    $suggestions[] = 'field_multiple_value_form__paragraphs__subform';
  }

  // Checks the widgets against the first AJAX callback to find out type being
  // used.
  if (!empty($variables['element']['add_more'])) {
    $children_count = count(Element::children($variables['element']['add_more']));
    $paragraphs_widgets = [
      'Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget',
      'Drupal\sfgov_admin\Plugin\Field\FieldWidget\SfgovParagraphsWidget',
    ];
    $autocomplete_widgets = [
      'Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget',
    ];

    if ($children_count >= 1) {
      foreach (Element::children($variables['element']['add_more']) as $key => $button) {
        if (!empty($variables['element']['add_more'][$button]['#ajax'])) {
          if (in_array($variables['element']['add_more'][$button]['#ajax']['callback'][0], $paragraphs_widgets)) {
            $suggestions[] = 'field_multiple_value_form__paragraphs';

            if ($children_count == 1) {
              $suggestions[] = 'field_multiple_value_form__paragraphs_single_button';
            }
            else {
              $suggestions[] = 'field_multiple_value_form__paragraphs_multiple_button';
            }
          }
        }
      }
    }

    else {
      if (in_array($variables['element']['add_more']['#ajax']['callback'][0], $autocomplete_widgets)) {
        $suggestions[] = 'field_multiple_value_form__autocomplete';
      }
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function sfgov_admin_preprocess_field_multiple_value_form__autocomplete(&$variables) {
  if ($variables['element']['#field_name'] == 'field_person_2') {
    $variables['button']['#value'] = $variables['element']['#max_delta'] >= 0 ? t('Add another person') : t('Add person');
  }
}

function sfgov_admin_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $viewId = $form['#id'];
  if ($viewId != 'views-exposed-form-content-transactions') { // return if this is not a content view transaction display
    return;
  }

  $form['field_direct_external_url_uri_op']['#options'] = array(
    'All' => '- Any - ',
    'empty' => 'Yes',
    'not empty' => 'No',
  );
  $form['field_direct_external_url_uri_op']['#default_value'] = 'All';
  $form['field_direct_external_url_uri_op']['#title'] = 'Has Start Page';
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Disable the designate top level topic checkbox if this topic is a child of another topic
 */
function sfgov_admin_form_node_topic_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $topicId = $form_state->getFormObject()->getEntity()->id();
  $topicNids = \Drupal::entityQuery('node')->condition('type','topic')->execute();
  $topicNodes = \Drupal\node\Entity\Node::loadMultiple($topicNids);
  $childTopics = null;
  $foundAsChild = false;
  $parentTopics = [];
  foreach ($topicNodes as $topicNode) {
    $childTopics = $topicNode->get('field_topics');
    foreach ($childTopics->getValue() as $childTopic) {
      $childTopicId = $childTopic['target_id'];
      if ($childTopicId == $topicId) {
        $foundAsChild = true;
        $parentTopics[] = $topicNode->getTitle();
        break;
      }
    }
  }
  if ($foundAsChild) {
    error_log(print_r($parentTopics, 1));
    $form['field_top_level_topic']['widget']['value']['#description'] = t('This Topic cannot be top level because it is a child topic of the following: ' . implode(', ', $parentTopics));
    $form['field_top_level_topic']['widget']['value']['#attributes']['disabled'] = 'disabled';
  }
}

/**
 * Implements hook_preprocess_file_upload_help().
 */
function sfgov_admin_preprocess_file_upload_help(&$variables) {

  // Remove all help text except for the user-entered description.
  $variables['descriptions'] = $variables['description'];

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sfgov_admin_form_content_moderation_entity_moderation_form_alter(&$form, $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $revision */
  $revision = $form_state->get('entity');
  if (empty($revision)) return;
  if ($revision->getEntityTypeId() == 'node') {
    // Base node for the revision.
    /** @var \Drupal\node\NodeInterface $node */
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($revision->id());

    // We also treat the latest translation-affecting revision as the current
    // revision, if it was the default revision, as its values for the
    // current language will be the same of the current default revision in
    // this case.
    $current_revision_displayed = FALSE;
    $is_current_revision = $revision->getRevisionId() == $node->getRevisionId() || (!$current_revision_displayed && $revision->wasDefaultRevision());
    if (!$is_current_revision) {
      $node_url = new Url('entity.node.revision', ['node' => $node->id(), 'node_revision' => $revision->getRevisionId()]);
    }
    else {
      $node_url = $node->toUrl();
      $current_revision_displayed = TRUE;
    }

    $current_state = $form['current']['#markup'];
    $classes = [
      'form-item-current-state',
      'form-item-current-state--' .  Html::cleanCssIdentifier(strtolower($current_state)),
    ];

    // Send properties to the entity-moderation-form.html.twig template.
    $form['#node'] = $node;
    $form['#node_revision'] = $revision;
    $form['#current_state'] = $current_state;
    // Note: Can't use toString() in the template.
    $form['#node_url'] = $node_url->toString();

    // Alter form elements.
    $form['current']['#title'] = t('Current state');
    $form['current']['#markup'] = '<div class="' . implode($classes, ' ') . '">' . $current_state . '</div>';
    $form['revision_log']['#title'] = t('Add a revision note');
    $form['revision_log']['#placeholder'] = t('Log message');
    $form['revision_log']['#size'] = NULL;
  }
}

/**
 * Implements hook_views_pre_view().
*/
function sfgov_admin_views_pre_view(ViewExecutable $view) {
  if ($view->id() == 'content') {
    // Set english as default langcode for admin content list.
    $filters = $view->getDisplay()->getOption('filters');
    $filters["langcode"]["value"] = ["en"];
    $view->display_handler->overrideOption('filters', $filters);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sfgov_admin_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Disable Available menus setting.
  $form['menu']['menu_options']['#default_value'] = [];
  $form['menu']['menu_options']['#description'] = t('<i>This option is disabled in code.</i>');
  $form['menu']['#disabled'] = TRUE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sfgov_admin_form_entity_form_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Prevent sticky and promote fields from being modified.
  $fields = ['sticky', 'promote'];
  $notice = t('<i class="field-plugin-summary">This option is disabled in code.</i>');
  foreach ($fields as $field) {
    $form['fields'][$field]['#attributes']['class'] = [];
    $form['fields'][$field]['weight']['#access'] = FALSE;
    $form['fields'][$field]['parent_wrapper']['#access'] = FALSE;
    $form['fields'][$field]['region']['#access'] = FALSE;
    $form['fields'][$field]['plugin']['type']['#disabled'] = TRUE;
    $form['fields'][$field]['plugin']['type']['#suffix'] = $notice;
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function sfgov_admin_toolbar_alter(&$items) {

  // Add the Node ID and link to edit page to the toolbar for those that have access.
  $nid = \Drupal::routeMatch()->getRawParameter('node');

  if (is_numeric($nid)) {

    $node_edit_url = Url::fromRoute('entity.node.edit_form', ['node' => $nid]);

    if ($node_edit_url->access() == TRUE) {
      $items['node'] = [
        '#type' => 'toolbar_item',
        'tab' => [
          '#type' => 'link',
          '#url' => $node_edit_url,
          '#title' => t('NID: %nid', ['%nid' => $nid]),
        ],
        '#wrapper_attributes' => ['class' => 'user-toolbar-tab'],

      ];
    }
  }
}
