<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_theme().
 */
function sfgov_admin_theme($existing, $type, $theme, $path) {
  return [
    'field_multiple_value_form__paragraphs' => [
      'base hook' => 'field_multiple_value_form',
    ],
    'field_multiple_value_form__autocomplete' => [
      'base hook' => 'field_multiple_value_form',
    ],
    'views_view__content__translations' => [
      'base hook' => 'views_view__content__translations'
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function sfgov_admin_page_attachments(array &$page) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $route */
  $route = \Drupal::routeMatch()->getRouteObject();
  /** @var \Drupal\Core\Routing\AdminContext $is_admin */
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
  $route_name = \Drupal::routeMatch()->getRouteName();
  $is_user_page = $route_name == 'entity.user.canonical';

  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if (($is_admin || $is_user_page) && $active_theme == 'seven') {
    $page['#attached']['library'][] = 'sfgov_admin/admin';
  }

  // This library is for backend-related functionality, like inline Diffs,
  // Preview, and Workflow functionality, where default theme is active, and
  // administrative tools are on page.
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if ($logged_in && $active_theme == 'sfgovpl') {
    $page['#attached']['library'][] = 'sfgovpl/sfgov-editorial';
  }
  $current_uri = \Drupal::request()->getRequestUri();
  if (strstr($current_uri, 'admin/tmgmt/items/')) {
    $page['#attached']['library'][] = 'sfgov_admin/sg1498';
  }
}

/**
 * Implements hook_form_alter().
 */
function sfgov_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_event_form' || $form_id == 'node_event_edit_form') {
    $selector_condition = [
      ':input[name^="field_location_in_person"]' => ['checked' => TRUE]
    ];
    $form['field_address']['#states'] = [
      'visible' => $selector_condition,
      'required' => $selector_condition,
    ];

    $form['buttons']['save']['#validate'][] = 'sfgov_admin_custom_validate';
  }

  if ($form_id == 'node_meeting_form' || $form_id == 'node_meeting_edit_form') {
    $form['#validate'][] = '_sfgov_admin_meeting_validate';
  }
}

// custom validation for meeting content type
function _sfgov_admin_meeting_validate(&$form, FormStateInterface $form_state) {
  // change the error message for field_public_body
  $publicBodyValue = $form_state->getValue('field_public_body');
  $hasPublicBodyValue = false;
  
  foreach ($publicBodyValue as $item) {
    if (is_array($item) && !empty($item['target_id'])) {
      $hasPublicBodyValue = true;
      break;
    }
  }

  if ($hasPublicBodyValue == false) {
    // preserve current form_state errors
    $formErrors = $form_state->getErrors();

    // clear all form_state errors
    $form_state->clearErrors();

    // alter field_public_body error message in saved form_state errors
    $formErrors['field_public_body'] = t('Please tag the associated agency(s) to the the meeting page.');
    
    // re-apply error states and messages
    foreach ($formErrors as $name => $errorMessage) {
      $form_state->setErrorByName($name, $errorMessage);
    }
  }  
}

function sfgov_admin_custom_validate($form, &$form_state) {
  if ((isset($form_state['values']['field_location_in_person'])) && (empty($form_state['values']['field_address']))) {
    form_set_error('field_address', 'Field cannot be left blank');
  }
}

/**
 * Implements hook_block_access().
 */
function sfgov_admin_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // If on the node add or node edit form page...
  if ($route_name == "node.add" || $route_name == "entity.node.edit_form") {
    // SG-1870 -- Remove the help block on node add/edit forms. We moved the
    // content to the title description in sfgov_admin_form_node_form_alter().
    if ($operation == 'view' && $block->getPluginId() == 'help_block') {
      return AccessResult::forbidden();
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sfgov_admin_form_node_form_alter(&$form, &$form_state, $form_id) {

  // Get the node object being used on the form.
  $node = $form_state->getFormObject()->getEntity();
  // Get the node type object for the form.
  $node_type = \Drupal\node\Entity\NodeType::load($node->getType());

  // SG-1870 -- setup title description.
  // Move the content type "submission help" text into the title field
  // description.
  $form['title']['widget'][0]['value']['#description'] = $node_type->get('help');
  //$form['title']['widget'][0]['value']['#title'] = $form['title']['widget'][0]['value']['#title'] . '<span class="counter">TEST</span>';
  // END SG-1870

  // SEE ALSO: sfgov_admin_field_widget_entity_reference_paragraphs_form_alter:236
  // - This setup applies to main level body type fields.
  //
  // Go thru every field, searching for "containers" with widgets, and search
  // thru those widgets for any field of a type "text_format"...
  foreach (Element::children($form) as $field_name) {
    if (array_key_exists('#type', $form[$field_name])) {
      if ($form[$field_name]['#type'] == 'container' && isset($form[$field_name]['widget'])) {
        foreach (Element::children($form[$field_name]['widget']) as $delta) {
          if (array_key_exists('#type', $form[$field_name]['widget'][$delta])) {
            if ($form[$field_name]['widget'][$delta]['#type'] == 'text_format') {
  
              // Look thru those "text_format" body type fields for any that have
              // limited allowed formats (ONLY 1 ALLOWED FORMAT)...
              if (isset($form[$field_name]['widget'][$delta]['#allowed_formats']) ) {
                if (count($form[$field_name]['widget'][$delta]['#allowed_formats']) == 1) {
  
                  // Compare the applied format to the only allowed format, and if
                  // they do not match, begin the process of syncing them up and
                  // fixing the content.
                  $applied_format = $form[$field_name]['widget'][$delta]['#format'];
                  $allowed_format = $form[$field_name]['widget'][$delta]['#allowed_formats'][0];
                  if ($applied_format != $allowed_format) {
                    $storage = $form_state->getStorage();
                    $langcode = $storage['langcode'];
  
                    // Set the allowed format to the applied format value.
                    $form[$field_name]['widget'][$delta]['#format'] = $allowed_format;
  
                    // Pull the text value, and if the allowed format is plain,
                    // remove any forbidden html tags...
                    $text = $form[$field_name]['widget'][$delta]['#default_value'] ?? '';
                    if ($allowed_format == 'plain_text') {
                      $text = strip_tags($text);
                    }
                    // Apply the allowed format to the text value...
                    $filtered_text = check_markup($text, $allowed_format, $langcode);
                    $filtered_text = is_object($filtered_text) ? $filtered_text->__toString() : $filtered_text;
                    // If the allowed format is plain, we need to clean the text one
                    // more time to clear out any html tags generated from the
                    // filtering.
                    if ($allowed_format == 'plain_text') {
                      $filtered_text = strip_tags($filtered_text);
                    }
  
                    // Reapply the formatted text to the default value. This will
                    // help avoid issues with formatters being broken on body type
                    // fields. This setup only applies to those fields out of sync.
                    // It will not run on body type fields that are already in sync
                    // or have more that 1 allowed format. It is still possible that
                    // a field could be out of sync, but this setup should address
                    // the majority of items.
                    $form[$field_name]['widget'][$delta]['#default_value'] = $filtered_text;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Paragraphs Classic widget.
 */
function sfgov_admin_field_widget_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_agency_sections') {
    $paragraphType = $element['#paragraph_type'];
    
    if ($paragraphType == 'agency_section') {
      $delta = $element['#delta'];
      $selector = "select[name='field_agency_sections[$delta][subform][field_section_title_list]']";

      // display the agency list based on the value of the selected title
      $element['subform']['field_nodes']['#states'] = [
        'visible' => [
          $selector => [
            ['value' => 'Divisions'],
            ['value' => 'Subcommittees']
          ]
        ]
      ];

      $element['subform']['field_agencies']['#states'] = [
        'visible' => [
          $selector => [
            ['value' => 'Divisions'],
            ['value' => 'Subcommittees']
          ]
        ]
      ];
    }
  }

  if ($paragraph_entity_reference_field_name == 'field_cost') {
    /** @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement() */
    $widget_state = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type == 'cost') {

      /*
       * States API implementation on `field_cost_type`.
       *
       * This controls the visibility of fields on the "Cost" paragraph based on
       * the value of the `field_cost_type` field. The location of this
       * Paragraph varies. On "Transactions" nodes it's a field on the node. On
       * "Step by Step" nodes, it's nested in a Paragraph. There is lack of
       * reliable 'class' and id 'attributes', so we're using 'name'. However,
       * there are still differences depending on where it's located. Examples:
       *
       * name="field_cost[0][subform][field_cost_type]"
       * name="field_process_steps[0][subform][field_cost][0][subform][field_cost_type]".
       *
       * Even though the beginning of these is potentially different, the end is
       * reliably the same, so we're using the "ends with" attribute selector.
       */
      $selector = ':input[name$="[subform][field_cost_type]"]';

      if (!empty($element['subform']['field_cost_flat_fee'])) {
        $element['subform']['field_cost_flat_fee']['#states'] = [
          'visible' => [
            $selector => ['value' => 'flat']
          ]
        ];
      }

      if (!empty($element['subform']['field_cost_minimum'])) {
        $element['subform']['field_cost_minimum']['#states'] = [
          'visible' => [
            $selector => [
              ['value' => 'range'],
              ['value' => 'minimum'],
            ]
          ]
        ];
      }

      if (!empty($element['subform']['field_cost_maximum'])) {
        $element['subform']['field_cost_maximum']['#states'] = [
          'visible' => [
            $selector => ['value' => 'range']
          ]
        ];
      }
    }
  }

  // Update the default values for resource collection.
  // See https://sfgovdt.jira.com/browse/SG-1433.
  if ($field_definition->getName() == 'field_data_dashboard' && $field_definition->getTargetBundle() == 'resource_collection') {
    $default_values = [
      'field_desktop_width' => 1000,
      'field_desktop_height' => 220,
      'field_mobile_width' => 360,
      'field_mobile_height' => 660,
    ];

    foreach ($default_values as $field => $value) {
      if (isset($element['subform'][$field])) {
        $element['subform'][$field]['widget'][0]['value']['#default_value'] = $value;
      }
    }
  }

  // Since we are changing some ckeditor settings to the text field of the
  // accordions that make up the getting here content of location nodes, We go
  // ahead and set the new text format to the text field (name = field_text), so
  // that the author doesn't have to update it manually, or see a broken format.
  if ($paragraph_entity_reference_field_name == 'field_getting_here_items') {
    if (isset($element['subform']['field_text'])) {
      $element['subform']['field_text']['widget'][0]['#format'] = 'sf_basic_html_with_restricted_headings';
      $element['subform']['field_text']['widget'][0]['#allowed_formats'][1] = 'sf_basic_html_with_restricted_headings';
    }
  }

  // [SG-1737] - Automatically reassign text formats
  // SEE ALSO: sfgov_admin_form_node_form_alter:83 - This setup applies to
  // embedded paragraphs with body type fields.
  //
  // Go thru every field, searching for "containers" with widgets, and search
  // thru those widgets for any field of a type "text_format"...
  foreach (Element::children($element['subform']) as $field_name) {
    if (array_key_exists('#type', $element['subform'][$field_name])) {
      if (isset($element['subform'][$field_name]['#type']) && $element['subform'][$field_name]['#type'] == 'container') {
        foreach (Element::children($element['subform'][$field_name]['widget']) as $delta) {
          if (array_key_exists('#type', $element['subform'][$field_name]['widget'][$delta])) {
            if ($element['subform'][$field_name]['widget'][$delta]['#type'] == 'text_format') {
  
              // Look thru those "text_format" body type fields for any that have
              // limited allowed formats (ONLY 1 ALLOWED FORMAT)...
              if (isset($element['subform'][$field_name]['widget'][$delta]['#allowed_formats']) ) {
                if (count($element['subform'][$field_name]['widget'][$delta]['#allowed_formats']) == 1) {
  
                  // Compare the applied format to the only allowed format, and if
                  // they do not match, begin the process of syncing them up and
                  // fixing the content.
                  $applied_format = $element['subform'][$field_name]['widget'][$delta]['#format'];
                  $allowed_format = $element['subform'][$field_name]['widget'][$delta]['#allowed_formats'][0];
                  if ($applied_format != $allowed_format) {
                    $storage = $form_state->getStorage();
                    $langcode = $storage['langcode'];
  
                    // Set the allowed format to the applied format value.
                    $element['subform'][$field_name]['widget'][$delta]['#format'] = $allowed_format;
  
                    // Pull the text value, and if the allowed format is plain,
                    // remove any forbidden html tags...
                    $text = $element['subform'][$field_name]['widget'][$delta]['#default_value'] ?? '';
                    if ($allowed_format == 'plain_text') {
                      $text = strip_tags($text);
                    }
  
                    // Apply the allowed format to the text value...
                    $filtered_text = check_markup($text, $allowed_format, $langcode);
                    $filtered_text = is_object($filtered_text) ? $filtered_text->__toString() : $filtered_text;
  
                    // If the allowed format is plain, we need to clean the text one
                    // more time to clear out any html tags generated from the
                    // filtering.
                    if ($allowed_format == 'plain_text') {
                      $filtered_text = strip_tags($filtered_text);
                    }
  
                    // Reapply the formatted text to the default value. This will
                    // help avoid issues with formatters being broken on body type
                    // fields. This setup only applies to those fields out of sync.
                    // It will not run on body type fields that are already in sync
                    // or have more that 1 allowed format. It is still possible that
                    // a field could be out of sync, but this setup should address
                    // the majority of items.
                    $element['subform'][$field_name]['widget'][$delta]['#default_value'] = $filtered_text;
                  }
                }
              }
            }
          }
  
        }
      }
    }
  }

}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Paragraphs Experimental widget.
 */
function sfgov_admin_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // [SG-1737] - Automatically reassign text formats.
  // We apply the same changes to the entity reference widget to this widget.
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the SFGov customizable paragraphs widget.
 */
function sfgov_admin_field_widget_sfgov_customizable_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // [SG-1737] - Automatically reassign text formats.
  // We apply the same changes to the entity reference widget to this widget.
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the SFGov paragraphs widget.
 */
function sfgov_admin_field_widget_sfgov_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // [SG-1809] - update form confirmation page content type
  $parentEntity = $form_state->getFormObject()->getEntity();

  // SG-1809 - remove some paragraph types for the form confirmation page
  // the #disabled key had the incorrect behavior of keeping the button, but breaking the form
  // instead, store, modify, and reassign the add more links
  if($parentEntity->getType() === 'form_confirmation_page') {
    if (array_key_exists('#paragraph_type', $element) && $element['#paragraph_type'] == 'step') {
      $keepOperationsLinks = $element['subform']['field_content']['widget']['add_more']['operations']['#links'];
      unset($keepOperationsLinks['add_more_button_in_person_location']);
      unset($keepOperationsLinks['add_more_button_callout']);
      unset($keepOperationsLinks['add_more_button_email']);
      unset($keepOperationsLinks['add_more_button_phone']);
      $element['subform']['field_content']['widget']['add_more']['operations']['#links'] = $keepOperationsLinks;
    }
  }

  // [SG-1737] - Automatically reassign text formats.
  // We apply the same changes to the entity reference widget to this widget.
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Inline entity form (simple) widget.
 */
function sfgov_admin_field_widget_inline_entity_form_simple_form_alter(&$element, FormStateInterface $form_state, $context) {
  // [SG-1737] - Automatically reassign text formats.
  // We apply the same changes to the entity reference widget to this widget.
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Inline entity form (complex) widget.
 */
function sfgov_admin_field_widget_inline_entity_form_complex_form_alter(&$element, FormStateInterface $form_state, $context) {
  // [SG-1737] - Automatically reassign text formats.
  // We apply the same changes to the entity reference widget to this widget.
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sfgov_admin_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables) {
  // Closed + Preview
  if (!empty($variables['element'][0]['#paragraph_type'])) {
    $suggestions[] = 'field_multiple_value_form__paragraphs';
    $suggestions[] = 'field_multiple_value_form__paragraphs__preview';
  }

  // Closed + Subform
  if (!empty($variables['element'][0]['#entity_type']) && $variables['element'][0]['#entity_type'] == 'paragraph') {
    $suggestions[] = 'field_multiple_value_form__paragraphs';
    $suggestions[] = 'field_multiple_value_form__paragraphs__subform';
  }

  // Checks the widgets against the first AJAX callback to find out type being
  // used.
  if (!empty($variables['element']['add_more'])) {
    $children_count = count(Element::children($variables['element']['add_more']));
    $paragraphs_widgets = [
      'Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget',
      'Drupal\sfgov_admin\Plugin\Field\FieldWidget\SfgovParagraphsWidget',
    ];
    $autocomplete_widgets = [
      'Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget',
    ];

    if ($children_count >= 1) {
      foreach (Element::children($variables['element']['add_more']) as $key => $button) {
        if (!empty($variables['element']['add_more'][$button]['#ajax'])) {
          if (in_array($variables['element']['add_more'][$button]['#ajax']['callback'][0], $paragraphs_widgets)) {
            $suggestions[] = 'field_multiple_value_form__paragraphs';

            if ($children_count == 1) {
              $suggestions[] = 'field_multiple_value_form__paragraphs_single_button';
            }
            else {
              $suggestions[] = 'field_multiple_value_form__paragraphs_multiple_button';
            }
          }
        }
      }
    }

    else {
      if (in_array($variables['element']['add_more']['#ajax']['callback'][0], $autocomplete_widgets)) {
        $suggestions[] = 'field_multiple_value_form__autocomplete';
      }
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function sfgov_admin_preprocess_field_multiple_value_form__autocomplete(&$variables) {
  if ($variables['element']['#field_name'] == 'field_person_2') {
    $variables['button']['#value'] = $variables['element']['#max_delta'] >= 0 ? t('Add another person') : t('Add person');
  }
}

function sfgov_admin_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-content-transactions') { // return if this is not a content view transaction display
    $form['field_direct_external_url_uri_op']['#options'] = [
      'All' => '- Any - ',
      'empty' => 'Yes',
      'not empty' => 'No',
    ];
    $form['field_direct_external_url_uri_op']['#default_value'] = 'All';
    $form['field_direct_external_url_uri_op']['#title'] = 'Has Start Page';
  }

  // If not the view we are looking, move on
  if ($form['#id'] == 'views-exposed-form-media-media-page-list' || $form['#id'] == 'views-exposed-form-entity-browser-file-entity-browser-1') {

    // Query nodes
    $storage_d = \Drupal::entityTypeManager()->getStorage('node');
    $nids_d = $storage_d->getQuery();

    $storage_t = \Drupal::entityTypeManager()->getStorage('node');
    $nids_t = $storage_t->getQuery();

    // Gather published department nodes and sort by title
    $nids_dept = $nids_d->condition('type', 'department')
    ->condition('status', 1)
    ->sort('title')
    ->execute();
    
    // Gather published topic nodes and sort by title
    $nids_topic = $nids_t->condition('type', 'topic')
    ->condition('status', 1)
    ->sort('title')
    ->execute();

    // If there are no nodes, move on
    if ($nids_dept) {
      $options_d = [];
      // Start building out the options for our select list
      $depts = $storage_d->loadMultiple($nids_dept);

      // Push titles into select list
      foreach ($depts as $dept) {
        $options_d[$dept->id()] = $dept->getTitle();
      }

      // Start building out our new form element
      $department_field = 'field_department_target_id';
      $form[$department_field] = [
        '#type' => 'select',
        '#title' => 'Departments',
        '#multiple' => FALSE,
        '#empty_option' => t('- Any -'),
        '#options' => $options_d
      ];
      unset($form[$department_field]['#size']);
    }

    if ($nids_topic) {
      $options_t = [];
      // Start building out the options for our select list
      $topics = $storage_t->loadMultiple($nids_topic);

      // Push titles into select list
      foreach ($topics as $topic) {
        $options_t[$topic->id()] = $topic->getTitle();
      }

      // Start building out our new form element
      $topic_field = 'field_topic_target_id';
      $form[$topic_field] = [
        '#type' => 'select',
        '#title' => 'Topics',
        '#multiple' => FALSE,
        '#empty_option' => t('- Any -'),
        '#options' => $options_t
      ];
      unset($form[$topic_field]['#size']);
    }
  } 
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Disable the designate top level topic checkbox if this topic is a child of another topic
 */
function sfgov_admin_form_node_topic_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $topicId = $form_state->getFormObject()->getEntity()->id();
  $topicNids = \Drupal::entityQuery('node')->condition('type','topic')->execute();
  $topicNodes = \Drupal\node\Entity\Node::loadMultiple($topicNids);
  $childTopics = null;
  $foundAsChild = false;
  $parentTopics = [];
  foreach ($topicNodes as $topicNode) {
    $childTopics = $topicNode->get('field_topics');
    foreach ($childTopics->getValue() as $childTopic) {
      $childTopicId = $childTopic['target_id'];
      if ($childTopicId == $topicId) {
        $foundAsChild = true;
        $parentTopics[] = $topicNode->getTitle();
        break;
      }
    }
  }
  if ($foundAsChild) {
    $form['field_top_level_topic']['widget']['value']['#description'] = t('This Topic cannot be top level because it is a child topic of the following: ' . implode(', ', $parentTopics));
    $form['field_top_level_topic']['widget']['value']['#attributes']['disabled'] = 'disabled';
  }
}

/**
 * Implements hook_preprocess_file_upload_help().
 */
function sfgov_admin_preprocess_file_upload_help(&$variables) {

  // Remove all help text except for the user-entered description.
  $variables['descriptions'] = $variables['description'];

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sfgov_admin_form_content_moderation_entity_moderation_form_alter(&$form, $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $revision */
  $revision = $form_state->get('entity');
  if (empty($revision)) return;
  if ($revision->getEntityTypeId() == 'node') {
    // Base node for the revision.
    /** @var \Drupal\node\NodeInterface $node */
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($revision->id());

    // We also treat the latest translation-affecting revision as the current
    // revision, if it was the default revision, as its values for the
    // current language will be the same of the current default revision in
    // this case.
    $current_revision_displayed = FALSE;
    $is_current_revision = $revision->getRevisionId() == $node->getRevisionId() || (!$current_revision_displayed && $revision->wasDefaultRevision());
    if (!$is_current_revision) {
      $node_url = new Url('entity.node.revision', ['node' => $node->id(), 'node_revision' => $revision->getRevisionId()]);
    }
    else {
      $node_url = $node->toUrl();
      $current_revision_displayed = TRUE;
    }

    $current_state = $form['current']['#markup'];
    $classes = [
      'form-item-current-state',
      'form-item-current-state--' .  Html::cleanCssIdentifier(strtolower($current_state)),
    ];

    // Send properties to the entity-moderation-form.html.twig template.
    $form['#node'] = $node;
    $form['#node_revision'] = $revision;
    $form['#current_state'] = $current_state;
    // Note: Can't use toString() in the template.
    $form['#node_url'] = $node_url->toString();

    // Alter form elements.
    $form['current']['#title'] = t('Current state');
    $form['current']['#markup'] = '<div class="' . implode(' ', $classes) . '">' . $current_state . '</div>';
    $form['revision_log']['#title'] = t('Add a revision note');
    $form['revision_log']['#placeholder'] = t('Log message');
    $form['revision_log']['#size'] = NULL;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function sfgov_admin_views_pre_view(ViewExecutable $view) {
  if ($view->id() == 'content' && $view->current_display != 'translations') {
    // Set english as default langcode for admin content list.
    $filters = $view->getDisplay()->getOption('filters');
    $filters["langcode"]["value"] = ["en"];
    $view->display_handler->overrideOption('filters', $filters);
  }
}

/**
 * Implements hook_views_query_alter
 */
function sfgov_admin_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // the admin content view
  if ($view->id() == 'content' && $view->current_display == 'page_1') {
    $relatedDepartmentFilterValue = '';

    // get the exposed filter value for related department
    foreach ($query->where as $conditionGroup) {
      foreach ($conditionGroup['conditions'] as $condition) {
        if ($condition['field'] == 'node__field_departments.field_departments_target_id') {
          $relatedDepartmentFilterValue = $condition['value'][0];
          break;
        }
      }
    }

    // add a condition to also include the related department filter value in the results
    if (!empty($relatedDepartmentFilterValue)) {
      $query->addWhere(count($query->where)+1, '"node_field_data"."nid"', $relatedDepartmentFilterValue, '=');
    }
  }

  // the meetings blocks past and and upcoming meetings generate a more link based on the contextual filter ids
  // if there are multiple ids, the more link isn't formed correctly and the more links will error out
  // adding an additional contextual filter will default the where conditions to 'AND'
  // we need to change the contextual filter type to use 'OR' so the query will use the first argument for the more link
  // and the second argument for retrieving relevant meetings
  if ($view->id() == 'meetings' && ($view->current_display == 'block_past' || $view->current_display == 'block_upcoming')) {
    $query->where[0]['type'] = 'OR';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sfgov_admin_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Disable Available menus setting.
  $form['menu']['menu_options']['#default_value'] = [];
  $form['menu']['menu_options']['#description'] = t('<i>This option is disabled in code.</i>');
  $form['menu']['#disabled'] = TRUE;

  // SG-1870 -- Convert the content type submission help text into the title description.
  $form['submission']['help']['#title'] = t('Title description/help text.');
  $form['submission']['help']['#description'] = t('This text will be output in the description area of the title field.');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function sfgov_admin_form_entity_form_display_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Prevent sticky and promote fields from being modified.
  $fields = ['sticky', 'promote'];
  $notice = t('<i class="field-plugin-summary">This option is disabled in code.</i>');
  foreach ($fields as $field) {
    $form['fields'][$field]['#attributes']['class'] = [];
    $form['fields'][$field]['weight']['#access'] = FALSE;
    $form['fields'][$field]['parent_wrapper']['#access'] = FALSE;
    $form['fields'][$field]['region']['#access'] = FALSE;
    $form['fields'][$field]['plugin']['type']['#disabled'] = TRUE;
    $form['fields'][$field]['plugin']['type']['#suffix'] = $notice;
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function sfgov_admin_toolbar_alter(&$items) {

  // Add the Node ID and link to edit page to the toolbar for those that have access.
  $nid = \Drupal::routeMatch()->getRawParameter('node');

  if (is_numeric($nid)) {

    $node_edit_url = Url::fromRoute('entity.node.edit_form', ['node' => $nid]);

    if ($node_edit_url->access() == TRUE) {
      $items['node'] = [
        '#type' => 'toolbar_item',
        'tab' => [
          '#type' => 'link',
          '#url' => $node_edit_url,
          '#title' => t('NID: %nid', ['%nid' => $nid]),
        ],
        '#wrapper_attributes' => ['class' => 'user-toolbar-tab'],

      ];
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function sfgov_admin_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface $cacheability) {

  // Remove the Files tab from the Content administration page.
  unset($data['tabs'][0]['views_view:view.files.page_1']);
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function sfgov_admin_menu_links_discovered_alter(&$links) {

  // Remove the Files tab from the Content administration page.
  unset($links['admin_toolbar_tools.extra_links:view.files']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sfgov_admin_form_node_public_body_edit_form_alter(&$form, FormStateInterface $form_state) {
  // [SG-1748]
  // Set the Meeting Archive date field to required if url is filled.
  $form['field_meeting_archive_date']['widget'][0]['value']['#states'] = [
    'required' => [
      ':input[name="field_meeting_archive_url[0][uri]"]' => ['filled' => TRUE]
    ],
  ];

  $form['#validate'][] = '_sfgov_admin_public_body_node_meeting_archive_url_and_date_form_validate';
}

/**
 * Validates submission values in the FORM_ID() form.
 */
function _sfgov_admin_public_body_node_meeting_archive_url_and_date_form_validate($form, FormStateInterface $form_state) {
  // [SG-1748]
  // This validation handler ensures that if a meeting archive url is set, then
  // the meeting archive date must also be set.
  $values = $form_state->getValues();
  if (!empty($values['field_meeting_archive_url'][0]['uri'])) {
    if (empty($values['field_meeting_archive_date'][0]['value'])) {
      $form_state->setErrorByName("field_meeting_archive_date[0][value][date]", t('Meeting archive date is required if a meeting archive URL is set.'));
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function sfgov_admin_library_info_alter(array &$libraries, $extension) {
  if ($extension === 'maxlength') {
    $libraries['maxlength']['js'] = [];
  }
}

/**
 * Implements hook_link_attributes_plugin_alter().
 */
function sfgov_admin_link_attributes_plugin_alter(array &$plugins) {
  // Set a default value for the target attribute.
  $plugins['aria-label']['title'] = t('Button text for screenreaders (ARIA label)');
  $plugins['aria-label']['description'] = t('ARIA labels are read by screenreaders, but do not show. ARIA labels use button text + title by default, unless you add custom text.');
}
