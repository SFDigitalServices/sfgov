<?php

use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function sfgov_admin_theme($existing, $type, $theme, $path) {
  return array(
    'field_multiple_value_form__paragraphs' => [
      'base hook' => 'field_multiple_value_form',
    ],
    'field_multiple_value_form__autocomplete' => [
      'base hook' => 'field_multiple_value_form',
    ],
  );
}

/**
 * Implements hook_page_attachments().
 */
function sfgov_admin_page_attachments(array &$page) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $route */
  $route = \Drupal::routeMatch()->getRouteObject();
  /** @var \Drupal\Core\Routing\AdminContext $is_admin */
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  if ($is_admin) {
    $page['#attached']['library'][] = 'sfgov_admin/admin';
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Paragraphs Classic widget.
 */
function sfgov_admin_field_widget_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $paragraph_entity_reference_field_name = $field_definition->getName();

  if ($paragraph_entity_reference_field_name == 'field_cost') {
    /** @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement() */
    $widget_state = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $paragraph_entity_reference_field_name, $form_state);
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph_instance = $widget_state['paragraphs'][$element['#delta']]['entity'];
    $paragraph_type = $paragraph_instance->bundle();

    if ($paragraph_type == 'cost') {
      $dependee_field_name = 'field_cost_type';
      $selector = sprintf(':input[name="%s[%d][subform][%s]"]', $paragraph_entity_reference_field_name, $element['#delta'], $dependee_field_name);

      if (!empty($element['subform']['field_cost_flat_fee'])) {
        $element['subform']['field_cost_flat_fee']['#states'] = [
          'visible' => [
            $selector => ['value' => 'flat']
          ]
        ];
      }

      if (!empty($element['subform']['field_cost_minimum'])) {
        $element['subform']['field_cost_minimum']['#states'] = [
          'visible' => [
            $selector => [
              ['value' => 'range'],
              ['value' => 'minimum'],
            ]
          ]
        ];
      }

      if (!empty($element['subform']['field_cost_maximum'])) {
        $element['subform']['field_cost_maximum']['#states'] = [
          'visible' => [
            $selector => ['value' => 'range']
          ]
        ];
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Alters the Paragraphs Experimental widget.
 */
function sfgov_admin_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  return sfgov_admin_field_widget_entity_reference_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_preprocess_form_element().
 */
function sfgov_admin_preprocess_form_element(&$variables) {
  // Make sure attributes is pluggable.
  $variables['attributes'] = empty($variables['attributes']) ? new Attribute() : new Attribute($variables['attributes']);

  if (isset($variables['element']['#maxlength_js'])) {
    $variables['attributes']->addClass('form-type-maxlength');
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sfgov_admin_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables) {
  // Closed + Preview
  if (!empty($variables['element'][0]['#paragraph_type'])) {
    $suggestions[] = 'field_multiple_value_form__paragraphs';
    $suggestions[] = 'field_multiple_value_form__paragraphs__preview';
  }

  // Closed + Subform
  if (!empty($variables['element'][0]['#entity_type']) && $variables['element'][0]['#entity_type'] == 'paragraph') {
    $suggestions[] = 'field_multiple_value_form__paragraphs';
    $suggestions[] = 'field_multiple_value_form__paragraphs__subform';
  }

  // Checks the widgets against the first AJAX callback to find out type being
  // used.
  if (!empty($variables['element']['add_more'])) {
    $children_count = count(Element::children($variables['element']['add_more']));
    $paragraphs_widgets = [
      'Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget',
      'Drupal\sfgov_admin\Plugin\Field\FieldWidget\SfgovParagraphsWidget',
    ];
    $autocomplete_widgets = [
      'Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget',
    ];

    if ($children_count >= 1) {
      foreach (Element::children($variables['element']['add_more']) as $key => $button) {
        if (!empty($variables['element']['add_more'][$button]['#ajax'])) {
          if (in_array($variables['element']['add_more'][$button]['#ajax']['callback'][0], $paragraphs_widgets)) {
            $suggestions[] = 'field_multiple_value_form__paragraphs';

            if ($children_count == 1) {
              $suggestions[] = 'field_multiple_value_form__paragraphs_single_button';
            }
            else {
              $suggestions[] = 'field_multiple_value_form__paragraphs_multiple_button';
            }
          }
        }
      }
    }

    else {
      if (in_array($variables['element']['add_more']['#ajax']['callback'][0], $autocomplete_widgets)) {
        $suggestions[] = 'field_multiple_value_form__autocomplete';
      }
    }
  }
}

