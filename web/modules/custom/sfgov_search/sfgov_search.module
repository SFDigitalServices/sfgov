<?php

/**
 * Implements hook_theme().
 */
function sfgov_search_theme() {
  return [
    'google_search' => [
      'variables' => [
        'title' => '',
        'search_id' => '',
        'form' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_pager().
 */
function sfgov_search_preprocess_pager(&$variables) {
  // Original pager code provided by the google_json_api module is broken
  // because the pager itself starts at 1, but the API results are zero-based.
  $path = \Drupal::routeMatch()->getRouteName();
  if ($path === 'search.view_google_json_api_search') {
    // Add one to the pager total to account for the zero-based API results.
    $page_total = $variables['pager']['#quantity'] + 1;
    $pointer = $variables['current'];
    // Generate the pager range where the current page is in the middle.
    $range = _get_pager_range($pointer, $page_total);

    $query_params = [];
    $query_url = reset($variables['items']['pages'])['href'];
    // Delete the previous pages list because it doesn't assemble correctly.
    $variables['items']['pages'] = [];

    // // Parse the query string into an associative array
    parse_str(parse_url($query_url, PHP_URL_QUERY), $query_params);

    // Build out a new set of links.
    for ($i=reset($range); $i <= end($range) ; $i++) {
      // Subtract one from the page number to make it zero-based.
      $query_params['page'] = $i - 1;
      $variables['items']['pages'][$i] = [
        'href' => 'google?' . http_build_query($query_params),
        'attributes' => [],
      ];
    }
  }

  // Edit ellipses variable to line up with the existing template.
  if ($variables['current'] > 1) {
    $variables['ellipses']['previous'] = TRUE;
  }
  if ($variables['current'] < $page_total) {
    $variables['ellipses']['next'] = TRUE;
  }
}

/**
 * Helper function to generate a pager range.
 */
function _get_pager_range($pointer, $total) {
  $pointer = max(1, min($pointer, $total));
  $total = max(1, $total);
  $result = [];

  $start = max(1, $pointer - 2);
  $end = min($total, $pointer + 2);

  while (($end - $start + 1) < 5) {
    if ($end < $total) {
        $end++;
    } elseif ($start > 1) {
        $start--;
    }
  }

  // Generate the array
  for ($i = $start; $i <= $end; $i++) {
    $result[] = $i;
  }

  return $result;
}
