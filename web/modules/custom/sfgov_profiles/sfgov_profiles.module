<?php

use Drupal\sfgov_profiles\Profiles;
use Drupal\Core\Cache\Cache;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sfgov_profiles_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'public_body_profiles') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && $node->bundle() != 'public_body') {
      $element['subform']['field_commission_position']['#access'] = FALSE;
      $element['subform']['field_position_type']['#access'] = FALSE;
      $element['subform']['field_ending_year']['#access'] = FALSE;
      $element['subform']['field_starting_year']['#access'] = FALSE;
    }
    $element['subform']['field_profile']['widget']['#title'] = '';
    // For multiple profiles target parent and delta values
    $parent = $element['subform']['#parents'][1];
    $delta = $element['subform']['#parents'][4];
    $input_filter = ':input[name*="field_board_members[' . $parent . '][subform][field_profiles][' . $delta . '][subform][field_position_type]"]';
    $element['subform']['field_starting_year']['#states'] = [
      'visible' => [
        [$input_filter => ['value' => 'Appointed']],
        [$input_filter => ['value' => 'Elected']],
      ],
    ];
    $element['subform']['field_ending_year']['#states'] = [
      'visible' => [
        [$input_filter => ['value' => 'Appointed']],
        [$input_filter => ['value' => 'Elected']],
      ],
    ];

    // Hide redundant title/label
    $element['top']['paragraph_type_title']['info']['#markup'] = '';
  }
}

/**
 * Implements hook_entity_presave().
 */
function sfgov_profiles_entity_presave($entity) {
  // When a profile node is added to a public body, break the cache of the
  // corresponding profile node so that it can reload template data for
  // display purposes.
  if ($entity->bundle() === 'public_body_profiles') {
    $targetId = $entity->get('field_profile')->target_id;
    if (!empty($targetId)) {
      $profile_node = \Drupal::entityTypeManager()->getStorage('node')->load($entity->get('field_profile')->target_id);
      if ($entity->isNew()) {
        Cache::invalidateTags($profile_node->getCacheTags());
      }
      elseif ($entity->get('field_profile')->target_id != $entity->get('field_profile')->target_id) {
        Cache::invalidateTags($profile_node->getCacheTags());
      }
    }
  }
}

/**
 * Implements hook_node_insert()
 * need to implement this hook for newly created nodes, otherwise, there is no node id, which we need for later reference
 */
function sfgov_profiles_node_insert($node) {
  node_update($node);
}

/**
 * Implements hook_node_update()
 */
function sfgov_profiles_node_update($node) {
  node_update($node);
}

/**
 * Implements hook_entity_update()
 */
function sfgov_profiles_paragraph_update($paragraph) {
  assignPositionToProfile($paragraph);
}

/**
 * Implements hook_entity_insert()
 */
function sfgov_profiles_paragraph_insert($paragraph) {
  assignPositionToProfile($paragraph);
}

// helper method to handle first level node field changes, eg removing an entire profile group
function node_update ($node) {
  $bundlesWithProfileGroups = [
    'public_body' => [
      'field_name' => 'field_board_members',
    ],
    'department' => [
      'field_name' => 'field_people'
    ]
  ];

  if (array_key_exists($node->bundle(), $bundlesWithProfileGroups)) {
    $bundle = $node->bundle();
    $fieldName = $bundlesWithProfileGroups[$bundle]['field_name'];

    $updatedProfileGroups = $node->get($fieldName)->getValue(); // get updated profile groups
    $ogProfileGroups = !empty($node->original) ? $node->original->get($fieldName)->getValue() : []; // get original profile groups

    if (!empty($ogProfileGroups)) {
      // check for removals of an entire profile group
      $removedParagraphs = array_diff(array_column($ogProfileGroups, 'target_id'), array_column($updatedProfileGroups, 'target_id'));

      // iterate removed target_id
      foreach ($removedParagraphs as $rp) {

        // load original profile group and profiles
        $removedParagraph = Paragraph::load($rp);
        $removedProfileGroupProfiles = $removedParagraph->get('field_profiles')->getValue();

        // remove position from profile
        foreach ($removedProfileGroupProfiles as $rpgp) {
          $removedPosition = Paragraph::load($rpgp['target_id']);
          updateProfileNode([
            'paragraphId' => $removedPosition->id(),
            'profileNid' => $removedPosition->field_profile->target_id,
            'agencyNid' => $node->id(),
            'title' => $removedPosition->field_commission_position->value,
            'type' => $removedPosition->field_position_type->value,
            'start' => $removedPosition->field_starting_year->value,
            'end' => $removedPosition->field_ending_year->value
          ], true);
        }
      }
    } else { // no original profile groups, this is a newly created node
      foreach ($updatedProfileGroups as $pg) {
        $profileGroup = Paragraph::load($pg['target_id']);
        assignPositionToProfile($profileGroup);
      }
    }
  }
}

function assignPositionToProfile($paragraph) {
  if ($paragraph->bundle() == 'profile_group') {
    $node = $paragraph->getParentEntity();

    if (empty($node)) {
      return;
    }

    $ogProfilePositions = $paragraph->original ? getPositions($node->id(), $paragraph->original->get('field_profiles')->referencedEntities()) : [];
    $updatedProfilePositions = getPositions($node->id(), $paragraph->get('field_profiles')->getValue());

    // check for removal
    if (count($ogProfilePositions) > count($updatedProfilePositions)) {
      $removeParagraphIds = array_diff(array_column($ogProfilePositions, 'paragraphId'), array_column($updatedProfilePositions, 'paragraphId'));

      foreach ($removeParagraphIds as $removedParagraphId) {
        $paragraphIds = array_column($ogProfilePositions, 'paragraphId');
        $removedIndex = array_search($removedParagraphId, $paragraphIds);
        updateProfileNode($ogProfilePositions[$removedIndex], true);
      }
    } else {
      foreach($updatedProfilePositions as $updatedProfilePosition) {
        updateProfileNode($updatedProfilePosition);
      }
    }
  }
}

function getPositions($agencyId, $profiles) {
  $positions = [];

  foreach($profiles as $p) {
    $profilePosition = is_object($p) ? $p : Paragraph::load($p['target_id']);
    $positions[] = [
      'paragraphId' => $profilePosition->id(),
      'profileNid' => $profilePosition->field_profile->target_id,
      'agencyNid' => $agencyId,
      'title' => $profilePosition->field_commission_position->value,
      'type' => $profilePosition->field_position_type->value,
      'start' => $profilePosition->field_starting_year->value,
      'end' => $profilePosition->field_ending_year->value
    ];
  }

  return $positions;
}

function sortProfilePositions($positions) {
  usort($positions, function ($a, $b) {
    if (!empty($a['target_id'] && !empty($b['target_id']))) {
      return strtotime(Paragraph::load($a['target_id'])->field_starting_year->value) - strtotime(Paragraph::load($b['target_id'])->field_starting_year->value);
    }
  });

  return $positions;
}

function updateProfileNode($position, $removed = false) {
  // load profile node
  if (!empty($position['profileNid'])) {
    $profile = Node::load($position['profileNid']);

    if (!$profile) {
      return;
    }

    $positionsHeld = $profile->get('field_profile_positions_held')->getValue();
    $positionExists = false;
    $positionHeld = null;
    $positionIndex = 0;

    // search the positions held to see if the position already exists
    // by checking against paragraph id
    foreach($positionsHeld as $p) {
      $positionHeld = Paragraph::load($p['target_id']);
      if ($position['paragraphId'] == $positionHeld->field_title->value) {
        $positionExists = true;
        break;
      } else {
        $positionIndex++;
      }
    }

    if ($positionExists == true) {
      if ($removed == true) {
        $profile->get('field_profile_positions_held')->removeItem($positionIndex);
      } else { // update
        $positionHeld->field_department->target_id = $position['agencyNid'];
        $positionHeld->field_commission_position->value = $position['title'];
        $positionHeld->field_position_type->value = $position['type'];
        $positionHeld->field_starting_year->value = $position['start'];
        $positionHeld->field_ending_year->value = $position['end'];
        $positionHeld->save();
      }
    } else { // create new, add as position held item
      $profile->get('field_profile_positions_held')->appendItem(
        Paragraph::create([
          'type' => 'public_body_profiles',
          'field_title' => $position['paragraphId'], // keep the paragraph id as a reference to know which position held to update (if updating)
          'field_department' => $position['agencyNid'],
          'field_commission_position' => $position['title'],
          'field_position_type' => $position['type'],
          'field_starting_year' => $position['start'],
          'field_ending_year' => $position['end'],
        ])
      );
    }

    $profile->save();

    // sort the positions
    $positions = $profile->get('field_profile_positions_held')->getValue();
    $profile->set('field_profile_positions_held', sortProfilePositions($positions));
    $profile->save();
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function sfgov_profiles_field_widget_paragraphs_form_alter(&$element, $form_state, $context) {
  $parentEntity = $form_state->getFormObject()->getEntity();

  if ($parentEntity->getEntityTypeId() === 'node' && $parentEntity->getType() === 'person') {
    $currentUser = \Drupal::currentUser();
    $userRoles = $currentUser->getRoles();

    if ($element['#paragraph_type'] == 'public_body_profiles') {
      // get field_ keys
      $keys = array_keys($element['subform']);
      $fieldKeys = preg_grep("/^field_/", $keys);

      // rename edit button
      $element['top']['actions']['actions']['edit_button']['#value'] = t('View');

      // re-label profiles to position
      $element['top']['type']['label']['#markup'] = str_replace('Profiles', t('Position'), $element['top']['type']['label']['#markup']);

      // disable duplicate and remove buttons
      $element['top']['actions']['dropdown_actions']['duplicate_button']['#disabled'] = true;

      // disable removal for non-admin or non-ds roles mainly for debugging
      // saving an agency with profile groups will repopulate the positions held if positions exist for the profile
      if (!in_array('administrator', $userRoles) && !in_array('digital_services', $userRoles)) {
        $element['top']['actions']['dropdown_actions']['remove_button']['#disabled'] = true;
      }

      // add link to edit agency
      if(array_key_exists('field_department', $element['subform'])) {
        $agency = $element['subform']['field_department']['widget'][0]['target_id']['#default_value'];
        $element['subform']['field_department']['widget'][0]['target_id']['#title']
          .= ' <a href="' . $agency->toUrl('canonical', ['absolute' => true])->toString() . '">Click to edit</a>';
      }

      // disable inputs
      foreach($fieldKeys as $fieldKey) {
        $element['subform'][$fieldKey]['#disabled'] = true;
      }

      $element['subform']['field_title']['#attributes']['class'][] = 'visually-hidden';
    }

    if ($element['#paragraph_type'] == 'social_media') {
      // Hide mastadon field from social_media paragraphs on people profiles.
      $element['subform']['field_mastodon']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().
 */
function sfgov_profiles_field_widget_multivalue_form_alter(&$element, $form_state, $context) {
  // edit some button text
  if(array_key_exists('#field_name', $element) && $element['#field_name'] == 'field_profile_positions_held') {

    // re-label buttons
    if(array_key_exists('header_actions', $element) && array_key_exists('actions', $element['header_actions'])) {
      $element['header_actions']['actions']['edit_all']['#value'] = t('View all');
    }

    // disable and hide the add more button
    $element['add_more']['#disabled'] = true;
    $element['add_more']['#attributes']['class'][] = 'visually-hidden';
    $element['add_more']['#suffix'] = '';
  }
}
