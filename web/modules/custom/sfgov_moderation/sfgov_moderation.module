<?php

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\sfgov_moderation\ModerationUtilServiceInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function sfgov_moderation_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {

    $fields['reviewer'] = BaseFieldDefinition::create('entity_reference')
      ->setName('reviewer')
      ->setLabel(t('Reviewer'))
      ->setDescription(t('Assign a user as a reviewer.'))
      ->setSetting('target_type', 'user')
      ->setSetting('handler', 'default')
      ->setDefaultValue(NULL)
      ->setRevisionable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'options_select',
        'weight' => 100,
      ])
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ])
      ->setDisplayConfigurable('form', FALSE)
      ->setDisplayConfigurable('view', FALSE);

    return $fields;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * BASE_FORM_ID: node_form.
 */
function sfgov_moderation_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\sfgov_moderation\ModerationUtilServiceInterface $moderationUtil */
  $moderationUtil = \Drupal::service('sfgov_moderation.util');

  $fieldName = $moderationUtil->getDepartmentFieldName($node->bundle());
  if (empty($form['reviewer']) || empty($fieldName) || empty($form[$fieldName])) {
    return;
  }

  $moderation_info = \Drupal::service('content_moderation.moderation_information');
  $entity_type = \Drupal::entityTypeManager()->getDefinition('node');

  // If bundle is moderated.
  if ($moderation_info->shouldModerateEntitiesOfBundle($entity_type, $node->bundle())) {

    // Custom validation callback.
    $form['#validate'][] = '_sfgov_moderation_form_node_form_validate';

    // Move "reviewer" field to the footer region, if available.
    if (isset($form['footer'])) {
      $form['reviewer']['#group'] = 'footer';
    }

    // Only show "reviewer" field if a department has been selected.
    $form['reviewer']['widget']['#states'] = [
      'visible' => [
        ':input[name="' . $fieldName .'[0][target_id]"]' => ['filled' => TRUE],
      ],
    ];

    // Change field type to textfield to allow custom autocomplete widget.
    $departmentIds = $form_state->isRebuilding() ?
      array_column($form_state->getValue($fieldName, []), 'target_id') :
      array_column($node->get($fieldName)->getValue(), 'target_id');

    $form['reviewer']['widget']['#options'] = _sfgov_moderation_reviewer_options($departmentIds, $form['reviewer']['widget']['#default_value']);
    $form['reviewer']['widget']['#prefix'] = '<div id="node-reviewer-wrapper">';
    $form['reviewer']['widget']['#suffix'] = '</div>';

    // Add ajax callback to departments field autocomplete widgets.
    foreach (Element::children($form[$fieldName]['widget']) as $key) {
      if (!is_numeric($key)) {
        continue;
      }

      $form[$fieldName]['widget'][$key]['target_id']['#ajax'] = [
        'callback' => '_sfgov_moderation_departments_callback',
        'event' => 'autocompleteclose change',
      ];
    }
  }

  // If bundle is not moderated, disable "reviewer" field.
  else {
    $form['reviewer']['#access'] = FALSE;
  }
}

/**
 * Validation callback for the node form.
 */
function _sfgov_moderation_form_node_form_validate(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\sfgov_moderation\ModerationUtilServiceInterface $moderationUtil */
  $moderationUtil = \Drupal::service('sfgov_moderation.util');

  // Reviewer should not be the same as the node author.
  $reviewer = $form_state->getValue('reviewer');
  if (!empty($reviewer[0]['target_id']) && $reviewer[0]['target_id'] == $node->getOwnerId()) {
    $form_state->setErrorByName('reviewer', t('Reviewer should be a different user than the author.'));
  }

  // Reviewer should belong to the tagged departments.
  $departmentField = $moderationUtil->getDepartmentFieldName($node->bundle());
  $departmentIds = array_column($form_state->getValue($departmentField, []), 'target_id');
  if ($departmentField &&
    !empty($reviewer[0]['target_id']) &&
    $departmentIds) {
    $validReviewers = \Drupal::service('sfgov_moderation.util')->getValidReviewers($departmentIds);
    if (!in_array($reviewer[0]['target_id'], $validReviewers)) {
      $form_state->setErrorByName('reviewer', t('Reviewer should belong to the departments.'));
    }
  }


  // Require selecting a reviewer if departments are tagged in form.
  if (empty($reviewer[0]['target_id']) && !empty($departmentIds)) {
    $currentUser = \Drupal::currentUser();
    $toState = $form_state->getValue('moderation_state')[0]['value'];

    if (
      // State "ready_for_review" always requires selecting a reviewer.
      $toState == 'ready_for_review' ||
      // Only publishers belonging to a node's departments can publish without selecting a reviewer.
      ($toState == 'publish' && !$moderationUtil->canPublishFromDraftWithoutReviewer($currentUser, $departmentIds))
    ) {
      $form_state->setErrorByName('reviewer', t('A reviewer is required to change the moderation status.'));
    }
  }
}

/**
 * Ajax callback whenever the department field changes.
 */
function _sfgov_moderation_departments_callback(&$form, $form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('#node-reviewer-wrapper', $form['reviewer']['widget']));

  return $response;
}

/**
 * Get users that can serve as reviewers.
 *
 * The users need to belong to the given departments.
 *
 * @param array $department_ids
 *   The department node IDs.
 * @param null $default_value
 *   The select list default value. It could need to be changed/nulled to avoid
 *   an "invalid value" warning.
 *
 * @return array
 *   The list of reviewers keyed by UID, grouped by department.
 */
function _sfgov_moderation_reviewer_options($department_ids = [], &$default_value = NULL) {
  $empty = [
    '_none' => t('- None -'),
  ];

  $ids = \Drupal::service('sfgov_moderation.util')->getValidReviewers($department_ids);

  if (empty($ids)) {
    return $empty;
  }

  $userStorage = \Drupal::entityTypeManager()->getStorage('user');
  $users = $ids ? $userStorage->loadMultiple($ids) : [];
  $default_value = in_array($default_value, $ids) ? $default_value : NULL;
  $options = $empty;

  foreach ($users as $user) {
    foreach ($user->{ModerationUtilServiceInterface::DEPARTMENTS_ACCOUNT_FIELD}->referencedEntities() as $department) {
      $options[$department->label() . ' ' . t('department')][$user->id()] = t('%username', [
        '%username' => $user->label(),
      ]);
    }
  }

  return $options;
}
