<?php

use Drupal\taxonomy\Entity\Term;

/**
 * Add Campaign theme terms.
 */
function sfgov_utilities_update_8702() {
  $themes = [
    ['name' => 'Black', 'primary' => '#212123', 'accent_l1' => '#F8F8F8', 'accent_l2' => '#F1F1F1'],
    ['name' => 'Gold', 'primary' => '#F4C435', 'accent_l1' => '#F8F1DF', 'accent_l2' => '#F9E3A3'],
    ['name' => 'Green', 'primary' => '#00896D', 'accent_l1' => '#E9F7EC', 'accent_l2' => '#C0E2C5'],
    ['name' => 'Blue', 'primary' => '#A9D6EA', 'accent_l1' => '#EDF4F7', 'accent_l2' => '#A9D6EA'],
    ['name' => 'Purple', 'primary' => '#7D61B3', 'accent_l1' => '#EDEBF6', 'accent_l2' => '#CCCCED'],
    ['name' => 'Red', 'primary' => '#C9563A', 'accent_l1' => '#F5E9E5', 'accent_l2' => '#EFCABB'],
  ];

  foreach ($themes as $theme) {
    Term::create([
      'name' => $theme['name'],
      'vid' => 'campaign_theme',
      'field_primary_color' => [
        'color' => $theme['primary']
      ],
      'field_accent_l1' => [
        'color' => $theme['accent_l1']
      ],
      'field_accent_l2' => [
        'color' => $theme['accent_l2']
      ]
    ])->save();
  }
}

/**
 * Update Campaign theme name from Gold to Yellow.
 */
function sfgov_utilities_update_8703() {
  $connection = \Drupal\Core\Database\Database::getConnection();

  $tid = $connection->select('taxonomy_term_field_data', 't')
    ->fields('t', ['tid'])
    ->condition('t.name', 'Gold')
    ->condition('t.vid', 'campaign_theme')
    ->execute()
    ->fetchField();

  if ($tid) {
    foreach (['taxonomy_term_field_data', 'taxonomy_term_field_revision'] as $table) {
      $connection->update($table)
        ->fields([
          'name' => 'Yellow',
        ])
        ->condition('tid', $tid)
        ->execute();
      }
  }
}

/**
 * Add path aliases for department news pages.
 */
function sfgov_utilities_update_8704() {
  $connection = \Drupal\Core\Database\Database::getConnection();

  // Retrieve department nodes.
  $nids = $connection->select('node_field_data', 'n')
    ->fields('n', ['nid'])
    ->condition('n.type', 'department')
    ->condition('n.status', 1)
    ->condition('n.langcode', 'en')
    ->execute()
    ->fetchAllAssoc('nid');

  if ($nids) {
    foreach ($nids as $nid) {
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid->nid);
      // Retrieve only department name part from alias.
      $position = strrpos($alias, '/');
      $department_alias = $position === FALSE ? $alias : substr($alias, $position + 1);

      // Add new alias to the database for the news page redirect.
      $path_alias = \Drupal\path_alias\Entity\PathAlias::create([
        'path' => '/news/' . $nid->nid,
        'alias' => '/news/' . $department_alias,
        'langcode' => 'en',
      ]);
      $path_alias->save();
    }
  }

}

/**
 * Add path aliases for topic news pages.
 */
function sfgov_utilities_update_8705() {
  $connection = \Drupal\Core\Database\Database::getConnection();

  // Retrieve topic nodes.
  $nids = $connection->select('node_field_data', 'n')
    ->fields('n', ['nid'])
    ->condition('n.type', 'topic')
    ->condition('n.status', 1)
    ->condition('n.langcode', 'en')
    ->execute()
    ->fetchAllAssoc('nid');

  if ($nids) {
    foreach ($nids as $nid) {
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $nid->nid);
      // Retrieve only topic name part from alias.
      $position = strrpos($alias, '/');
      $topic_alias = $position === FALSE ? $alias : substr($alias, $position + 1);

      // Add new alias to the database for the news page redirect.
      $path_alias = \Drupal\path_alias\Entity\PathAlias::create([
        'path' => '/news/topics/' . $nid->nid,
        'alias' => '/news/topics/' . $topic_alias,
        'langcode' => 'en',
      ]);
      $path_alias->save();
    }
  }

}

/**
 * Remove translations of field_process_step_type.
 */
function sfgov_utilities_update_8706() {
  // Find all of the process_step paragraphs.
  $paragraph_ids = \Drupal::entityQuery('paragraph')
    ->condition('type','process_step')
    ->condition('langcode', ['zh-hant', 'fil', 'es'], 'IN')
    ->execute();

  // Find the field and temporarily switch its value so that it can successfully
  // resave and get rid of the translation.
  $process_step_paragraphs = \Drupal::entityTypeManager()->getStorage('paragraph')->loadMultiple($paragraph_ids);
  foreach ($process_step_paragraphs as $original_paragraph) {
    $process_value = $original_paragraph->get('field_process_step_type')->value;
    $original_paragraph->set('field_process_step_type', ['temp']);
    $original_paragraph->save();
    $original_paragraph->set('field_process_step_type', [$process_value]);
    $original_paragraph->save();
  }
}
