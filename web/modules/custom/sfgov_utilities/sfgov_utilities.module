<?php

use \Drupal\Core\Form\FormStateInterface;
use Drupal\sfgov_utilities\Utility;

/**
 * Implements hook_template_preprocess_default_variables_alter().
 */
function sfgov_utilities_template_preprocess_default_variables_alter(&$variables) {
 // An exception might be thrown.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set to false.
    $variables['is_front'] = FALSE;
  }
}

function sfgovGetTransactionSearchVariables($variables) {
  $templateVars = array();
  $node = $variables['node'];
  $contentType = $node->getType();

  if($contentType != 'transaction') {
    return;
  }

  $relatedDept = null;
  $externalUrl = null;
  $userLoggedIn = \Drupal::currentUser()->isAnonymous() ? false : true;

  // get the related dept
  // we only want to show one related dept, but it may not always be in the first index
  // so loop through and break out after we find one
  $relatedDepts = $node->get('field_departments')->getValue();
  for($i = 0; $i < count($relatedDepts); $i++) {
    $relatedDept = $node->get('field_departments')->get($i)->getValue();
    if(!empty($relatedDept)) {
      $relatedDeptId = $relatedDept['target_id'];
      $relatedDeptNode = \Drupal\node\Entity\Node::load($relatedDeptId);
      $relatedDept = $relatedDeptNode ? $relatedDeptNode->getTitle() : '';
      break;
    }
  }

  // check external url
  $externalUrlValueArray = $node->get('field_direct_external_url')->getValue();
  $hasExternalUrl = (!empty($externalUrlValueArray) && !$userLoggedIn) ? true : false;
  $options = ['absolute' => TRUE];
  $drupalUrl = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options);
  $drupalUrl = $drupalUrl->toString();
  $theUrl = $drupalUrl; // keep the drupal url because the redirect happens in web/modules/custom/sfgov_event_subscriber/src/EventSubscriber/RedirectEventSubscriber

  $templateVars['related_dept'] = $relatedDept;
  $templateVars['the_url'] = $theUrl;
  $templateVars['has_external_url'] = $hasExternalUrl;
  $templateVars['title'] = $node->get('title')->getString();
  $templateVars['description'] = (!empty($node->get('field_description')->getValue())) ? $node->get('field_description')->getValue()[0]['value'] : '';
  return $templateVars;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function sfgov_utilities_preprocess_node__transaction__search_index(&$variables) {
  $templateVars = sfgovGetTransactionSearchVariables($variables);
  $variables['the_url'] = $templateVars['the_url'];
  $variables['has_external_url'] = $templateVars['has_external_url'];
  $variables['title'] = $templateVars['title'];
  $variables['description'] = $templateVars['description'];
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function sfgov_utilities_preprocess_node__transaction__transaction_search_result_related_dept(&$variables) {
  $templateVars = sfgovGetTransactionSearchVariables($variables);
  $variables['the_url'] = $templateVars['the_url'];
  $variables['has_external_url'] = $templateVars['has_external_url'];
  $variables['title'] = $templateVars['title'];
  $variables['description'] = $templateVars['description'];
  $variables['related_dept'] = $templateVars['related_dept'];
}

/**
 * Implements hook_preprocess_paragraph__PARAGRAPH_TYPE().
 */
function sfgov_utilities_preprocess_paragraph__people(&$variables) {

  $userLoggedIn = \Drupal::currentUser()->isAnonymous() ? false : true;
  $numItems = $variables['elements']['#paragraph']->getFields()['field_person']->count();

  $persons = $variables['elements']['#paragraph']->getFields()['field_person'];

  foreach($persons as $item) {
    $entityUrl = $item->entity->url();
    $personUrl = $item->entity->get('field_direct_external_url')->getValue() ? $item->entity->get('field_direct_external_url')->getValue()[0]['uri'] : null;
    $theUrl = '';
    if($userLoggedIn) { // user logged in, just use the entity url
      $theUrl = $entityUrl;
    } else {
      // use the person url if it exists, else use entity url
      $theUrl = $personUrl ? $personUrl : $entityUrl;
    }
    $item->entity->set('field_direct_external_url', array('uri' => $theUrl));
  }
}

/**
 * Implements hook_preprocess_eck_entity().
 */
function sfgov_utilities_preprocess_eck_entity(&$variables) {
  $bundle = $variables['bundle'];
  if($bundle && ($bundle == 'event_address' || $bundle == 'physical')) {
    $address = $variables['eck_entity']->get('field_address')->getValue()[0];
    $singleLineAddress = urlencode($address['address_line1'] . ',' . $address['locality'] . ',' . $address['administrative_area'] . ' ' . $address['postal_code']);

    $apiKey = \Drupal\Core\Site\Settings::get('gmaps_api_key');
    // options for the map image
    $options = [
      'zoom' => 15,
      'size' => '250x140'
    ];
    // options for markers
    $markers = [
      'color' => 'red', // {black, brown, green, purple, yellow, blue, gray, orange, red, white}
      'size' => 'mid', // {tiny, mid, small}
    ];

    // construct the query params
    $params = '';
    foreach($options as $key => $value) {
      $params .= $key . '=' . $value . '&';
    }
    $params .= 'markers=';
    foreach($markers as $key => $value) {
      $params .= $key . ':' . $value . '|';
    }
    $params .= $singleLineAddress;
    $imgUrl = 'https://maps.googleapis.com/maps/api/staticmap?center=' . $singleLineAddress . '&' . $params . '&key=' . $apiKey;
    $directionsUrl = 'https://www.google.com/maps/dir/?api=1&destination=' . $singleLineAddress;
    $mapSiteUrl = 'https://www.google.com/maps/search/?api=1&query=' . $singleLineAddress;
    $variables['map_img_url'] = $imgUrl;
    $variables['map_site_url'] = $mapSiteUrl;
    $variables['map_directions_url'] = $directionsUrl;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function sfgov_utilities_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if(array_key_exists('uri', $element)) {
    if($element['#description']) {
      $element['uri']['#description'] = $element['#description'];
      $element['#description'] = '';
    }
  }
}