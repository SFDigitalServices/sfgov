<?php

use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\pathauto\PathautoState;
use Drupal\Core\Render\Element;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_template_preprocess_default_variables_alter().
 */
function sfgov_utilities_template_preprocess_default_variables_alter(&$variables) {
 // An exception might be thrown.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set to false.
    $variables['is_front'] = FALSE;
  }
}

function sfgovGetTransactionSearchVariables($variables) {
  $templateVars = array();
  $node = $variables['node'];
  $contentType = $node->getType();

  if($contentType != 'transaction') {
    return;
  }

  $relatedDept = null;
  $externalUrl = null;
  $userLoggedIn = \Drupal::currentUser()->isAnonymous() ? false : true;

  // get the related dept
  // we only want to show one related dept, but it may not always be in the first index
  // so loop through and break out after we find one
  $relatedDepts = $node->get('field_departments')->getValue();
  for($i = 0; $i < count($relatedDepts); $i++) {
    $relatedDept = $node->get('field_departments')->get($i)->getValue();
    if(!empty($relatedDept)) {
      $relatedDeptId = $relatedDept['target_id'];
      $relatedDeptNode = \Drupal\node\Entity\Node::load($relatedDeptId);
      $relatedDept = $relatedDeptNode ? $relatedDeptNode->getTitle() : '';
      break;
    }
  }

  // check external url
  $externalUrlValueArray = $node->get('field_direct_external_url')->getValue();
  $hasExternalUrl = (!empty($externalUrlValueArray) && !$userLoggedIn) ? true : false;
  $options = ['absolute' => TRUE];
  $drupalUrl = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options);
  $drupalUrl = $drupalUrl->toString();
  $theUrl = $drupalUrl; // keep the drupal url because the redirect happens in web/modules/custom/sfgov_event_subscriber/src/EventSubscriber/RedirectEventSubscriber

  $templateVars['related_dept'] = $relatedDept;
  $templateVars['the_url'] = $theUrl;
  $templateVars['has_external_url'] = $hasExternalUrl;
  $templateVars['title'] = $node->get('title')->getString();
  $templateVars['description'] = (!empty($node->get('field_description')->getValue())) ? $node->get('field_description')->getValue()[0]['value'] : '';
  return $templateVars;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function sfgov_utilities_preprocess_node__transaction__search_index(&$variables) {
  $templateVars = sfgovGetTransactionSearchVariables($variables);
  $variables['the_url'] = $templateVars['the_url'];
  $variables['has_external_url'] = $templateVars['has_external_url'];
  $variables['title'] = $templateVars['title'];
  $variables['description'] = $templateVars['description'];
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function sfgov_utilities_preprocess_node__transaction__transaction_search_result_related_dept(&$variables) {
  $templateVars = sfgovGetTransactionSearchVariables($variables);
  $variables['the_url'] = $templateVars['the_url'];
  $variables['has_external_url'] = $templateVars['has_external_url'];
  $variables['title'] = $templateVars['title'];
  $variables['description'] = $templateVars['description'];
  $variables['related_dept'] = $templateVars['related_dept'];
}

/**
 * Implements hook_preprocess_paragraph__PARAGRAPH_TYPE().
 */
function sfgov_utilities_preprocess_paragraph__people(&$variables) {

  $userLoggedIn = \Drupal::currentUser()->isAnonymous() ? false : true;
  $numItems = $variables['elements']['#paragraph']->getFields()['field_person']->count();

  $persons = $variables['elements']['#paragraph']->getFields()['field_person'];

  foreach($persons as $item) {
    $entityUrl = $item->entity->url();
    $personUrl = $item->entity->get('field_direct_external_url')->getValue() ? $item->entity->get('field_direct_external_url')->getValue()[0]['uri'] : null;
    $theUrl = '';
    if($userLoggedIn) { // user logged in, just use the entity url
      $theUrl = $entityUrl;
    } else {
      // use the person url if it exists, else use entity url
      $theUrl = $personUrl ? $personUrl : $entityUrl;
    }
    $item->entity->set('field_direct_external_url', array('uri' => $theUrl));
  }
}

/**
 * Implements hook_preprocess_eck_entity().
 */
function sfgov_utilities_preprocess_eck_entity(&$variables) {
  $bundle = $variables['bundle'];
  if($bundle && ($bundle == 'event_address' || $bundle == 'physical')) {
    $address = $variables['eck_entity']->get('field_address')->getValue()[0];
    $map = _sfgov_utilities_build_map($address);
    $variables['map_img_url'] = $map['map_img_url'];
    $variables['map_site_url'] = $map['map_site_url'];
    $variables['map_directions_url'] = $map['map_directions_url'];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function sfgov_utilities_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if(array_key_exists('uri', $element)) {
    if($element['#description']) {
      $element['uri']['#description'] = $element['#description'];
      $element['#description'] = '';
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 * refer to https://www.drupal.org/project/drupal/issues/2955321
 */
function sfgov_utilities_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

function sfgov_utilities_page_attachments(array &$page) {
  // Don't run on admin pages
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (isset($node)) {
      $bundle = $node->bundle();
      // Only check department and topic nodes
      if ($bundle == 'department' || $bundle == 'topic') {
        // Count the number of service sections and services
        $num_sections = 0;
        $num_services = 0;
        $ids = $node->get('field_department_services')->getValue();
        $num_sections = count($ids);
        foreach ($ids as $paragraph) {
          $sps = \Drupal::entityTypeManager()
            ->getStorage('paragraph')
            ->load($paragraph['target_id']);
          $sids = $sps ? $sps->get('field_dept_service_sect_services')->getValue() : [];
          foreach ($sids as $snode) {
            // Check if service nodes are published
            $fsnode = \Drupal::entityTypeManager()
              ->getStorage('node')
              ->load($snode['target_id']);
            if ($fsnode && $fsnode->isPublished()) {
              $num_services += 1;
            }
          }
        }

        //Count number of more services
        $view = \Drupal\views\Views::getView('services');
        $nid = $node->id();
        $view->setArguments(array($nid));
        $view->setDisplay('topics_more_services');
        $view->execute();
        $view_result = $view->result;
        $excluded_services = topic_page_services();

        // Check More Services for unpublished items
        foreach ($view_result as $key => $value) {
          $node = \Drupal::entityTypeManager()
            ->getStorage('node')
            ->load($value->nid);
          if (is_array($excluded_services)) {
            if (in_array($value->nid, $excluded_services) || empty($node) || !$node->isPublished()) {
              unset($view_result[$key]);
            }
          }
        }

        $num_more_services = count($view_result);

        if ($num_more_services >= 1) {
          $num_sections += 1;
        }

        $total_services = $num_services + $num_more_services;

        // If enough items load accordion js
        if ($total_services >= 12 && $num_sections >= 2) {
          $page['#attached']['library'][] = 'sfgov_utilities/services';
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function sfgov_utilities_entity_insert(EntityInterface $entity) {
  // Enforcing URL generation even when "Generate automatic URL alias" is unchecked.
  // This will make sure to apply transliteration cleanup and appropirate URL patterns.
  // @see SG-1154
  if ($entity->path->pathauto == PathautoState::SKIP) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'insert');
  }
}

/**
 * Implements hook_entity_update().
 */
function sfgov_utilities_entity_update(EntityInterface $entity) {
  // Enforcing URL generation even when "Generate automatic URL alias" is unchecked.
  // This will make sure to apply transliteration cleanup and appropirate URL patterns.
  // @see SG-1154
  if (is_object($entity->path)) {
    if ($entity->path->pathauto == PathautoState::SKIP) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'update');
    }
  }
}

/**
 * Custom function to build the attributes needed for rendering a Map.
 */
function _sfgov_utilities_build_map($address) {
  $addressLine2 = !empty($address['address_line2']) ? $address['address_line2'] . ', ' : '';
  $singleLineAddress = urlencode($address['address_line1'] . ',' . $addressLine2 . $address['locality'] . ',' . $address['administrative_area'] . ' ' . $address['postal_code']);

  $apiKey = \Drupal\Core\Site\Settings::get('gmaps_api_key');
  // options for the map image
  $options = [
    'zoom' => 15,
    'size' => '250x140'
  ];
  // options for markers
  $markers = [
    'color' => 'red', // {black, brown, green, purple, yellow, blue, gray, orange, red, white}
    'size' => 'mid', // {tiny, mid, small}
  ];

  // construct the query params
  $params = '';
  foreach($options as $key => $value) {
    $params .= $key . '=' . $value . '&';
  }
  $params .= 'markers=';
  foreach($markers as $key => $value) {
    $params .= $key . ':' . $value . '|';
  }
  $params .= $singleLineAddress;
  $imgUrl = 'https://maps.googleapis.com/maps/api/staticmap?center=' . $singleLineAddress . '&' . $params . '&key=' . $apiKey;
  $directionsUrl = 'https://www.google.com/maps/dir/?api=1&destination=' . $singleLineAddress;
  $mapSiteUrl = 'https://www.google.com/maps/search/?api=1&query=' . $singleLineAddress;

  return [
    'map_img_url' => $imgUrl,
    'map_site_url' => $mapSiteUrl,
    'map_directions_url' => $directionsUrl,
  ];
}

/**
 * Attach a form id to all form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 * @return array
 */
function sfgov_utilities_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    sfgov_utilities_attach_form_id($form[$child], $form_id);
  }
}

/**
 * Implements hook_form_alter().
 */
function sfgov_utilities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach #form_id to all form elements.
  sfgov_utilities_attach_form_id($form, $form_id);
}
