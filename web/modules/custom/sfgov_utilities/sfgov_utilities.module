<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\path_alias\Entity\PathAlias;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityInterface;
use Drupal\pathauto\PathautoState;
use Drupal\Core\Render\Element;
use Drupal\Core\Cache\Cache;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drush\Drush;

/**
 * Implements hook_template_preprocess_default_variables_alter().
 */
function sfgov_utilities_template_preprocess_default_variables_alter(&$variables) {
 // An exception might be thrown.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set to false.
    $variables['is_front'] = FALSE;
  }
}

function sfgovGetTransactionSearchVariables($variables) {
  $templateVars = array();
  $node = $variables['node'];
  $contentType = $node->getType();

  if($contentType != 'transaction') {
    return;
  }

  $relatedDept = null;
  $externalUrl = null;
  $userLoggedIn = \Drupal::currentUser()->isAnonymous() ? false : true;

  // get the related dept
  // we only want to show one related dept, but it may not always be in the first index
  // so loop through and break out after we find one
  $relatedDepts = $node->get('field_departments')->getValue();
  for($i = 0; $i < count($relatedDepts); $i++) {
    $relatedDept = $node->get('field_departments')->get($i)->getValue();
    if(!empty($relatedDept)) {
      $relatedDeptId = $relatedDept['target_id'];
      $relatedDeptNode = Node::load($relatedDeptId);
      $relatedDept = $relatedDeptNode ? $relatedDeptNode->getTitle() : '';
      break;
    }
  }

  // check external url
  $externalUrlValueArray = $node->get('field_direct_external_url')->getValue();
  $hasExternalUrl = (!empty($externalUrlValueArray) && !$userLoggedIn) ? true : false;
  $options = ['absolute' => TRUE];
  $drupalUrl = \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options);
  $drupalUrl = $drupalUrl->toString();
  $theUrl = $drupalUrl; // keep the drupal url because the redirect happens in web/modules/custom/sfgov_event_subscriber/src/EventSubscriber/RedirectEventSubscriber

  $templateVars['related_dept'] = $relatedDept;
  $templateVars['the_url'] = $theUrl;
  $templateVars['has_external_url'] = $hasExternalUrl;
  $templateVars['title'] = $node->get('title')->getString();
  $templateVars['description'] = (!empty($node->get('field_description')->getValue())) ? $node->get('field_description')->getValue()[0]['value'] : '';
  return $templateVars;
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function sfgov_utilities_preprocess_node__transaction__search_index(&$variables) {
  $templateVars = sfgovGetTransactionSearchVariables($variables);
  $variables['the_url'] = $templateVars['the_url'];
  $variables['has_external_url'] = $templateVars['has_external_url'];
  $variables['title'] = $templateVars['title'];
  $variables['description'] = $templateVars['description'];
}

/**
 * Implements hook_preprocess_node__NODE_TYPE__VIEW_MODE().
 */
function sfgov_utilities_preprocess_node__transaction__transaction_search_result_related_dept(&$variables) {
  $templateVars = sfgovGetTransactionSearchVariables($variables);
  $variables['the_url'] = $templateVars['the_url'];
  $variables['has_external_url'] = $templateVars['has_external_url'];
  $variables['title'] = $templateVars['title'];
  $variables['description'] = $templateVars['description'];
  $variables['related_dept'] = $templateVars['related_dept'];
}

/**
 * Implements hook_preprocess_paragraph__PARAGRAPH_TYPE().
 */
function sfgov_utilities_preprocess_paragraph__people(&$variables) {

  $userLoggedIn = \Drupal::currentUser()->isAnonymous() ? false : true;
  $numItems = $variables['elements']['#paragraph']->getFields()['field_person']->count();

  $persons = $variables['elements']['#paragraph']->getFields()['field_person'];

  foreach($persons as $item) {
    $entityUrl = $item->entity->url();
    $personUrl = $item->entity->get('field_direct_external_url')->getValue() ? $item->entity->get('field_direct_external_url')->getValue()[0]['uri'] : null;
    $theUrl = '';
    if($userLoggedIn) { // user logged in, just use the entity url
      $theUrl = $entityUrl;
    } else {
      // use the person url if it exists, else use entity url
      $theUrl = $personUrl ? $personUrl : $entityUrl;
    }
    $item->entity->set('field_direct_external_url', array('uri' => $theUrl));
  }
}

/**
 * Implements hook_preprocess_eck_entity().
 */
function sfgov_utilities_preprocess_eck_entity(&$variables) {
  $bundle = $variables['bundle'];
  if($bundle && ($bundle == 'event_address' || $bundle == 'physical')) {
    $address = $variables['eck_entity']->get('field_address')->getValue()[0];
    $map = _sfgov_utilities_build_map($address);
    $variables['map_img_url'] = $map['map_img_url'];
    $variables['map_site_url'] = $map['map_site_url'];
    $variables['map_directions_url'] = $map['map_directions_url'];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function sfgov_utilities_field_widget_form_alter(&$element, FormStateInterface &$form_state, $context) {
  if(array_key_exists('uri', $element)) {
    if($element['#description']) {
      $element['uri']['#description'] = $element['#description'];
      $element['#description'] = '';
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 * refer to https://www.drupal.org/project/drupal/issues/2955321
 */
function sfgov_utilities_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_page_attachments
 */
function sfgov_utilities_page_attachments(array &$page) {
  // Sandbox alert
  if (isset($_ENV['PANTHEON_ENVIRONMENT']) && $_ENV['PANTHEON_ENVIRONMENT'] !== 'live') {
    $page['#attached']['library'][] = 'sfgov_utilities/sandbox';

    /* sandbox user login */
    if ($_ENV['PANTHEON_ENVIRONMENT'] !== 'content') { // don't do this for the content environment
      $sandboxUserCredsPath = DRUPAL_ROOT . '/sites/default/files/private/secrets.json';
      $sandboxUserCreds = null;
      $routeName = \Drupal::routeMatch()->getRouteName();
      if(file_exists($sandboxUserCredsPath) && $routeName == 'user.login') {
        try {
          $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
          $sandboxUsers = [];
          $sandboxUserPw = json_decode(file_get_contents($sandboxUserCredsPath), true);

          foreach($roles as $role) {
            $roleId = $role->id();
            if($roleId != 'authenticated' && $roleId != 'anonymous') {
              $sandboxUser = 'test.' . str_replace('_', '', $roleId);
              $sandboxUsers[] = $sandboxUser;
            }
          }

          $page['#attached']['drupalSettings']['sfgov_sandbox_user']['users'] = $sandboxUsers;
          $page['#attached']['drupalSettings']['sfgov_sandbox_user']['pw'] = $sandboxUserPw['drush_pw'];
          $page['#attached']['library'][] = 'sfgov_utilities/sandbox_user';
        } catch(\Exception $e) {
          error_log($e->getMessage);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function sfgov_utilities_entity_insert(EntityInterface $entity) {
  // Enforcing URL generation even when "Generate automatic URL alias" is unchecked.
  // This will make sure to apply transliteration cleanup and appropirate URL patterns.
  // @see SG-1154
  if(!empty($entity->path)) {
    if ($entity->path->pathauto == PathautoState::SKIP) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'insert');
    }
  }
  if ($entity->bundle() === 'department' || $entity->bundle() === 'topic') {
    sfgov_utilities_entity_update($entity);
  }
}

function sfgov_utilities_cloned_node_alter(&$node) {
  if ($node->getType() == 'meeting') {
    if (!empty($node->field_smart_date->getValue())) {
      $node->set('field_smart_date', NULL);
    }
  }
}

/**
 * Implements hook_link_alter().
 */
function sfgov_utilities_link_alter(&$variables) {
  if ($variables['text'] == 'Clone') {
    if (isset($variables['options']['attributes']['data-drupal-link-system-path'])) {
      if (strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'quick_clone')) {
        $variables['text'] = 'Duplicate';
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function sfgov_utilities_entity_update(EntityInterface $entity) {
  // Enforcing URL generation even when "Generate automatic URL alias" is unchecked.
  // This will make sure to apply transliteration cleanup and appropirate URL patterns.
  // @see SG-1154
  if (!empty($entity->path)) {
    if ($entity->path->pathauto == PathautoState::SKIP) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($entity, 'update');
    }
  }
  // Add or edit redirects for news view pages.
  if ($entity->bundle() === 'department' || $entity->bundle() === 'topic') {
    if ($entity->bundle() === 'department') {
      $entity_path_root = '/news/';
    }
    if ($entity->bundle() === 'topic') {
      $entity_path_root = '/news/topics/';
    }
    $entity_path = $entity_path_root . $entity->id();
    $path_alias_manager = \Drupal::entityTypeManager()->getStorage('path_alias');
    /* @var $alias_objects PathAliasInterface */
    $alias_objects = $path_alias_manager->loadByProperties([
      'path' => $entity_path,
      'langcode' => 'en',
    ]);
    if (empty($alias_objects)) {
      // This is a new node so the alias must be created.
      $path_title = substr(str_replace(" ", "-", trim(strtolower($entity->getTitle()))), 0, 255);
      $new_news_alias = \Drupal\path_alias\Entity\PathAlias::create([
        'path' => $entity_path,
        'alias' => $entity_path_root . $path_title,
        'langcode' => 'en',
      ]);
      $new_news_alias->save();
    }
    else {
      if (is_array($alias_objects)) {
        // Check to see if the node title has changed.
        foreach ($alias_objects as $alias_object) {
          if ($alias_object->getPath() == $entity_path) {
            $retrieved_alias = $alias_object->getAlias();
            $news_alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $entity->id());
            $position = strrpos($news_alias, '/');
            $existing_alias = $position === FALSE ? $news_alias : substr($news_alias, $position + 1);
            if ($retrieved_alias != $news_alias) {
              // Note that redirect module will create a new redirect for us, from the
              // old alias to the subpage path, in the process of this save.
              $updated_alias = $entity_path_root . $existing_alias;
              $alias_object->setAlias($updated_alias);
              $alias_object->save();
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Perform necessary tasks for when entity is deleted.
 */
function sfgov_utilities_node_delete(\Drupal\node\NodeInterface $node) {
  // Delete redirect that was needed for news view pages.
  if ($node->getType() === 'department' || $node->getType() === 'topic') {
    if ($node->getType() === 'department') {
      $entity_path_root = '/news/';
    }
    if ($node->getType() === 'topic') {
      $entity_path_root = '/news/topics/';
    }
    $path_alias_manager = \Drupal::entityTypeManager()->getStorage('path_alias');
    $alias_objects = $path_alias_manager->loadByProperties([
      'path' => $entity_path_root . $node->id(),
      'langcode' => 'en',
    ]);
    foreach ($alias_objects as $alias_object) {
      if (strpos($alias_object->getPath(), '/news') !== FALSE) {
        $alias_object->delete();
      }
    }
  }
}

/**
 * Custom function to build the attributes needed for rendering a Map.
 */
function _sfgov_utilities_build_map($address) {
  $gmap_config = \Drupal::config('sfgov_utilities.settings');

  $addressLine2 = !empty($address['address_line2']) ? $address['address_line2'] . ', ' : '';
  $singleLineAddress = urlencode($address['address_line1'] . ',' . $addressLine2 . $address['locality'] . ',' . $address['administrative_area'] . ' ' . $address['postal_code']);

  $apiKey = $gmap_config->get('gmaps_api_key');
  // options for the map image
  $options = [
    'zoom' => 15,
    'size' => '250x140'
  ];
  // options for markers
  $markers = [
    'color' => 'red', // {black, brown, green, purple, yellow, blue, gray, orange, red, white}
    'size' => 'mid', // {tiny, mid, small}
  ];

  // construct the query params
  $params = '';
  foreach($options as $key => $value) {
    $params .= $key . '=' . $value . '&';
  }
  $params .= 'markers=';
  foreach($markers as $key => $value) {
    $params .= $key . ':' . $value . '|';
  }
  $params .= $singleLineAddress;
  $imgUrl = 'https://maps.googleapis.com/maps/api/staticmap?center=' . $singleLineAddress . '&' . $params . '&key=' . $apiKey;
  $directionsUrl = 'https://www.google.com/maps/dir/?api=1&destination=' . $singleLineAddress;
  $mapSiteUrl = 'https://www.google.com/maps/search/?api=1&query=' . $singleLineAddress;

  return [
    'map_img_url' => $imgUrl,
    'map_site_url' => $mapSiteUrl,
    'map_directions_url' => $directionsUrl,
  ];
}

/**
 * Attach a form id to all form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 * @return array
 */
function sfgov_utilities_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    sfgov_utilities_attach_form_id($form[$child], $form_id);
  }
}

/**
 * Implements hook_form_alter().
 */
function sfgov_utilities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach #form_id to all form elements.
  sfgov_utilities_attach_form_id($form, $form_id);
}

/**
 * Implements hook_cron().
 *
 * TODO: find a way to write the updated array to an accessible var
 * accessing settings via \Drupal\Core\Site\Settings is readonly
 * so at the moment, we're really only swapping between two keys vs the entire array of keys
 */
function sfgov_utilities_cron() {
  $api_keys = \Drupal\Core\Site\Settings::get('gmaps_api_keys');
  if(!empty($api_keys)) {
    $current_key = \Drupal::config('sfgov_utilities.settings')->get('gmaps_api_key');
    $new_key = $api_keys[0];

    if($new_key === $current_key) {
      $found_key = array_search($current_key, $api_keys);
      if($found_key >= 0) {
        array_splice($api_keys, $found_key, 1);
        $api_keys[] = $current_key;
        $new_key = $api_keys[0];
      }
    }

    \Drupal::service('config.factory')->getEditable('sfgov_utilities.settings')->set('gmaps_api_key', $new_key)->save();
  }

  \Drupal::service('cache.render')->invalidateAll();

  // Find all tmgmt jobs from the xtm provider and save them with a valid provider.
  $ids = \Drupal::entityQuery('tmgmt_job')
    ->condition('translator', ['xtm', 'xtm_test'], 'IN')
    ->execute();
  if (!empty($ids)) {
    $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_job');
    $entities = $storage->loadMultiple($ids);
    foreach ($entities as $entity) {
      // Give the entity a valid translator.
      $entity->translator->target_id = 'contentapi';
      $entity->save();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sfgov_utilities_preprocess_views_view_field(&$variables) {
  if (isset($variables['view']) && ($variables['view']->id() == 'watchdog')) {

    /** @var Drupal\views\Plugin\views\field\Custom $field */
    $field = $variables['field'];

    // Render 'watchdog_uid' field as user link.
    if ($field->field_alias == 'watchdog_uid') {

      /** @var Drupal\views\Render\ViewsRenderPipelineMarkup $val */
      $uid = $field->original_value->__toString();

      if ($uid > 0) {
        /** @var |Drupal\user\Entity\User $account */
        // Pass your uid.
        $account = User::load($uid);
        $name = $account->toLink();
      }
      else {
        $name = [ '#markup' =>t('Anonymous')];
      }

      $variables['output'] = $name;
    }

  }

}

/**
 * Helper function to check and create an alias for an internal path.
 *
 * [SG-1007]
 *
 * @param $internal_path
 * @param $generated_path
 * @param string $langcode
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function sfgov_utilities_create_alias($internal_path, $alias_to_generate, string $langcode = '') {
  if (!$langcode) {
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  }

  $path_alias_manager = \Drupal::entityTypeManager()
    ->getStorage('path_alias');

  // Determine if an alias exists for the internal path URL.
  $alias_object = $path_alias_manager->loadByProperties([
    'path' => $internal_path,
    'langcode' => $langcode,
  ]);

  // If no alias exists for the internal path and the language, create a
  // human friendly alias for our no so human friendly path
  // (Example: /events/topics/25 -> /events/topics/immigrants)
  if (empty($alias_object)) {
    $path_alias = PathAlias::create([
      'path' => $internal_path,
      'alias' => $alias_to_generate,
      'langcode' => $langcode
    ]);
    $path_alias->save();

  }

  // If the alias exists, check if it needs to be updated
  foreach ($alias_object as $id => $alias) {
    $existing_alias_language = $alias->get('langcode');
    $existing_alias = $alias->getAlias();
    if ($existing_alias_language->langcode == $langcode && $existing_alias != $alias_to_generate) {
      // Update the alias if it changed (possibly from a translation or manual)
      $alias->setAlias($alias_to_generate)
        ->save();
    }
  }
}
