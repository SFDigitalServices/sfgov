<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\sfgov_locations\Element\Address;
use Drupal\sfgov_locations\Plugin\Field\FieldType\AddressItem;
use Drupal\sfgov_locations\Plugin\Field\FieldFormatter\AddressPlainFormatter;
use Drupal\sfgov_locations\Plugin\Validation\Constraint\AddressFormatConstraint;
use Drupal\sfgov_locations\AddressField;

/**
 * Implements hook_field_info_alter().
 */
function sfgov_locations_field_info_alter(&$info) {
  if (!empty($info['address'])) {
    $info['address']['class'] = AddressItem::class;
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function sfgov_locations_field_formatter_info_alter(array &$info) {
  if (!empty($info['address_plain'])) {
    $info['address_plain']['class'] = AddressPlainFormatter::class;
  }
}

/**
 * Implements hook_validation_constraint_alter().
 */
function sfgov_locations_validation_constraint_alter(array &$definitions) {
  if (!empty($definitions['AddressFormat'])) {
    $definitions['AddressFormat']['class'] = AddressFormatConstraint::class;
  }
}

/**
 * Implements hook_config_schema_info_alter().
 */
function sfgov_locations_config_schema_info_alter(&$definitions) {
  $definitions['address']['mapping'][AddressField::ADDRESSEE] = [
    'type' => 'string',
    'label' => 'Addressee',
  ];
  $definitions['address']['mapping'][AddressField::LOCATION_NAME] = [
    'type' => 'string',
    'label' => 'Location name',
  ];
}

/**
 * Implements hook_element_info_alter().
 */
function sfgov_locations_element_info_alter(array &$info) {
  if (!empty($info['address'])) {
    $info['address']['#process'] = [
      [Address::class, 'processAddress'],
      [Address::class, 'processGroup']
    ];
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function sfgov_locations_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['address_plain'])) {
    $module_handler = \Drupal::service('module_handler');
    $module_path = $module_handler->getModule('sfgov_locations')->getPath();
    $theme_registry['address_plain']['variables'][AddressField::ADDRESSEE] = NULL;
    $theme_registry['address_plain']['variables'][AddressField::LOCATION_NAME] = NULL;
    $theme_registry['address_plain']['path'] = $module_path . '/templates';
  }
}

/**
 * Implements hook_field_views_data_alter().
 */
function sfgov_locations_field_views_data_alter(array &$data, FieldStorageConfigInterface $field_storage) {
  $field_name = $field_storage->getName();
  $field_type = $field_storage->getType();
  if ($field_type == 'address') {
    $columns = [
      AddressField::ADDRESSEE => 'standard',
      AddressField::LOCATION_NAME => 'standard',
    ];
    foreach ($data as $table_name => $table_data) {
      foreach ($columns as $column => $plugin_id) {
        $data[$table_name][$field_name . '_' . $column]['field'] = [
          'id' => $plugin_id,
          'field_name' => $field_name,
          'property' => $column,
        ];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * This hook handles direct add/edits at '/admin/content/location/add/physical'
 * and '/location/144/edit'.
 *
 * If making changes here, note that you'll likely also want to make the same
 * changes in sfgov_locations_inline_entity_form_entity_form_alter(), which will
 * apply your changes in the context of using Entity Browser.
 */
function sfgov_locations_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['location_physical_form', 'location_physical_form_edit'])) {
    // Remove the 'details' wrapper form. We're using a field group "Address"
    // that includes both the Address field widget, and the Department field.
    $form['field_address']['widget'][0]['#type'] = 'container';

    // Customize Address field labels, descriptions, etc.
    $form['field_address']['widget'][0]['address']['#after_build'][] = '_sfgov_locations_customize_address';
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * This hook handles location forms embedded in Entity Browser.
 *
 * If making changes here, note that you'll likely also want to make the same
 * changes in sfgov_locations_form_alter() which handles the direct entity add
 * and edit use case.
 */
function sfgov_locations_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] == 'location' && $entity_form['#bundle'] == 'physical') {
    // Remove the 'details' wrapper form. We're using a field group "Address"
    // that includes both the Address field widget, and the Department field.
    $entity_form['field_address']['widget'][0]['#type'] = 'container';

    // Customize Address field labels, descriptions, etc.
    $entity_form['field_address']['widget'][0]['address']['#after_build'][] = '_sfgov_locations_customize_address';
  }
}

/**
 * Alter fields in the Address field type widget.
 */
function _sfgov_locations_customize_address($element, $form_state) {
  $element['organization']['#title'] = t('Division, program or organization');
  $element['addressee']['#description'] = t('Use for attention of, to flag a person or group.');
  $element['location_name']['#description'] = t('Use for named locations like City Hall. Should not duplicate department or division.');
  $element['address_line1']['#title'] = t('Street address line 1');
  $element['address_line1']['#description'] = t('Google Maps will lookup from this line.');
  $element['address_line2']['#title'] = t('Street address line 2');
  $element['address_line2']['#title_display'] = 'before';
  $element['address_line2']['#description'] = t('Room, Suite or Counter.');

  return $element;
}

/**
 * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().
 */
function sfgov_locations_field_widget_multivalue_office_hours_list_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
  if (!empty($elements['add_more'])) {
    // Change the label from 'Add item' to 'Add day'.
    $elements['add_more']['#value'] = t('Add day');
  }
}
