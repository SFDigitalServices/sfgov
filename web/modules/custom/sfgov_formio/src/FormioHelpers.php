<?php

namespace Drupal\sfgov_formio;

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Paragraphs\ParagraphInterface;

/**
 * Retrieves and sets data created with formio.
 */
class FormioHelpers {

  /**
   * The entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * The config factory used by the config entity query.
   *
   * @var \Drupal\Core\Config\ConfigFactoryInterface
   */
  protected $configFactory;

  /**
   * The URL entered by the user.
   *
   * @var string
   */
  protected $rawUrl;

  /**
   * Whether the user's url is valid.
   *
   * @var bool
   */
  protected $isValidUrl = FALSE;

  /**
   * The formio URL derived from user input.
   *
   * @var string
   */
  protected $formioUrl = '';

  /**
   * The data from formio.
   *
   * @var array
   */
  protected $formioData = FALSE;

  /**
   * Whether the formio data is valid.
   *
   * @var bool
   */
  protected $isValidData = FALSE;

  /**
   * The error generated by getting formio data.
   *
   * @var string
   */
  protected $dataError = '';

  /**
   * Constructs a FormioHelpers object.
   *
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The entity type manager.
   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
   *   The config factory.
   */
  public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
    $this->entityTypeManager = $entity_type_manager;
    $this->configFactory = $config_factory;
  }

  /**
   * Returns if data is valid.
   *
   * @return bool
   *   Data validity.
   */
  public function isValidData() {
    return $this->isValidData;
  }

  /**
   * Returns if url is valid.
   *
   * @return bool
   *   url validity.
   */
  public function isValidUrl() {
    return $this->isValidUrl;
  }

  /**
   * Returns if formio data.
   *
   * @return array
   *   Formio Data.
   */
  public function getFormioData() {
    return $this->formioData;
  }

  /**
   * Returns any errors generated by converting to json.
   *
   * @return string
   *   Json Error.
   */
  public function getDataError() {
    return $this->dataError;
  }

  /**
   * Uses the Paragraph to set all of the required helper data.
   *
   * @param \Drupal\Paragraphs\ParagraphInterface $entity
   *   The paragraph with relevant data.
   */
  public function setHelperData(ParagraphInterface $entity) {
    /** @var \Drupal\Paragraphs\ParagraphInterface $entity */
    if ($entity->hasField('field_formio_data_source')) {
      $this->rawUrl = $entity->field_formio_data_source->value;
      $this->constructFormioUrl($this->rawUrl);
      if ($this->isValidUrl) {
        $this->setFormioData();
      }
    }
  }

  /**
   * Builds the formio URL out of the URL input and config data.
   *
   * @param string $url
   *   The Formio URL.
   */
  public function constructFormioUrl(string $url) {
    if (empty($url) || !UrlHelper::isExternal($url)) {
      return;
    }
    // If its an external url, pull the existing config and use it to
    // generate a url.
    $constructed_url = str_replace(
    '[form_url]',
    urlencode(trim($url)),
    $this->configFactory->get('sfgov_formio.settings')->get('formio_translations_api_url'));
    $formio_url = UrlHelper::isValid($constructed_url) ? $constructed_url : FALSE;
    if (!$formio_url) {
      return;
    }
    $this->isValidUrl = TRUE;
    $this->formioUrl = $formio_url;
  }

  /**
   * Helper function for adding formio data.
   *
   * @param string $key
   *   The value's key provided by Formio.
   * @param array $values
   *   An array of values provided by Formio.
   * @param string $format
   *   The text format for the value field.
   */
  public function addFormioField($key, array $values, $format = 'plain_text') {
    return [
      // Limit the character count to what can be stored in the db.
      'key' => $key,
      'value' => $values['value'],
      'format' => $format,
      'actions' => [],
      // Limit the character count to what can be stored in the db.
      'label' => substr($values['label'], 0, 255),
      'nested_location' => $values['page'],
    ];
  }

  /**
   * Get the Formio data using the already validated URL.
   */
  private function setFormioData() {
    // This way the URL is either valid or FALSE.
    $data = json_decode(file_get_contents($this->formioUrl), TRUE);
    if (!$data || isset($data['error'])) {
      $this->dataError = $data['error'] ?: '';
    }
    else {
      $this->isValidData = TRUE;
      $this->formioData = $data;
    }
  }

}
