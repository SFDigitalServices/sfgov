<?php

/**
 * @file Contains sfgov_formio.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\sfgov_formio\Plugin\Field\FieldType\Formiourl;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sfgov_formio_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];

  if ($paragraph->bundle() === 'form_io') {
    // Use the data source property created in sfgov_formio_entity_view_alter()
    // to add custom template suggestions.
    if (!empty($variables['elements']['field_formio_data_source']['#formio_id'])) {
      $formio_id = str_replace('-', '_', $variables['elements']['field_formio_data_source']['#formio_id']);
      $suggestions[] = 'paragraph__form_io__' . $formio_id;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function sfgov_formio_entity_view_alter(&$build, $entity, $display) {
  if ($entity->getEntityTypeId() === 'paragraph' && $entity->getType() === 'form_io') {
    // Get the form ID from the endpoint URL.
    if ($entity->field_formio_data_source->value) {
      // Given https://sfds.form.io/feedback, look for 'feedback'.
      $source = $entity->field_formio_data_source->value;
      $name = substr($source, strrpos($source, '/') + 1);

      // Provide the Form's ID to the template.
      $build['field_formio_data_source']['#formio_id'] = $name;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function sfgov_formio_page_attachments(array &$attachments) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();

  // The version we load takes query parameters into account. We are NOT using
  // libraries here because they are too heavily cached, and unable to respond
  // request-level changes. This is one of the only asset-related hooks which
  // can evaluate a page request. hook_library_info_build/alter(), etc. cannot.
  if ($active_theme == 'sfgovpl') {
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'src' => _sfgov_formiojs_source(),
          'defer' => TRUE,
        ],
      ],
      'formiojs',
    ];
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'src' => _sfgov_formio_sfds_source(),
          'defer' => TRUE,
        ],
      ],
      'formio-sfds',
    ];

    // Allow Drupal's caching system to take the query string into account when
    // setting the page_cache id. This ensures we get the version we want when
    // new combinations are requested, and cache a HIT for subsequent requests.
    $attachments['#cache']['contexts'][] = 'url.query_args:formiojsVersion';
    $attachments['#cache']['contexts'][] = 'url.query_args:formio-sfdsVersion';
  }
}

/**
 * Return the Formio.js source URL.
 *
 * @return string $source
 *   Source URL to use with <script src="">.
 */
function _sfgov_formiojs_source() {
  // Fallback (latest version).
  $source = 'https://unpkg.com/formiojs/dist/formio.full.min.js';

  // Check for query parameters first.
  if (\Drupal::request()->query) {
    $query = \Drupal::request()->query->get('formiojsVersion');
    $query = strip_tags($query);
  }

  // Prefer source from query params.
  if (!empty($query)) {
    $source = 'https://unpkg.com/formiojs@' . $query . '/dist/formio.full.min.js';
  }

  // Use settings configured at 'admin/config/services/sfgov_formio'.
  else if ($config = \Drupal::config('sfgov_formio.settings')->get('formio_version')) {
    $source = 'https://unpkg.com/formiojs@' . $config . '/dist/formio.full.min.js';
  }

  return $source;
}

/**
 * Return the Form.io SFDS theme source URL.
 *
 * @return string $source
 *   Source URL to use with <script src="">.
 */
function _sfgov_formio_sfds_source() {
  // Fallback (latest version).
  $source = 'https://unpkg.com/formio-sfds/dist/formio-sfds.standalone.js';

  // Check for query parameters.
  if (\Drupal::request()->query) {
    $query = \Drupal::request()->query->get('formio-sfdsVersion');
    $query = strip_tags($query);
  }

  // Prefer version from query params, if available.
  if (!empty($query)) {
    $source = 'https://unpkg.com/formio-sfds@' . $query . '/dist/formio-sfds.standalone.js';
  }

  // Use settings configured at 'admin/config/services/sfgov_formio'.
  else if ($config = \Drupal::config('sfgov_formio.settings')->get('formio_sfds_version')) {
    $source = 'https://unpkg.com/formio-sfds@' . $config . '/dist/formio-sfds.standalone.js';
  }

  return $source;
}

/**
 * Implements hook_entity_base_field_info().
 */
function sfgov_formio_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $fields['formio_url'] = BaseFieldDefinition::create('string')
      ->setName('formio_url')
      ->setLabel(t('Formio URL'))
      ->setComputed(TRUE)
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'region' => 'hidden',
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setClass(Formiourl::class);
    return $fields;
  }
}

/**
 * Implements hook_entity_presave().
 */
function sfgov_formio_entity_presave($entity) {
  if ($entity->bundle() === 'form_page' && $entity->language()->getId() === 'en') {
    if ($formio_url = $entity->get('formio_url')->value) {
      $formio_json_content = serialize(file_get_contents($formio_url));
      $entity->set('field_formio_json_content', $formio_json_content);
    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function sfgov_formio_field_info_alter(&$info) {
  $info['string_long']['tmgmt_field_processor'] = 'Drupal\sfgov_formio\Plugin\Field\FormioFieldProcessor';
}
