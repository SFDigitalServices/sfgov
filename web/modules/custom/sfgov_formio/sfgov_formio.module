<?php

/**
 * @file
 * Contains sfgov_formio.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function sfgov_formio_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];

  if ($paragraph->bundle() === 'form_io') {
    // Use the data source property created in sfgov_formio_entity_view_alter()
    // to add custom template suggestions.
    if (!empty($variables['elements']['field_formio_data_source']['#formio_id'])) {
      $formio_id = str_replace('-', '_', $variables['elements']['field_formio_data_source']['#formio_id']);
      $suggestions[] = 'paragraph__form_io__' . $formio_id;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function sfgov_formio_entity_view_alter(&$build, $entity, $display) {
  if ($entity->getEntityTypeId() === 'paragraph' && $entity->getType() === 'form_io') {
    // Get the form ID from the endpoint URL.
    if ($entity->field_formio_data_source->value) {
      // Given https://sfds.form.io/feedback, look for 'feedback'.
      $source = $entity->field_formio_data_source->value;
      $name = substr($source, strrpos($source, '/') + 1);

      // Provide the Form's ID to the template.
      $build['field_formio_data_source']['#formio_id'] = $name;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function sfgov_formio_page_attachments(array &$attachments) {
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();

  // The version we load takes query parameters into account. We are NOT using
  // libraries here because they are too heavily cached, and unable to respond
  // request-level changes. This is one of the only asset-related hooks which
  // can evaluate a page request. hook_library_info_build/alter(), etc. cannot.
  if ($active_theme == 'sfgovpl') {
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'src' => _sfgov_formiojs_source(),
          'defer' => TRUE,
        ],
      ],
      'formiojs',
    ];
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'src' => _sfgov_formio_sfds_source(),
          'defer' => TRUE,
        ],
      ],
      'formio-sfds',
    ];

    // Allow Drupal's caching system to take the query string into account when
    // setting the page_cache id. This ensures we get the version we want when
    // new combinations are requested, and cache a HIT for subsequent requests.
    $attachments['#cache']['contexts'][] = 'url.query_args:formiojsVersion';
    $attachments['#cache']['contexts'][] = 'url.query_args:formio-sfdsVersion';
  }
}

/**
 * Return the Formio.js source URL.
 *
 * @return string
 *   Source URL to use with <script src="">.
 */
function _sfgov_formiojs_source() {
  // Fallback (latest version).
  $source = 'https://unpkg.com/formiojs/dist/formio.full.min.js';

  // Check for query parameters first.
  if (\Drupal::request()->query) {
    $query = \Drupal::request()->query->get('formiojsVersion');
    $query = strip_tags($query);
  }

  // Prefer source from query params.
  if (!empty($query)) {
    $source = 'https://unpkg.com/formiojs@' . $query . '/dist/formio.full.min.js';
  }

  // Use settings configured at 'admin/config/services/sfgov_formio'.
  elseif ($config = \Drupal::config('sfgov_formio.settings')->get('formio_version')) {
    $source = 'https://unpkg.com/formiojs@' . $config . '/dist/formio.full.min.js';
  }

  return $source;
}

/**
 * Return the Form.io SFDS theme source URL.
 *
 * @return string
 *   Source URL to use with <script src="">.
 */
function _sfgov_formio_sfds_source() {
  // Fallback (latest version).
  $source = 'https://unpkg.com/formio-sfds/dist/formio-sfds.standalone.js';

  // Check for query parameters.
  if (\Drupal::request()->query) {
    $query = \Drupal::request()->query->get('formio-sfdsVersion');
    $query = strip_tags($query);
  }

  // Prefer version from query params, if available.
  if (!empty($query)) {
    $source = 'https://unpkg.com/formio-sfds@' . $query . '/dist/formio-sfds.standalone.js';
  }

  // Use settings configured at 'admin/config/services/sfgov_formio'.
  elseif ($config = \Drupal::config('sfgov_formio.settings')->get('formio_sfds_version')) {
    $source = 'https://unpkg.com/formio-sfds@' . $config . '/dist/formio-sfds.standalone.js';
  }

  return $source;
}

/**
 * Implements hook_field_info_alter().
 */
function sfgov_formio_field_info_alter(&$info) {
  // New processors can only be added at the field level. But this class has
  // logic in it to only operate on the Formio Json Content field.
  $info['key_value_long']['tmgmt_field_processor'] = 'Drupal\sfgov_formio\Plugin\Field\FormioFieldProcessor';
}

/**
 * Implements hook_field_widget_form_alter().
 */
function sfgov_formio_field_widget_form_alter(&$element, $form_state, $context) {
  // Remove all of the text format stuff from the formio fields field.
  $field_definition = $context['items']->getFieldDefinition();
  if ($field_definition->getName() === 'field_formio_fields') {
    $element['key']['#disabled'] = TRUE;
    $element['#allowed_formats'] = ['plain_text'];
    $element['#after_build'][] = '_field_text_content_after_build';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function sfgov_formio_node_presave($entity) {
  if ($entity->bundle() === 'form_page') {

    $langcode = $entity->language()->getId();
    // Get the base form translation on only english versions of the page.
    if ($formio_url = _get_formio_url($entity)) {
      if ($langcode === 'en') {
        // This is a checkbox field, if checked update the formio fields.
        if ($entity->field_update_formio_fields->value) {
          $field_data = (array) json_decode(file_get_contents($formio_url));
          foreach ($field_data as $label => $value) {
            $skip = FALSE;
            // If the key already exists, override the value.
            foreach ($entity->field_formio_fields->getValue() as $key => $entry) {
              if ($entry['key'] === $label) {
                $skip = TRUE;
                $entity->field_formio_fields[$key] = _add_formio_field($label, $value);
              }
            }
            if (!$skip) {
              $entity->field_formio_fields[] = _add_formio_field($label, $value);
            }
          }
          // Set the checkbox back to empty to prevent accidental field
          // overrides.
          $entity->set('field_update_formio_fields', 0);
        }
      }
      // Regardless of language, get the data in the formio fields, convert to
      // json, and store in field_formio_json_content for front-end rendering.
      $formio_data = [];
      foreach ($entity->field_formio_fields->getValue() as $field) {
        $label = str_replace('_', '.', $field['key']);
        $formio_data[$langcode][$label] = $field['value'];
      }
      $entity->set('field_formio_json_content', json_encode($formio_data));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sfgov_formio_form_node_form_alter(&$form, $form_state, $form_id) {
  $entity = $form_state->getformObject()->getEntity();
  if ($entity->bundle() === 'form_page') {
    if (\Drupal::languageManager()->getCurrentLanguage()->getId() != 'en') {
      // Hide this field to prevent editors from accidentally overriding the
      // non-english versions with english from formio.
      $form['field_update_formio_fields']['#access'] = FALSE;
    }

    // Only display the clear button if there are values in the field.
    if ($entity->field_formio_fields->getValue()) {
      $button_weight = $form['field_formio_fields']['#weight'] + 1;
      $form['clear_formio'] = [
        '#type' => 'submit',
        '#weight' => $button_weight,
        '#value' => t('Clear All Strings'),
        '#submit' => ['clear_formio_fields_submit'],
        '#ajax' => [
          'callback' => 'clear_formio_fields_ajax',
          'wrapper' => 'field-formio-fields-add-more-wrapper',
        ],
      ];
    }
  }
}

/**
 * Returns a valid formio url for data parsing.
 *
 * @param object $entity
 *   The Form Page node.
 *
 * @return string
 *   A valid formio url.
 */
function _get_formio_url($entity) {
  $formio_url = FALSE;
  if ($paragraph_nid = $entity->get('field_form_id')->target_id) {
    $form_paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($paragraph_nid);
    $formio_data_source = $form_paragraph->hasfield('field_formio_data_source') ? $form_paragraph->get('field_formio_data_source')->value : NULL;
    if ($formio_data_source && UrlHelper::isExternal($formio_data_source)) {
      // If its an external url, pull the existing config and use it to
      // generate a url.
      $formio_config = \Drupal::config('sfgov_formio.settings');
      $constructed_url = str_replace(
      '[form_url]',
      urlencode(trim($formio_data_source)),
      $formio_config->get('formio_translations_api_url'));
      $formio_url = UrlHelper::isValid($constructed_url) ? $constructed_url : FALSE;
    }
  }
  if (!$formio_url) {
    \Drupal::logger('sfgov_formio')->notice('The url provided in field_formio_data_source on node %nid is not providing valid formio data for translations', ['%nid' => $entity->id()]);
  }
  return $formio_url;
}

/**
 * After build callback for field_text_content.
 *
 * @param object $element
 *   Array element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array
 *   New element.
 */
function _field_text_content_after_build($element, FormStateInterface $form_state) {
  if (isset($element['format'])) {
    // Remove Guidelines and Help text.
    unset($element['format']);
  }
  return $element;
}

/**
 * Submit function for removing formio fields.
 *
 * @param object $form
 *   Array element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function clear_formio_fields_submit(&$form, FormStateInterface $form_state) {
  $element = $form['field_formio_fields']['widget'];
  $field_name = $element['#field_name'];
  $parents = $element['#field_parents'];
  $field_state = WidgetBase::getWidgetState($parents, $field_name, $form_state);
  $field_state['items_count'] = 0;

  foreach ($element as $key => $value) {
    if (is_int($key)) {
      unset($element[$key]);
    }
  }

  WidgetBase::setWidgetState($parents, $field_name, $form_state, $field_state);
  $form_state->setRebuild();
}

/**
 * Ajax function for removing formio fields.
 *
 * @param object $form
 *   Array element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function clear_formio_fields_ajax(&$form, FormStateInterface $form_state) {
  $element = $form['field_formio_fields']['widget'];
  foreach ($element as $key => $value) {
    if (is_int($key)) {
      unset($element[$key]);
    }
  }
  return $element;
}

/**
 * Helper function for adding formio data.
 *
 * @param string $key
 *   Key of the key/value pair.
 * @param string $value
 *   Value of the Key/value pair.
 * @param string $format
 *   Text format.
 * @param array $actions
 *   Actions.
 */
function _add_formio_field($key, $value, $format = 'plain_text', array $actions = []) {
  return [
    'key' => $key,
    'value' => $value,
    'format' => $format,
    'actions' => $actions,
  ];
}
