<?php
/**
 * Provider
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * The Lionbridge Content API
 *
 * Enable translations with the Lionbridge Content API.
 *
 * OpenAPI spec version: 1.6.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Drupal\tmgmt_contentapi\Swagger\Client\Model;

use \ArrayAccess;
use \Drupal\tmgmt_contentapi\Swagger\Client\ObjectSerializer;

/**
 * Provider Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Provider implements ModelInterface, ArrayAccess
{
  const DISCRIMINATOR = null;

  /**
   * The original name of the model.
   *
   * @var string
   */
  protected static $swaggerModelName = 'Provider';

  /**
   * Array of property to type mappings. Used for (de)serialization
   *
   * @var string[]
   */
  protected static $swaggerTypes = [
    'provider_id' => 'string',
    'provider_name' => 'string',
    'capabilities' => '\Drupal\tmgmt_contentapi\Swagger\Client\Model\Capabilities'
  ];

  /**
   * Array of property to format mappings. Used for (de)serialization
   *
   * @var string[]
   */
  protected static $swaggerFormats = [
    'provider_id' => null,
    'provider_name' => null,
    'capabilities' => null
  ];

  /**
   * Array of property to type mappings. Used for (de)serialization
   *
   * @return array
   */
  public static function swaggerTypes()
  {
    return self::$swaggerTypes;
  }

  /**
   * Array of property to format mappings. Used for (de)serialization
   *
   * @return array
   */
  public static function swaggerFormats()
  {
    return self::$swaggerFormats;
  }

  /**
   * Array of attributes where the key is the local name,
   * and the value is the original name
   *
   * @var string[]
   */
  protected static $attributeMap = [
    'provider_id' => 'providerId',
    'provider_name' => 'providerName',
    'capabilities' => 'capabilities'
  ];

  /**
   * Array of attributes to setter functions (for deserialization of responses)
   *
   * @var string[]
   */
  protected static $setters = [
    'provider_id' => 'setProviderId',
    'provider_name' => 'setProviderName',
    'capabilities' => 'setCapabilities'
  ];

  /**
   * Array of attributes to getter functions (for serialization of requests)
   *
   * @var string[]
   */
  protected static $getters = [
    'provider_id' => 'getProviderId',
    'provider_name' => 'getProviderName',
    'capabilities' => 'getCapabilities'
  ];

  /**
   * Array of attributes where the key is the local name,
   * and the value is the original name
   *
   * @return array
   */
  public static function attributeMap()
  {
    return self::$attributeMap;
  }

  /**
   * Array of attributes to setter functions (for deserialization of responses)
   *
   * @return array
   */
  public static function setters()
  {
    return self::$setters;
  }

  /**
   * Array of attributes to getter functions (for serialization of requests)
   *
   * @return array
   */
  public static function getters()
  {
    return self::$getters;
  }

  /**
   * The original name of the model.
   *
   * @return string
   */
  public function getModelName()
  {
    return self::$swaggerModelName;
  }





  /**
   * Associative array for storing property values
   *
   * @var mixed[]
   */
  protected $container = [];

  /**
   * Constructor
   *
   * @param mixed[] $data Associated array of property values
   *                      initializing the model
   */
  public function __construct(array $data = null)
  {
    $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
    $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
    $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
  }

  /**
   * Show all the invalid properties with reasons.
   *
   * @return array invalid properties with reasons
   */
  public function listInvalidProperties()
  {
    $invalidProperties = [];

    return $invalidProperties;
  }

  /**
   * Validate all the properties in the model
   * return true if all passed
   *
   * @return bool True if all properties are valid
   */
  public function valid()
  {
    return count($this->listInvalidProperties()) === 0;
  }


  /**
   * Gets provider_id
   *
   * @return string
   */
  public function getProviderId()
  {
    return $this->container['provider_id'];
  }

  /**
   * Sets provider_id
   *
   * @param string $provider_id ID of the provider.
   *
   * @return $this
   */
  public function setProviderId($provider_id)
  {
    $this->container['provider_id'] = $provider_id;

    return $this;
  }

  /**
   * Gets provider_name
   *
   * @return string
   */
  public function getProviderName()
  {
    return $this->container['provider_name'];
  }

  /**
   * Sets provider_name
   *
   * @param string $provider_name Name of the provider.
   *
   * @return $this
   */
  public function setProviderName($provider_name)
  {
    $this->container['provider_name'] = $provider_name;

    return $this;
  }

  /**
   * Gets capabilities
   *
   * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Capabilities
   */
  public function getCapabilities()
  {
    return $this->container['capabilities'];
  }

  /**
   * Sets capabilities
   *
   * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\Capabilities $capabilities capabilities
   *
   * @return $this
   */
  public function setCapabilities($capabilities)
  {
    $this->container['capabilities'] = $capabilities;

    return $this;
  }
  /**
   * Returns true if offset exists. False otherwise.
   *
   * @param integer $offset Offset
   *
   * @return boolean
   */
  public function offsetExists($offset)
  {
    return isset($this->container[$offset]);
  }

  /**
   * Gets offset.
   *
   * @param integer $offset Offset
   *
   * @return mixed
   */
  public function offsetGet($offset)
  {
    return isset($this->container[$offset]) ? $this->container[$offset] : null;
  }

  /**
   * Sets value based on offset.
   *
   * @param integer $offset Offset
   * @param mixed   $value  Value to be set
   *
   * @return void
   */
  public function offsetSet($offset, $value)
  {
    if (is_null($offset)) {
      $this->container[] = $value;
    } else {
      $this->container[$offset] = $value;
    }
  }

  /**
   * Unsets offset.
   *
   * @param integer $offset Offset
   *
   * @return void
   */
  public function offsetUnset($offset)
  {
    unset($this->container[$offset]);
  }

  /**
   * Gets the string presentation of the object
   *
   * @return string
   */
  public function __toString()
  {
    if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
      return json_encode(
        ObjectSerializer::sanitizeForSerialization($this),
        JSON_PRETTY_PRINT
      );
    }

    return json_encode(ObjectSerializer::sanitizeForSerialization($this));
  }
}


