#!/bin/bash

set -eo pipefail

# use the terminus env vars created by previous steps
GI_START_URL="$MULTIDEV_SITE_URL"

echo "Using start url: $GI_START_URL"

# set up a couple variables to monitor result state
STATUS='null'
SUITE_RESULT=
GI_PASSING=

GI_RESULT_ID=$(curl -s -X POST \
    -H "Content-Type: application/json" \
    -H "X-GitHub-Event: push" \
    -d '{"payload": "{\"repository\": {\"statuses_url\": \"https://api.github.com/repos/'$GITHUB_ORG'/'$CIRCLE_PROJECT_REPONAME'/statuses/'$CIRCLE_SHA1'\"},\"sha\": \"'$CIRCLE_SHA1'\"}"}' \
    "https://api.ghostinspector.com/v1/suites/$GI_SUITE_ADA/execute/?apiKey=$GI_API_KEY&startUrl=$GI_START_URL&immediate=1" | jq -r '.data._id')

# Poll for the suite result, sleep for a few seconds if it hasn't changed
# Ghost Inspector currently does not support webhook for when an entire suite has finished executing, only for individual tests within a suite
echo "Polling for suite results (ID: $GI_RESULT_ID)"
while [ "$STATUS" = 'null' ]; do
  SUITE_RESULT=$(curl -s "https://api.ghostinspector.com/v1/suite-results/$GI_RESULT_ID/?apiKey=$GI_API_KEY")
  RESPONSE_STATUS=$(echo $SUITE_RESULT | jq -r '.code')
  if [ $? -ne 0 ] || [ "$RESPONSE_STATUS" == 'ERROR' ]; then # invalid json or api error, break
    echo "API ERROR"
    break
  fi
  STATUS=$(echo $SUITE_RESULT | jq -r '.data.passing')
  echo " - status: $STATUS"
  sleep 5
done

# status has been updated, check results for "passing"
if [ "$(echo $SUITE_RESULT | jq -r '.data.passing')" != 'true' ]; then
  echo "Suite failed! ¯\_(ツ)_/¯"
  GI_PASSING=1
else 
  echo "Suite passed! \o/"
  GI_PASSING=0
fi

SUITE_TESTS=$(curl -s "https://api.ghostinspector.com/v1/suites/$GI_SUITE/tests/?apiKey=$GI_API_KEY")
GI_SUITE_TEST_RESULTS_SLACK=$(echo $SUITE_TESTS | jq -r '.data[] | if(.passing!=true) then ":redx: " elif (.screenshotComparePassing!=true) then ":orangedash: " elif(.passing) then ":greencheck: " else ":redx: " end + " \(.name)"')

SHORT_SHA=$(echo $CIRCLE_SHA1 | cut -c -7)
PR_NUMBER=$(echo https://github.com/SFDigitalServices/sfgov/pull/1010 | awk -F "/" '{print $NF}')

# search for the deployment status message, just grab the most recent based on pr number and commit sha :crossed-fingers:
THREAD_TS=$(curl -H "Authorization: Bearer $SLACK_USER_TOKEN" "https://slack.com/api/search.messages?query=$PR_NUMBER%20$SHORT_SHA%20in%3A%23proj-sfdotgov-eng&sort=timestamp&pretty=1" | jq -r .messages.matches[0].ts)
echo $THREAD_TS

echo $GI_SUITE_TEST_RESULTS_SLACK

# send slack notification of completion
suiteStatusData=$(printf '{
  "channel": "ant-test",
  "unfurl_links": "false",
  "text": "%s"
}' ":ghost: e2e tests for <$GI_START_URL|$GI_START_URL> complete.  results in thread")

threadTs=$(curl -X POST \
  -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
  -H "Content-type: application/json; charset=utf-8" \
  --data "$suiteStatusData" \
  https://slack.com/api/chat.postMessage | jq -r .ts)

echo "threadTs:$threadTs"

threadData=$(printf '{
  "unfurl_links": "false",
  "text":"%s",
  "thread_ts":"%s"
}' "$GI_SUITE_TEST_RESULTS_SLACK" "$threadTs")

# thread the results
curl -s -X POST -H 'Content-type: application/json' --data "$threadData" $RONBOT_WEBHOOK_TEST_URL

exit $GI_PASSING

# SUITE_TESTS=$(curl -s "https://api.ghostinspector.com/v1/suites/$GI_SUITE/tests/?apiKey=$GI_API_KEY")
# GI_SUITE_TEST_RESULTS_SLACK=$(echo $SUITE_TESTS | jq -r '.data[] | if(.passing!=true) then ":redx: " elif (.screenshotComparePassing!=true) then ":orangedash: " elif(.passing) then ":greencheck: " else ":redx: " end + " \(.name)"')

# if [ -n "$CIRCLE_PULL_REQUEST" ]; then
#   PR='<'$CIRCLE_PULL_REQUEST'|pr>'
# else
#   PR='`'$CIRCLE_BRANCH'`'
# fi

# # output suite tests with results
# echo $SUITE_TESTS | jq -r '.data[] | if(.passing) then "\(.name): passed" else "\(.name): failed" end'

# # pass some things along as env variables
# if [ -n "$CIRCLE_BRANCH" ]; then # circleci
#   echo 'export GI_START_URL="'$GI_START_URL'"' >> $BASH_ENV
#   echo 'export GI_RESULT_ID="'$GI_RESULT_ID'"' >> $BASH_ENV
#   echo 'export GI_SUITE_TEST_RESULTS_SLACK="'$GI_SUITE_TEST_RESULTS_SLACK'"' >> $BASH_ENV
#   echo 'export PR="'$PR'"' >> $BASH_ENV
#   echo 'export GI_PASSING="'$GI_PASSING'"' >> $BASH_ENV
# else # local
#   export GI_START_URL=$GI_START_URL
#   export GI_RESULT_ID=$GI_RESULT_ID
#   export GI_SUITE_TEST_RESULTS_SLACK=$GI_SUITE_TEST_RESULTS_SLACK
#   export GI_PASSING=$PASSING
#   export PR=$PR
# fi

# title="<$GI_START_URL|$GI_START_URL> | $PR | <http://ronswanbot.herokuapp.com/ghost-inspector/suite-results/$GI_RESULT_ID|results>"

# data=$(printf '{
#   "attachments": [{
#     "fallback": "sfgov tests complete",
#     "blocks": [
#       {
#         "type": "section",
#         "text": {
#           "type": "mrkdwn",
#           "text": "%s"
#         }
#       },
#       {
#         "type": "divider"
#       },
#       {
#         "type": "section",
#         "text": {
#           "type": "mrkdwn",
#           "text": ":ghost: *e2e test results*\n%s"
#         }
#       },
#       {
#         "type": "divider"
#       },
#       {
#         "type": "section",
#         "text": {
#           "type": "mrkdwn",
#           "text": ":accessibility: *scan results*\n```%s```"
#         }
#       }
#     ]
#   }]
# }' "$title" "$GI_SUITE_TEST_RESULTS_SLACK" "accessibility scan results from gi here")

# curl -g -X POST -H 'Content-type: application/json' --data "$data" $RONBOT_WEBHOOK_URL

# exit $GI_PASSING
